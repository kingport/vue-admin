{
    "components": {
        "schemas": {
            "dashboard.http": {
                "required": [
                    "bind"
                ],
                "properties": {
                    "bind": {
                        "default": 18083,
                        "description": "Port without IP(18083) or port with specified IP(127.0.0.1:18083).",
                        "label": "Bind",
                        "oneOf": [
                            {
                                "type": "ip_port"
                            },
                            {
                                "minimum": 1,
                                "type": "number"
                            }
                        ]
                    },
                    "num_acceptors": {
                        "default": 4,
                        "description": "Socket acceptor pool size for TCP protocols.",
                        "label": "Number of acceptors",
                        "type": "number"
                    },
                    "max_connections": {
                        "default": 512,
                        "description": "Maximum number of simultaneous connections.",
                        "label": "Maximum connections",
                        "type": "number"
                    },
                    "backlog": {
                        "default": 1024,
                        "description": "Defines the maximum length that the queue of pending connections can grow to.",
                        "label": "Backlog",
                        "type": "number"
                    },
                    "send_timeout": {
                        "default": "5s",
                        "description": "Send timeout for the socket.",
                        "label": "Send timeout",
                        "type": "duration"
                    },
                    "inet6": {
                        "default": false,
                        "description": "Enable IPv6 support.",
                        "label": "IPv6",
                        "type": "boolean"
                    },
                    "ipv6_v6only": {
                        "default": false,
                        "description": "Disable IPv4-to-IPv6 mapping for the listener.",
                        "label": "IPv6 only",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "authn-mysql.authentication": {
                "required": [
                    "database",
                    "server",
                    "query",
                    "backend",
                    "mechanism"
                ],
                "properties": {
                    "mechanism": {
                        "description": "Authentication mechanism.",
                        "label": "mechanism",
                        "symbols": [
                            "password_based"
                        ],
                        "type": "enum"
                    },
                    "backend": {
                        "description": "Backend type.",
                        "label": "backend",
                        "symbols": [
                            "mysql"
                        ],
                        "type": "enum"
                    },
                    "password_hash_algorithm": {
                        "default": {
                            "name": "sha256",
                            "salt_position": "prefix"
                        },
                        "description": "Options for password hash verification.",
                        "label": "password_hash_algorithm",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/authn-hash.other_algorithms"
                            },
                            {
                                "$ref": "#/components/schemas/authn-hash.pbkdf2"
                            },
                            {
                                "$ref": "#/components/schemas/authn-hash.bcrypt"
                            }
                        ]
                    },
                    "query": {
                        "description": "SQL query used to lookup client data.",
                        "label": "query",
                        "type": "string"
                    },
                    "query_timeout": {
                        "default": "5s",
                        "description": "Timeout for the SQL query.",
                        "label": "query_timeout",
                        "type": "duration"
                    },
                    "enable": {
                        "default": true,
                        "description": "Set to <code>false</code> to disable this auth provider",
                        "label": "enable",
                        "type": "boolean"
                    },
                    "server": {
                        "description": "\nThe IPv4 or IPv6 address or the hostname to connect to.<br/>\nA host entry has the following form: `Host[:Port]`.<br/>\nThe MySQL default port 3306 is used if `[:Port]` is not specified.\n",
                        "label": "Server Host",
                        "type": "ip_port"
                    },
                    "database": {
                        "description": "Database name.",
                        "label": "Database Name",
                        "type": "string"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "Size of the connection pool.",
                        "label": "Pool Size",
                        "type": "string"
                    },
                    "username": {
                        "description": "EMQX's username in the external database.",
                        "label": "Username",
                        "type": "string"
                    },
                    "password": {
                        "description": "EMQX's password in the external database.",
                        "label": "Password",
                        "type": "string"
                    },
                    "auto_reconnect": {
                        "default": true,
                        "description": "Enable automatic reconnect to the database.",
                        "label": "Auto Reconnect Database",
                        "type": "boolean"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/emqx_schema.ssl_client_opts"
                    }
                },
                "type": "object"
            },
            "emqx_schema.ssl_client_opts": {
                "properties": {
                    "enable": {
                        "default": false,
                        "description": "Enable TLS.",
                        "label": "enable",
                        "type": "boolean"
                    },
                    "cacertfile": {
                        "default": "etc/certs/cacert.pem",
                        "description": "Trusted PEM format CA certificates bundle file.<br>\nThe certificates in this file are used to verify the TLS peer's certificates.\nAppend new certificates to the file if new CAs are to be trusted.\nThere is no need to restart EMQX to have the updated file loaded, because\nthe system regularly checks if file has been updated (and reload).<br>\nNOTE: invalidating (deleting) a certificate from the file will not affect\nalready established connections.\n",
                        "label": "cacertfile",
                        "type": "string"
                    },
                    "certfile": {
                        "default": "etc/certs/client-cert.pem",
                        "description": "PEM format certificates chain file.<br>\nThe certificates in this file should be in reversed order of the certificate\nissue chain. That is, the host's certificate should be placed in the beginning\nof the file, followed by the immediate issuer certificate and so on.\nAlthough the root CA certificate is optional, it should be placed at the end of\nthe file if it is to be added.",
                        "label": "certfile",
                        "type": "string"
                    },
                    "keyfile": {
                        "default": "etc/certs/client-key.pem",
                        "description": "PEM format private key file.",
                        "label": "keyfile",
                        "type": "string"
                    },
                    "verify": {
                        "default": "verify_none",
                        "description": "Enable or disable peer verification.",
                        "label": "verify",
                        "symbols": [
                            "verify_peer",
                            "verify_none"
                        ],
                        "type": "enum"
                    },
                    "reuse_sessions": {
                        "default": true,
                        "description": "Enable TLS session reuse.",
                        "label": "reuse_sessions",
                        "type": "boolean"
                    },
                    "depth": {
                        "default": 10,
                        "description": "Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path. So, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly; if 1 the path can be PEER, CA, ROOT-CA; if 2 the path can be PEER, CA, CA, ROOT-CA, and so on. The default value is 10.",
                        "label": "depth",
                        "type": "number"
                    },
                    "password": {
                        "description": "String containing the user's password. Only used if the private\nkey file is password-protected.",
                        "label": "password",
                        "type": "string"
                    },
                    "versions": {
                        "default": [
                            "tlsv1.3",
                            "tlsv1.2",
                            "tlsv1.1",
                            "tlsv1"
                        ],
                        "description": "All TLS/DTLS versions to be supported.<br>\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br>\nIn case PSK cipher suites are intended, make sure to configured\n<code>['tlsv1.2', 'tlsv1.1']</code> here.",
                        "items": {
                            "type": "string"
                        },
                        "label": "versions",
                        "type": "array"
                    },
                    "ciphers": {
                        "default": [
                            "TLS_AES_256_GCM_SHA384",
                            "TLS_AES_128_GCM_SHA256",
                            "TLS_CHACHA20_POLY1305_SHA256",
                            "TLS_AES_128_CCM_SHA256",
                            "TLS_AES_128_CCM_8_SHA256",
                            "ECDHE-ECDSA-AES256-GCM-SHA384",
                            "ECDHE-RSA-AES256-GCM-SHA384",
                            "ECDHE-ECDSA-AES256-SHA384",
                            "ECDHE-RSA-AES256-SHA384",
                            "ECDH-ECDSA-AES256-GCM-SHA384",
                            "ECDH-RSA-AES256-GCM-SHA384",
                            "ECDH-ECDSA-AES256-SHA384",
                            "ECDH-RSA-AES256-SHA384",
                            "DHE-DSS-AES256-GCM-SHA384",
                            "DHE-DSS-AES256-SHA256",
                            "AES256-GCM-SHA384",
                            "AES256-SHA256",
                            "ECDHE-ECDSA-AES128-GCM-SHA256",
                            "ECDHE-RSA-AES128-GCM-SHA256",
                            "ECDHE-ECDSA-AES128-SHA256",
                            "ECDHE-RSA-AES128-SHA256",
                            "ECDH-ECDSA-AES128-GCM-SHA256",
                            "ECDH-RSA-AES128-GCM-SHA256",
                            "ECDH-ECDSA-AES128-SHA256",
                            "ECDH-RSA-AES128-SHA256",
                            "DHE-DSS-AES128-GCM-SHA256",
                            "DHE-DSS-AES128-SHA256",
                            "AES128-GCM-SHA256",
                            "AES128-SHA256",
                            "ECDHE-ECDSA-AES256-SHA",
                            "ECDHE-RSA-AES256-SHA",
                            "DHE-DSS-AES256-SHA",
                            "ECDH-ECDSA-AES256-SHA",
                            "ECDH-RSA-AES256-SHA",
                            "ECDHE-ECDSA-AES128-SHA",
                            "ECDHE-RSA-AES128-SHA",
                            "DHE-DSS-AES128-SHA",
                            "ECDH-ECDSA-AES128-SHA",
                            "ECDH-RSA-AES128-SHA",
                            "RSA-PSK-AES256-GCM-SHA384",
                            "RSA-PSK-AES256-CBC-SHA384",
                            "RSA-PSK-AES128-GCM-SHA256",
                            "RSA-PSK-AES128-CBC-SHA256",
                            "RSA-PSK-AES256-CBC-SHA",
                            "RSA-PSK-AES128-CBC-SHA"
                        ],
                        "description": "This config holds TLS cipher suite names separated by comma,\nor as an array of strings. e.g.\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.\n<br>\nCiphers (and their ordering) define the way in which the\nclient and server encrypts information over the network connection.\nSelecting a good cipher suite is critical for the\napplication's data security, confidentiality and performance.\n\nThe names should be in OpenSSL string format (not RFC format).\nAll default values and examples provided by EMQX config\ndocumentation are all in OpenSSL format.<br>\n\nNOTE: Certain cipher suites are only compatible with\nspecific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')\nincompatible cipher suites will be silently dropped.\nFor instance, if only 'tlsv1.3' is given in the <code>versions</code>,\nconfiguring cipher suites for other versions will have no effect.\n<br>\n\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br>\nIf PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br>\nPSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code><br>\n",
                        "items": {
                            "type": "string"
                        },
                        "label": "ciphers",
                        "type": "array"
                    },
                    "user_lookup_fun": {
                        "default": "emqx_tls_psk:lookup",
                        "description": "EMQX-internal callback that is used to lookup pre-shared key (PSK) identity.",
                        "label": "user_lookup_fun",
                        "type": "string"
                    },
                    "secure_renegotiate": {
                        "default": true,
                        "description": "SSL parameter renegotiation is a feature that allows a client and a server\nto renegotiate the parameters of the SSL connection on the fly.\nRFC 5746 defines a more secure way of doing this. By enabling secure renegotiation,\nyou drop support for the insecure renegotiation, prone to MitM attacks.",
                        "label": "secure_renegotiate",
                        "type": "boolean"
                    },
                    "server_name_indication": {
                        "description": "Specify the host name to be used in TLS Server Name Indication extension.<br>\nFor instance, when connecting to \"server.example.net\", the genuine server\nwhich accepts the connection and performs TLS handshake may differ from the\nhost the TLS client initially connects to, e.g. when connecting to an IP address\nor when the host has multiple resolvable DNS records <br>\nIf not specified, it will default to the host name string which is used\nto establish the connection, unless it is IP addressed used.<br>\nThe host name is then also used in the host name verification of the peer\ncertificate.<br> The special value 'disable' prevents the Server Name\nIndication extension from being sent and disables the hostname\nverification check.",
                        "label": "server_name_indication",
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "symbols": [
                                    "disable"
                                ],
                                "type": "enum"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "emqx_conf_schema.cluster_etcd": {
                "properties": {
                    "server": {
                        "description": "List of endpoint URLs of the etcd cluster",
                        "label": "Cluster Etcd Server",
                        "readOnly": true,
                        "type": "comma_separated_string"
                    },
                    "prefix": {
                        "default": "emqxcl",
                        "description": "Key prefix used for EMQX service discovery.",
                        "label": "Cluster Etcd Prefix",
                        "readOnly": true,
                        "type": "string"
                    },
                    "node_ttl": {
                        "default": "1m",
                        "description": "Expiration time of the etcd key associated with the node.\nIt is refreshed automatically, as long as the node is alive.\n          ",
                        "label": "Cluster Etcd Node TTL",
                        "readOnly": true,
                        "type": "duration"
                    },
                    "ssl": {
                        "description": "Options for the TLS connection to the etcd cluster.",
                        "label": "Cluster Etcd SSL Option",
                        "readOnly": true,
                        "$ref": "#/components/schemas/emqx_schema.ssl_client_opts"
                    }
                },
                "type": "object"
            },
            "emqx_schema.tcp_opts": {
                "properties": {
                    "active_n": {
                        "default": 100,
                        "description": "Specify the {active, N} option for this Socket.<br/>\n See: https://erlang.org/doc/man/inet.html#setopts-2",
                        "label": "active_n",
                        "type": "number"
                    },
                    "backlog": {
                        "default": 1024,
                        "description": "TCP backlog defines the maximum length that the queue of\n pending connections can grow to.",
                        "label": "backlog",
                        "type": "number"
                    },
                    "send_timeout": {
                        "default": "15s",
                        "description": "The TCP send timeout for the connections.",
                        "label": "send_timeout",
                        "type": "duration"
                    },
                    "send_timeout_close": {
                        "default": true,
                        "description": "Close the connection if send timeout.",
                        "label": "send_timeout_close",
                        "type": "boolean"
                    },
                    "recbuf": {
                        "description": "The TCP receive buffer (OS kernel) for the connections.",
                        "label": "recbuf",
                        "type": "byteSize"
                    },
                    "sndbuf": {
                        "description": "The TCP send buffer (OS kernel) for the connections.",
                        "label": "sndbuf",
                        "type": "byteSize"
                    },
                    "buffer": {
                        "description": "The size of the user-space buffer used by the driver.",
                        "label": "buffer",
                        "type": "byteSize"
                    },
                    "high_watermark": {
                        "default": "1MB",
                        "description": "The socket is set to a busy state when the amount of data queued internally\n  by the VM socket implementation reaches this limit.",
                        "label": "high_watermark",
                        "type": "byteSize"
                    },
                    "nodelay": {
                        "default": false,
                        "description": "The TCP_NODELAY flag for the connections.",
                        "label": "nodelay",
                        "type": "boolean"
                    },
                    "reuseaddr": {
                        "default": true,
                        "description": "The SO_REUSEADDR flag for the connections.",
                        "label": "reuseaddr",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "emqx_schema.mqtt_wss_listener": {
                "required": [
                    "bind"
                ],
                "properties": {
                    "tcp": {
                        "description": "tcp Description",
                        "label": "tcp",
                        "$ref": "#/components/schemas/emqx_schema.tcp_opts"
                    },
                    "ssl": {
                        "description": "ssl Description",
                        "label": "ssl",
                        "$ref": "#/components/schemas/emqx_schema.listener_wss_opts"
                    },
                    "websocket": {
                        "description": "websocket Description",
                        "label": "websocket",
                        "$ref": "#/components/schemas/emqx_schema.ws_opts"
                    },
                    "bind": {
                        "description": "IP address and port for the listening socket.",
                        "label": "bind",
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "ip_port"
                            }
                        ]
                    },
                    "acceptors": {
                        "default": 16,
                        "description": "The size of the listener's receiving pool.",
                        "label": "acceptors",
                        "type": "number"
                    },
                    "max_connections": {
                        "default": "infinity",
                        "description": "The maximum number of concurrent connections allowed by the listener.",
                        "label": "max_connections",
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "mountpoint": {
                        "default": "",
                        "description": "When publishing or subscribing, prefix all topics with a mountpoint string.\n The prefixed string will be removed from the topic name when the message\n is delivered to the subscriber. The mountpoint is a way that users can use\n to implement isolation of message routing between different listeners.\n For example if a client A subscribes to `t` with `listeners.tcp.<name>.mountpoint`\n set to `some_tenant`, then the client actually subscribes to the topic\n `some_tenant/t`. Similarly, if another client B (connected to the same listener\n as the client A) sends a message to topic `t`, the message is routed\n to all the clients subscribed `some_tenant/t`, so client A will receive the\n message, with topic name `t`.<br/>\n Set to `\"\"` to disable the feature.<br/>\n\n Variables in mountpoint string:\n - <code>${clientid}</code>: clientid\n - <code>${username}</code>: username",
                        "label": "mountpoint",
                        "type": "string"
                    },
                    "zone": {
                        "default": "default",
                        "description": "The configuration zone to which the listener belongs.",
                        "label": "zone",
                        "type": "string"
                    },
                    "limiter": {
                        "default": {},
                        "description": "Type of the rate limit.",
                        "label": "limiter",
                        "properties": {
                            "$ratelimit's type": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "access_rules": {
                        "default": [
                            "allow all"
                        ],
                        "description": "The access control rules for this listener.<br/>See: https://github.com/emqtt/esockd#allowdeny",
                        "items": {
                            "type": "string"
                        },
                        "label": "access_rules",
                        "type": "array"
                    },
                    "proxy_protocol": {
                        "default": false,
                        "description": "Enable the Proxy Protocol V1/2 if the EMQX cluster is deployed\n behind HAProxy or Nginx.<br/>See: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
                        "label": "proxy_protocol",
                        "type": "boolean"
                    },
                    "proxy_protocol_timeout": {
                        "default": "3s",
                        "description": "Timeout for proxy protocol. EMQX will close the TCP connection if proxy protocol packet is not received within the timeout.",
                        "label": "proxy_protocol_timeout",
                        "type": "duration"
                    },
                    "authentication": {
                        "description": "Per-listener authentication override\nAuthentication can be one single authenticator instance or a chain of authenticators as an array.\nWhen authenticating a login (username, client ID, etc.) the authenticators are checked in the configured order.<br>\n",
                        "items": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/authn-scram-builtin_db.authentication"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-jwt.jwks"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-jwt.public-key"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-jwt.hmac-based"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-http.post"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-http.get"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-redis.sentinel"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-redis.cluster"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-redis.standalone"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-mongodb.sharded-cluster"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-mongodb.replica-set"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-mongodb.standalone"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-postgresql.authentication"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-mysql.authentication"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-builtin_db.authentication"
                                }
                            ]
                        },
                        "label": "authentication",
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "emqx_schema.persistent_session_store": {
                "properties": {
                    "enabled": {
                        "default": false,
                        "description": "Use the database to store information about persistent sessions.\\nThis makes it possible to migrate a client connection to another\\ncluster node if a node is stopped.\\n",
                        "label": "Enable persistent session store",
                        "type": "boolean"
                    },
                    "storage_type": {
                        "default": "disc",
                        "description": "Store information about persistent sessions on disc or in ram.\\nIf ram is chosen, all information about persistent sessions remains\\nas long as at least one node in a cluster is alive to keep the information.\\nIf disc is chosen, the information is persisted on disc and will survive\\ncluster restart, at the price of more disc usage and less throughput.\\n",
                        "label": "Storage type",
                        "oneOf": [
                            {
                                "symbols": [
                                    "disc"
                                ],
                                "type": "enum"
                            },
                            {
                                "symbols": [
                                    "ram"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "max_retain_undelivered": {
                        "default": "1h",
                        "description": "The time messages that was not delivered to a persistent session\\nis stored before being garbage collected if the node the previous\\nsession was handled on restarts of is stopped.\\n",
                        "label": "Max retain undelivered",
                        "type": "duration"
                    },
                    "message_gc_interval": {
                        "default": "1h",
                        "description": "The starting interval for garbage collection of undelivered messages to\\na persistent session. This affects how often the \"max_retain_undelivered\"\\nis checked for removal.\\n",
                        "label": "Message GC interval",
                        "type": "duration"
                    },
                    "session_message_gc_interval": {
                        "default": "1m",
                        "description": "The starting interval for garbage collection of transient data for\\npersistent session messages. This does not affect the lifetime length\\nof persistent session messages.\\n",
                        "label": "Session message GC interval",
                        "type": "duration"
                    }
                },
                "type": "object"
            },
            "connector-http.request": {
                "properties": {
                    "method": {
                        "description": "HTTP method.",
                        "label": "HTTP Method",
                        "symbols": [
                            "post",
                            "put",
                            "get",
                            "delete"
                        ],
                        "type": "enum"
                    },
                    "path": {
                        "description": "URL path.",
                        "label": "URL Path",
                        "type": "string"
                    },
                    "body": {
                        "description": "HTTP request body.",
                        "label": "HTTP Body",
                        "type": "string"
                    },
                    "headers": {
                        "description": "List of HTTP headers.",
                        "label": "HTTP Headers",
                        "type": "string"
                    },
                    "request_timeout": {
                        "description": "HTTP request timeout.",
                        "label": "Request Timeout",
                        "type": "duration"
                    }
                },
                "type": "object"
            },
            "emqx_schema.zone": {
                "properties": {
                    "mqtt": {
                        "description": "mqtt Description",
                        "label": "mqtt",
                        "$ref": "#/components/schemas/zone.mqtt"
                    },
                    "stats": {
                        "description": "stats Description",
                        "label": "stats",
                        "$ref": "#/components/schemas/zone.stats"
                    },
                    "flapping_detect": {
                        "description": "flapping_detect Description",
                        "label": "flapping_detect",
                        "$ref": "#/components/schemas/zone.flapping_detect"
                    },
                    "force_shutdown": {
                        "description": "force_shutdown Description",
                        "label": "force_shutdown",
                        "$ref": "#/components/schemas/zone.force_shutdown"
                    },
                    "conn_congestion": {
                        "description": "conn_congestion Description",
                        "label": "conn_congestion",
                        "$ref": "#/components/schemas/zone.conn_congestion"
                    },
                    "force_gc": {
                        "description": "force_gc Description",
                        "label": "force_gc",
                        "$ref": "#/components/schemas/zone.force_gc"
                    },
                    "overload_protection": {
                        "description": "overload_protection Description",
                        "label": "overload_protection",
                        "$ref": "#/components/schemas/zone.overload_protection"
                    }
                },
                "type": "object"
            },
            "emqx_schema.listener_ssl_opts": {
                "properties": {
                    "enable": {
                        "default": false,
                        "description": "Enable TLS.",
                        "label": "enable",
                        "type": "boolean"
                    },
                    "cacertfile": {
                        "default": "etc/certs/cacert.pem",
                        "description": "Trusted PEM format CA certificates bundle file.<br>\nThe certificates in this file are used to verify the TLS peer's certificates.\nAppend new certificates to the file if new CAs are to be trusted.\nThere is no need to restart EMQX to have the updated file loaded, because\nthe system regularly checks if file has been updated (and reload).<br>\nNOTE: invalidating (deleting) a certificate from the file will not affect\nalready established connections.\n",
                        "label": "cacertfile",
                        "type": "string"
                    },
                    "certfile": {
                        "default": "etc/certs/cert.pem",
                        "description": "PEM format certificates chain file.<br>\nThe certificates in this file should be in reversed order of the certificate\nissue chain. That is, the host's certificate should be placed in the beginning\nof the file, followed by the immediate issuer certificate and so on.\nAlthough the root CA certificate is optional, it should be placed at the end of\nthe file if it is to be added.",
                        "label": "certfile",
                        "type": "string"
                    },
                    "keyfile": {
                        "default": "etc/certs/key.pem",
                        "description": "PEM format private key file.",
                        "label": "keyfile",
                        "type": "string"
                    },
                    "verify": {
                        "default": "verify_none",
                        "description": "Enable or disable peer verification.",
                        "label": "verify",
                        "symbols": [
                            "verify_peer",
                            "verify_none"
                        ],
                        "type": "enum"
                    },
                    "reuse_sessions": {
                        "default": true,
                        "description": "Enable TLS session reuse.",
                        "label": "reuse_sessions",
                        "type": "boolean"
                    },
                    "depth": {
                        "default": 10,
                        "description": "Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path. So, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly; if 1 the path can be PEER, CA, ROOT-CA; if 2 the path can be PEER, CA, CA, ROOT-CA, and so on. The default value is 10.",
                        "label": "depth",
                        "type": "number"
                    },
                    "password": {
                        "description": "String containing the user's password. Only used if the private\nkey file is password-protected.",
                        "label": "password",
                        "type": "string"
                    },
                    "versions": {
                        "default": [
                            "tlsv1.3",
                            "tlsv1.2",
                            "tlsv1.1",
                            "tlsv1"
                        ],
                        "description": "All TLS/DTLS versions to be supported.<br>\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br>\nIn case PSK cipher suites are intended, make sure to configured\n<code>['tlsv1.2', 'tlsv1.1']</code> here.",
                        "items": {
                            "type": "string"
                        },
                        "label": "versions",
                        "type": "array"
                    },
                    "ciphers": {
                        "default": [
                            "TLS_AES_256_GCM_SHA384",
                            "TLS_AES_128_GCM_SHA256",
                            "TLS_CHACHA20_POLY1305_SHA256",
                            "TLS_AES_128_CCM_SHA256",
                            "TLS_AES_128_CCM_8_SHA256",
                            "ECDHE-ECDSA-AES256-GCM-SHA384",
                            "ECDHE-RSA-AES256-GCM-SHA384",
                            "ECDHE-ECDSA-AES256-SHA384",
                            "ECDHE-RSA-AES256-SHA384",
                            "ECDH-ECDSA-AES256-GCM-SHA384",
                            "ECDH-RSA-AES256-GCM-SHA384",
                            "ECDH-ECDSA-AES256-SHA384",
                            "ECDH-RSA-AES256-SHA384",
                            "DHE-DSS-AES256-GCM-SHA384",
                            "DHE-DSS-AES256-SHA256",
                            "AES256-GCM-SHA384",
                            "AES256-SHA256",
                            "ECDHE-ECDSA-AES128-GCM-SHA256",
                            "ECDHE-RSA-AES128-GCM-SHA256",
                            "ECDHE-ECDSA-AES128-SHA256",
                            "ECDHE-RSA-AES128-SHA256",
                            "ECDH-ECDSA-AES128-GCM-SHA256",
                            "ECDH-RSA-AES128-GCM-SHA256",
                            "ECDH-ECDSA-AES128-SHA256",
                            "ECDH-RSA-AES128-SHA256",
                            "DHE-DSS-AES128-GCM-SHA256",
                            "DHE-DSS-AES128-SHA256",
                            "AES128-GCM-SHA256",
                            "AES128-SHA256",
                            "ECDHE-ECDSA-AES256-SHA",
                            "ECDHE-RSA-AES256-SHA",
                            "DHE-DSS-AES256-SHA",
                            "ECDH-ECDSA-AES256-SHA",
                            "ECDH-RSA-AES256-SHA",
                            "ECDHE-ECDSA-AES128-SHA",
                            "ECDHE-RSA-AES128-SHA",
                            "DHE-DSS-AES128-SHA",
                            "ECDH-ECDSA-AES128-SHA",
                            "ECDH-RSA-AES128-SHA",
                            "RSA-PSK-AES256-GCM-SHA384",
                            "RSA-PSK-AES256-CBC-SHA384",
                            "RSA-PSK-AES128-GCM-SHA256",
                            "RSA-PSK-AES128-CBC-SHA256",
                            "RSA-PSK-AES256-CBC-SHA",
                            "RSA-PSK-AES128-CBC-SHA"
                        ],
                        "description": "This config holds TLS cipher suite names separated by comma,\nor as an array of strings. e.g.\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.\n<br>\nCiphers (and their ordering) define the way in which the\nclient and server encrypts information over the network connection.\nSelecting a good cipher suite is critical for the\napplication's data security, confidentiality and performance.\n\nThe names should be in OpenSSL string format (not RFC format).\nAll default values and examples provided by EMQX config\ndocumentation are all in OpenSSL format.<br>\n\nNOTE: Certain cipher suites are only compatible with\nspecific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')\nincompatible cipher suites will be silently dropped.\nFor instance, if only 'tlsv1.3' is given in the <code>versions</code>,\nconfiguring cipher suites for other versions will have no effect.\n<br>\n\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br>\nIf PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br>\nPSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code><br>\n",
                        "items": {
                            "type": "string"
                        },
                        "label": "ciphers",
                        "type": "array"
                    },
                    "user_lookup_fun": {
                        "default": "emqx_tls_psk:lookup",
                        "description": "EMQX-internal callback that is used to lookup pre-shared key (PSK) identity.",
                        "label": "user_lookup_fun",
                        "type": "string"
                    },
                    "secure_renegotiate": {
                        "default": true,
                        "description": "SSL parameter renegotiation is a feature that allows a client and a server\nto renegotiate the parameters of the SSL connection on the fly.\nRFC 5746 defines a more secure way of doing this. By enabling secure renegotiation,\nyou drop support for the insecure renegotiation, prone to MitM attacks.",
                        "label": "secure_renegotiate",
                        "type": "boolean"
                    },
                    "dhfile": {
                        "description": "Path to a file containing PEM-encoded Diffie-Hellman parameters\nto be used by the server if a cipher suite using Diffie-Hellman\nkey exchange is negotiated. If not specified, default parameters\nare used.<br>\nNOTE: The <code>dhfile</code> option is not supported by TLS 1.3.",
                        "label": "dhfile",
                        "type": "string"
                    },
                    "fail_if_no_peer_cert": {
                        "default": false,
                        "description": "Used together with {verify, verify_peer} by an TLS/DTLS server.\nIf set to true, the server fails if the client does not have a\ncertificate to send, that is, sends an empty certificate.\nIf set to false, it fails only if the client sends an invalid\ncertificate (an empty certificate is considered valid).",
                        "label": "fail_if_no_peer_cert",
                        "type": "boolean"
                    },
                    "honor_cipher_order": {
                        "default": true,
                        "description": "An important security setting, it forces the cipher to be set based\n on the server-specified order instead of the client-specified order,\n hence enforcing the (usually more properly configured) security\n ordering of the server administrator.",
                        "label": "honor_cipher_order",
                        "type": "boolean"
                    },
                    "client_renegotiation": {
                        "default": true,
                        "description": "In protocols that support client-initiated renegotiation,\nthe cost of resources of such an operation is higher for the server than the client.\nThis can act as a vector for denial of service attacks.\nThe SSL application already takes measures to counter-act such attempts,\nbut client-initiated renegotiation can be strictly disabled by setting this option to false.\nThe default value is true. Note that disabling renegotiation can result in\nlong-lived connections becoming unusable due to limits on\nthe number of messages the underlying cipher suite can encipher.",
                        "label": "client_renegotiation",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "emqx_schema.trace": {
                "properties": {
                    "payload_encode": {
                        "default": "text",
                        "description": "Determine the format of the payload format in the trace file.<br>\n`text`: Text-based protocol or plain text protocol.\n It is recommended when payload is JSON encoded.<br>\n`hex`: Binary hexadecimal encode. It is recommended when payload is a custom binary protocol.<br>\n`hidden`: payload is obfuscated as `******`\n",
                        "label": "payload_encode",
                        "symbols": [
                            "hex",
                            "text",
                            "hidden"
                        ],
                        "type": "enum"
                    }
                },
                "type": "object"
            },
            "emqx_schema.deflate_opts": {
                "properties": {
                    "level": {
                        "description": "Compression level.",
                        "label": "level",
                        "symbols": [
                            "none",
                            "default",
                            "best_compression",
                            "best_speed"
                        ],
                        "type": "enum"
                    },
                    "mem_level": {
                        "default": 8,
                        "description": "Specifies the size of the compression state.<br/>\n Lower values decrease memory usage per connection.",
                        "label": "mem_level",
                        "maximum": 9,
                        "minimum": 1,
                        "type": "number"
                    },
                    "strategy": {
                        "description": "Specifies the compression strategy.",
                        "label": "strategy",
                        "symbols": [
                            "default",
                            "filtered",
                            "huffman_only",
                            "rle"
                        ],
                        "type": "enum"
                    },
                    "server_context_takeover": {
                        "description": "Takeover means the compression state is retained\n between server messages.",
                        "label": "server_context_takeover",
                        "symbols": [
                            "takeover",
                            "no_takeover"
                        ],
                        "type": "enum"
                    },
                    "client_context_takeover": {
                        "description": "Takeover means the compression state is retained\n between client messages.",
                        "label": "client_context_takeover",
                        "symbols": [
                            "takeover",
                            "no_takeover"
                        ],
                        "type": "enum"
                    },
                    "server_max_window_bits": {
                        "default": 15,
                        "description": "Specifies the size of the compression context for the server.",
                        "label": "server_max_window_bits",
                        "maximum": 15,
                        "minimum": 8,
                        "type": "number"
                    },
                    "client_max_window_bits": {
                        "default": 15,
                        "description": "Specifies the size of the compression context for the client.",
                        "label": "client_max_window_bits",
                        "maximum": 15,
                        "minimum": 8,
                        "type": "number"
                    }
                },
                "type": "object"
            },
            "emqx_conf_schema.log_burst_limit": {
                "properties": {
                    "enable": {
                        "default": true,
                        "description": "Enable log burst control feature.",
                        "label": "Enable Burst",
                        "type": "boolean"
                    },
                    "max_count": {
                        "default": 10000,
                        "description": "Maximum number of log events to handle within a `window_time` interval. After the limit is reached, successive events are dropped until the end of the `window_time`.",
                        "label": "Events Number",
                        "type": "number"
                    },
                    "window_time": {
                        "default": "1s",
                        "description": "See `max_count`.",
                        "label": "Window Time",
                        "type": "duration"
                    }
                },
                "type": "object"
            },
            "emqx_conf_schema.cluster": {
                "properties": {
                    "name": {
                        "default": "emqxcl",
                        "description": "Human-friendly name of the EMQX cluster.",
                        "label": "Cluster Name",
                        "readOnly": true,
                        "type": "string"
                    },
                    "discovery_strategy": {
                        "default": "manual",
                        "description": "Service discovery method for the cluster nodes.",
                        "label": "Cluster Discovery Strategy",
                        "readOnly": true,
                        "symbols": [
                            "manual",
                            "static",
                            "mcast",
                            "dns",
                            "etcd",
                            "k8s"
                        ],
                        "type": "enum"
                    },
                    "autoclean": {
                        "default": "5m",
                        "description": "Remove disconnected nodes from the cluster after this interval.",
                        "label": "Cluster Auto Clean",
                        "readOnly": true,
                        "type": "duration"
                    },
                    "autoheal": {
                        "default": true,
                        "description": "If <code>true</code>, the node will try to heal network partitions automatically.",
                        "label": "Cluster Auto Heal",
                        "readOnly": true,
                        "type": "boolean"
                    },
                    "proto_dist": {
                        "default": "inet_tcp",
                        "description": "The Erlang distribution protocol for the cluster.",
                        "label": "Cluster Protocol Distribution",
                        "readOnly": true,
                        "symbols": [
                            "inet_tcp",
                            "inet6_tcp",
                            "inet_tls"
                        ],
                        "type": "enum"
                    },
                    "static": {
                        "description": "static Description",
                        "label": "static",
                        "$ref": "#/components/schemas/emqx_conf_schema.cluster_static"
                    },
                    "mcast": {
                        "description": "mcast Description",
                        "label": "mcast",
                        "$ref": "#/components/schemas/emqx_conf_schema.cluster_mcast"
                    },
                    "dns": {
                        "description": "dns Description",
                        "label": "dns",
                        "$ref": "#/components/schemas/emqx_conf_schema.cluster_dns"
                    },
                    "etcd": {
                        "description": "etcd Description",
                        "label": "etcd",
                        "$ref": "#/components/schemas/emqx_conf_schema.cluster_etcd"
                    },
                    "k8s": {
                        "description": "k8s Description",
                        "label": "k8s",
                        "$ref": "#/components/schemas/emqx_conf_schema.cluster_k8s"
                    }
                },
                "type": "object"
            },
            "emqx_schema.sysmon_os": {
                "properties": {
                    "cpu_check_interval": {
                        "default": "60s",
                        "description": "The time interval for the periodic CPU check.",
                        "label": "The time interval for the periodic CPU check.",
                        "type": "duration"
                    },
                    "cpu_high_watermark": {
                        "default": "80%",
                        "description": "The threshold, as percentage of system CPU load,\\n for how much system cpu can be used before the corresponding alarm is raised.",
                        "label": "CPU high watermark",
                        "type": "percent"
                    },
                    "cpu_low_watermark": {
                        "default": "60%",
                        "description": "The threshold, as percentage of system CPU load,\\n for how much system cpu can be used before the corresponding alarm is cleared.",
                        "label": "CPU low watermark",
                        "type": "percent"
                    },
                    "mem_check_interval": {
                        "default": "60s",
                        "description": "The time interval for the periodic memory check.",
                        "label": "Mem check interval",
                        "oneOf": [
                            {
                                "type": "duration"
                            },
                            {
                                "symbols": [
                                    "disabled"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "sysmem_high_watermark": {
                        "default": "70%",
                        "description": "The threshold, as percentage of system memory,\\n for how much system memory can be allocated before the corresponding alarm is raised.",
                        "label": "SysMem high wartermark",
                        "type": "percent"
                    },
                    "procmem_high_watermark": {
                        "default": "5%",
                        "description": "The threshold, as percentage of system memory,\\n for how much system memory can be allocated by one Erlang process before\\n the corresponding alarm is raised.",
                        "label": "ProcMem high wartermark",
                        "type": "percent"
                    }
                },
                "type": "object"
            },
            "emqx_conf_schema.log": {
                "properties": {
                    "console_handler": {
                        "description": "console_handler Description",
                        "label": "console_handler",
                        "$ref": "#/components/schemas/emqx_conf_schema.console_handler"
                    },
                    "file_handlers": {
                        "description": "Key-value list of file-based log handlers.",
                        "label": "Log Handlers Key Val List",
                        "properties": {
                            "$name": {
                                "$ref": "#/components/schemas/emqx_conf_schema.log_file_handler"
                            }
                        },
                        "type": "object"
                    },
                    "error_logger": {
                        "default": "silent",
                        "description": "Deprecated.",
                        "label": "Deprecate",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "emqx_conf_schema.cluster_k8s": {
                "properties": {
                    "apiserver": {
                        "description": "Kubernetes API endpoint URL.",
                        "label": "Cluster k8s ApiServer",
                        "readOnly": true,
                        "type": "string"
                    },
                    "service_name": {
                        "default": "emqx",
                        "description": "EMQX broker service name.",
                        "label": "K8s Service Name",
                        "readOnly": true,
                        "type": "string"
                    },
                    "address_type": {
                        "description": "Address type used for connecting to the discovered nodes.",
                        "label": "K8s Address Type",
                        "readOnly": true,
                        "symbols": [
                            "ip",
                            "dns",
                            "hostname"
                        ],
                        "type": "enum"
                    },
                    "app_name": {
                        "default": "emqx",
                        "description": "This parameter should be set to the part of the <code>node.name</code>\nbefore the '@'.<br/>\nFor example, if the <code>node.name</code> is <code>emqx@127.0.0.1</code>, then this parameter\nshould be set to <code>emqx</code>.",
                        "label": "K8s App Name",
                        "readOnly": true,
                        "type": "string"
                    },
                    "namespace": {
                        "default": "default",
                        "description": "Kubernetes namespace.",
                        "label": "K8s Namespace",
                        "readOnly": true,
                        "type": "string"
                    },
                    "suffix": {
                        "default": "pod.local",
                        "description": "Node name suffix.<br/>\nNote: this parameter is only relevant when <code>address_type</code> is <code>dns</code>\nor <code>hostname</code>.",
                        "label": "K8s Suffix",
                        "readOnly": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "emqx_schema.mqtt_ssl_listener": {
                "required": [
                    "bind"
                ],
                "properties": {
                    "tcp": {
                        "description": "tcp Description",
                        "label": "tcp",
                        "$ref": "#/components/schemas/emqx_schema.tcp_opts"
                    },
                    "ssl": {
                        "description": "ssl Description",
                        "label": "ssl",
                        "$ref": "#/components/schemas/emqx_schema.listener_ssl_opts"
                    },
                    "bind": {
                        "description": "IP address and port for the listening socket.",
                        "label": "bind",
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "ip_port"
                            }
                        ]
                    },
                    "acceptors": {
                        "default": 16,
                        "description": "The size of the listener's receiving pool.",
                        "label": "acceptors",
                        "type": "number"
                    },
                    "max_connections": {
                        "default": "infinity",
                        "description": "The maximum number of concurrent connections allowed by the listener.",
                        "label": "max_connections",
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "mountpoint": {
                        "default": "",
                        "description": "When publishing or subscribing, prefix all topics with a mountpoint string.\n The prefixed string will be removed from the topic name when the message\n is delivered to the subscriber. The mountpoint is a way that users can use\n to implement isolation of message routing between different listeners.\n For example if a client A subscribes to `t` with `listeners.tcp.<name>.mountpoint`\n set to `some_tenant`, then the client actually subscribes to the topic\n `some_tenant/t`. Similarly, if another client B (connected to the same listener\n as the client A) sends a message to topic `t`, the message is routed\n to all the clients subscribed `some_tenant/t`, so client A will receive the\n message, with topic name `t`.<br/>\n Set to `\"\"` to disable the feature.<br/>\n\n Variables in mountpoint string:\n - <code>${clientid}</code>: clientid\n - <code>${username}</code>: username",
                        "label": "mountpoint",
                        "type": "string"
                    },
                    "zone": {
                        "default": "default",
                        "description": "The configuration zone to which the listener belongs.",
                        "label": "zone",
                        "type": "string"
                    },
                    "limiter": {
                        "default": {},
                        "description": "Type of the rate limit.",
                        "label": "limiter",
                        "properties": {
                            "$ratelimit's type": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "access_rules": {
                        "default": [
                            "allow all"
                        ],
                        "description": "The access control rules for this listener.<br/>See: https://github.com/emqtt/esockd#allowdeny",
                        "items": {
                            "type": "string"
                        },
                        "label": "access_rules",
                        "type": "array"
                    },
                    "proxy_protocol": {
                        "default": false,
                        "description": "Enable the Proxy Protocol V1/2 if the EMQX cluster is deployed\n behind HAProxy or Nginx.<br/>See: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
                        "label": "proxy_protocol",
                        "type": "boolean"
                    },
                    "proxy_protocol_timeout": {
                        "default": "3s",
                        "description": "Timeout for proxy protocol. EMQX will close the TCP connection if proxy protocol packet is not received within the timeout.",
                        "label": "proxy_protocol_timeout",
                        "type": "duration"
                    },
                    "authentication": {
                        "description": "Per-listener authentication override\nAuthentication can be one single authenticator instance or a chain of authenticators as an array.\nWhen authenticating a login (username, client ID, etc.) the authenticators are checked in the configured order.<br>\n",
                        "items": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/authn-scram-builtin_db.authentication"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-jwt.jwks"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-jwt.public-key"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-jwt.hmac-based"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-http.post"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-http.get"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-redis.sentinel"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-redis.cluster"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-redis.standalone"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-mongodb.sharded-cluster"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-mongodb.replica-set"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-mongodb.standalone"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-postgresql.authentication"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-mysql.authentication"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-builtin_db.authentication"
                                }
                            ]
                        },
                        "label": "authentication",
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "emqx_conf_schema.console_handler": {
                "properties": {
                    "enable": {
                        "default": false,
                        "description": "Enable this log handler.",
                        "label": "Enable Log Handler",
                        "type": "boolean"
                    },
                    "level": {
                        "default": "warning",
                        "description": "Global log level. This includes the primary log level and all log handlers.",
                        "label": "Global Level",
                        "symbols": [
                            "debug",
                            "info",
                            "notice",
                            "warning",
                            "error",
                            "critical",
                            "alert",
                            "emergency",
                            "all"
                        ],
                        "type": "enum"
                    },
                    "time_offset": {
                        "default": "system",
                        "description": "The time offset to be used when formatting the timestamp.",
                        "label": "Time Offset",
                        "type": "string"
                    },
                    "chars_limit": {
                        "default": "unlimited",
                        "description": "Set the maximum length of a single log message. If this length is exceeded, the log message will be truncated.",
                        "label": "Single Log Max Length",
                        "oneOf": [
                            {
                                "minimum": 1,
                                "type": "number"
                            },
                            {
                                "symbols": [
                                    "unlimited"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "formatter": {
                        "default": "text",
                        "description": "Choose log format. <code>text</code> for free text, and <code>json</code> for structured logging.",
                        "label": "Log Format",
                        "symbols": [
                            "text",
                            "json"
                        ],
                        "type": "enum"
                    },
                    "single_line": {
                        "default": true,
                        "description": "Print logs in a single line if set to true. Otherwise, log messages may span multiple lines.",
                        "label": "Single Line Mode",
                        "type": "boolean"
                    },
                    "sync_mode_qlen": {
                        "default": 100,
                        "description": "As long as the number of buffered log events is lower than this value, all log events are handled asynchronously.",
                        "label": "Sync Mode Max Log Events",
                        "type": "number"
                    },
                    "drop_mode_qlen": {
                        "default": 3000,
                        "description": "When the number of buffered log events is larger than this value, the new log events are dropped.<br/>When drop mode is activated or deactivated, a message is printed in the logs.",
                        "label": "Drop Mode Max Log Events",
                        "type": "number"
                    },
                    "flush_qlen": {
                        "default": 8000,
                        "description": "If the number of buffered log events grows larger than this threshold, a flush (delete) operation takes place. To flush events, the handler discards the buffered log messages without logging.",
                        "label": "Flush Threshold",
                        "type": "number"
                    },
                    "overload_kill": {
                        "description": "overload_kill Description",
                        "label": "overload_kill",
                        "$ref": "#/components/schemas/emqx_conf_schema.log_overload_kill"
                    },
                    "burst_limit": {
                        "description": "burst_limit Description",
                        "label": "burst_limit",
                        "$ref": "#/components/schemas/emqx_conf_schema.log_burst_limit"
                    },
                    "supervisor_reports": {
                        "default": "error",
                        "description": "Type of supervisor reports that are logged.\n - `error`: only log errors in the Erlang processes.\n - `progress`: log process startup.",
                        "label": "Report Type",
                        "symbols": [
                            "error",
                            "progress"
                        ],
                        "type": "enum"
                    },
                    "max_depth": {
                        "default": 100,
                        "description": "Maximum depth for Erlang term log formatting and Erlang process message queue inspection.",
                        "label": "Max Depth",
                        "oneOf": [
                            {
                                "minimum": 1,
                                "type": "number"
                            },
                            {
                                "symbols": [
                                    "unlimited"
                                ],
                                "type": "enum"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "authn-hash.bcrypt_rw": {
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "BCRYPT password hashing.",
                        "label": "name",
                        "symbols": [
                            "bcrypt"
                        ],
                        "type": "enum"
                    },
                    "salt_rounds": {
                        "default": 10,
                        "description": "Salt rounds for BCRYPT password generation.",
                        "example": 10,
                        "label": "salt_rounds",
                        "type": "number"
                    }
                },
                "type": "object"
            },
            "authn-http.post": {
                "required": [
                    "url",
                    "backend",
                    "mechanism",
                    "method"
                ],
                "properties": {
                    "method": {
                        "default": "post",
                        "description": "HTTP method.",
                        "label": "method",
                        "symbols": [
                            "post"
                        ],
                        "type": "enum"
                    },
                    "headers": {
                        "default": {
                            "accept": "application/json",
                            "cache-control": "no-cache",
                            "connection": "keep-alive",
                            "content-type": "application/json",
                            "keep-alive": "timeout=30, max=1000"
                        },
                        "description": "List of HTTP headers.",
                        "label": "headers",
                        "type": "string"
                    },
                    "mechanism": {
                        "description": "Authentication mechanism.",
                        "label": "mechanism",
                        "symbols": [
                            "password_based"
                        ],
                        "type": "enum"
                    },
                    "backend": {
                        "description": "Backend type.",
                        "label": "backend",
                        "symbols": [
                            "http"
                        ],
                        "type": "enum"
                    },
                    "url": {
                        "description": "URL of the auth server.",
                        "label": "url",
                        "type": "string"
                    },
                    "body": {
                        "description": "Body of the HTTP request.",
                        "label": "body",
                        "type": "string"
                    },
                    "request_timeout": {
                        "default": "5s",
                        "description": "HTTP request timeout",
                        "label": "request_timeout",
                        "type": "duration"
                    },
                    "enable": {
                        "default": true,
                        "description": "Set to <code>false</code> to disable this auth provider",
                        "label": "enable",
                        "type": "boolean"
                    },
                    "connect_timeout": {
                        "default": "15s",
                        "description": "The timeout when connecting to the HTTP server.",
                        "label": "Connect Timeout",
                        "type": "duration"
                    },
                    "enable_pipelining": {
                        "default": true,
                        "description": "Enable the HTTP pipeline.",
                        "label": "HTTP Pipelineing",
                        "type": "boolean"
                    },
                    "max_retries": {
                        "default": 5,
                        "description": "Max retry times if error on sending request.",
                        "label": "Max Retries",
                        "minimum": 1,
                        "type": "number"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "The pool size.",
                        "label": "Pool Size",
                        "type": "string"
                    },
                    "request": {
                        "description": "\nIf the request is provided, the caller can send HTTP requests via\n<code>emqx_resource:query(ResourceId, {send_message, BridgeId, Message})</code>\n",
                        "label": "Request",
                        "$ref": "#/components/schemas/connector-http.request"
                    },
                    "retry_interval": {
                        "default": "1s",
                        "description": "Interval between retries.",
                        "label": "Retry Interval",
                        "type": "duration"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/emqx_schema.ssl_client_opts"
                    }
                },
                "type": "object"
            },
            "emqx_schema.sysmon_vm": {
                "properties": {
                    "process_check_interval": {
                        "default": "30s",
                        "description": "The time interval for the periodic process limit check.",
                        "label": "Process limit check interval",
                        "type": "duration"
                    },
                    "process_high_watermark": {
                        "default": "80%",
                        "description": "The threshold, as percentage of processes, for how many\\n processes can simultaneously exist at the local node before the corresponding\\n alarm is raised.",
                        "label": "Process high watermark",
                        "type": "percent"
                    },
                    "process_low_watermark": {
                        "default": "60%",
                        "description": "The threshold, as percentage of processes, for how many\\n processes can simultaneously exist at the local node before the corresponding\\n alarm is cleared.",
                        "label": "Process low watermark",
                        "type": "percent"
                    },
                    "long_gc": {
                        "description": "Enable Long GC monitoring.",
                        "label": "Enable Long GC monitoring.",
                        "oneOf": [
                            {
                                "type": "duration"
                            },
                            {
                                "symbols": [
                                    "disabled"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "long_schedule": {
                        "default": "240ms",
                        "description": "Enable Long Schedule monitoring.",
                        "label": "Enable Long Schedule monitoring.",
                        "oneOf": [
                            {
                                "type": "duration"
                            },
                            {
                                "symbols": [
                                    "disabled"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "large_heap": {
                        "default": "32MB",
                        "description": "Enable Large Heap monitoring.",
                        "label": "Enable Large Heap monitoring.",
                        "oneOf": [
                            {
                                "type": "byteSize"
                            },
                            {
                                "symbols": [
                                    "disabled"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "busy_dist_port": {
                        "default": true,
                        "description": "Enable Busy Distribution Port monitoring.",
                        "label": "Enable Busy Distribution Port monitoring.",
                        "type": "boolean"
                    },
                    "busy_port": {
                        "default": true,
                        "description": "Enable Busy Port monitoring.",
                        "label": "Enable Busy Port monitoring.",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "zone.force_gc": {
                "properties": {
                    "enable": {
                        "description": "Enable forced garbage collection.",
                        "label": "Enable forced garbage collection.",
                        "type": "boolean"
                    },
                    "count": {
                        "description": "GC the process after this many received messages.",
                        "label": "Process GC messages num",
                        "minimum": 0,
                        "type": "number"
                    },
                    "bytes": {
                        "description": "GC the process after specified number of bytes have passed through.",
                        "label": "Process GC bytes",
                        "type": "byteSize"
                    }
                },
                "type": "object"
            },
            "emqx_conf_schema.cluster_dns": {
                "properties": {
                    "name": {
                        "default": "localhost",
                        "description": "The domain name of the EMQX cluster.",
                        "label": "Cluster Dns Name",
                        "readOnly": true,
                        "type": "string"
                    },
                    "app": {
                        "default": "emqx",
                        "description": "The symbolic name of the EMQX service.",
                        "label": "Cluster DNS App",
                        "readOnly": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "emqx_connector_mongo.topology": {
                "properties": {
                    "pool_size": {
                        "default": 8,
                        "description": "Size of the connection pool.",
                        "label": "Pool Size",
                        "type": "string"
                    },
                    "max_overflow": {
                        "default": 0,
                        "description": "Max Overflow.",
                        "label": "Max Overflow",
                        "minimum": 1,
                        "type": "number"
                    },
                    "overflow_ttl": {
                        "description": "Time interval, such as timeout or TTL.",
                        "label": "Time Interval",
                        "type": "duration"
                    },
                    "overflow_check_period": {
                        "description": "Time interval, such as timeout or TTL.",
                        "label": "Time Interval",
                        "type": "duration"
                    },
                    "local_threshold_ms": {
                        "description": "Time interval, such as timeout or TTL.",
                        "label": "Time Interval",
                        "type": "duration"
                    },
                    "connect_timeout_ms": {
                        "description": "Time interval, such as timeout or TTL.",
                        "label": "Time Interval",
                        "type": "duration"
                    },
                    "socket_timeout_ms": {
                        "description": "Time interval, such as timeout or TTL.",
                        "label": "Time Interval",
                        "type": "duration"
                    },
                    "server_selection_timeout_ms": {
                        "description": "Time interval, such as timeout or TTL.",
                        "label": "Time Interval",
                        "type": "duration"
                    },
                    "wait_queue_timeout_ms": {
                        "description": "Time interval, such as timeout or TTL.",
                        "label": "Time Interval",
                        "type": "duration"
                    },
                    "heartbeat_frequency_ms": {
                        "description": "Time interval, such as timeout or TTL.",
                        "label": "Time Interval",
                        "type": "duration"
                    },
                    "min_heartbeat_frequency_ms": {
                        "description": "Time interval, such as timeout or TTL.",
                        "label": "Time Interval",
                        "type": "duration"
                    }
                },
                "type": "object"
            },
            "authn-redis.cluster": {
                "required": [
                    "database",
                    "redis_type",
                    "servers",
                    "cmd",
                    "backend",
                    "mechanism"
                ],
                "properties": {
                    "mechanism": {
                        "description": "Authentication mechanism.",
                        "label": "mechanism",
                        "symbols": [
                            "password_based"
                        ],
                        "type": "enum"
                    },
                    "backend": {
                        "description": "Backend type.",
                        "label": "backend",
                        "symbols": [
                            "redis"
                        ],
                        "type": "enum"
                    },
                    "cmd": {
                        "description": "Redis query.",
                        "label": "cmd",
                        "type": "string"
                    },
                    "password_hash_algorithm": {
                        "default": {
                            "name": "sha256",
                            "salt_position": "prefix"
                        },
                        "description": "Options for password hash verification.",
                        "label": "password_hash_algorithm",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/authn-hash.other_algorithms"
                            },
                            {
                                "$ref": "#/components/schemas/authn-hash.pbkdf2"
                            },
                            {
                                "$ref": "#/components/schemas/authn-hash.bcrypt"
                            }
                        ]
                    },
                    "enable": {
                        "default": true,
                        "description": "Set to <code>false</code> to disable this auth provider",
                        "label": "enable",
                        "type": "boolean"
                    },
                    "servers": {
                        "description": "\nA Node list for Cluster to connect to. The nodes should be separated with commas, such as: `Node[,Node].<br/>`\nFor each Node should be: The IPv4 or IPv6 address or the hostname to connect to.<br/>\nA host entry has the following form: `Host[:Port]`.<br/>\nThe MongoDB default port 27017 is used if `[:Port]` is not specified.\n",
                        "items": {
                            "type": "string"
                        },
                        "label": "Servers",
                        "type": "array"
                    },
                    "redis_type": {
                        "default": "cluster",
                        "description": "Cluster mode",
                        "label": "Cluster Mode",
                        "symbols": [
                            "cluster"
                        ],
                        "type": "enum"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "Size of the connection pool.",
                        "label": "Pool Size",
                        "type": "string"
                    },
                    "password": {
                        "description": "EMQX's password in the external database.",
                        "label": "Password",
                        "type": "string"
                    },
                    "database": {
                        "default": 0,
                        "description": "Redis database ID.",
                        "label": "Database ID",
                        "type": "number"
                    },
                    "auto_reconnect": {
                        "default": true,
                        "description": "Enable automatic reconnect to the database.",
                        "label": "Auto Reconnect Database",
                        "type": "boolean"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/emqx_schema.ssl_client_opts"
                    }
                },
                "type": "object"
            },
            "emqx_schema.ws_opts": {
                "properties": {
                    "mqtt_path": {
                        "default": "/mqtt",
                        "description": "WebSocket's MQTT protocol path. So the address of\n EMQX Broker's WebSocket is: <code>ws://{ip}:{port}/mqtt</code>",
                        "label": "mqtt_path",
                        "type": "string"
                    },
                    "mqtt_piggyback": {
                        "default": "multiple",
                        "description": "Whether a WebSocket message is allowed to contain multiple MQTT packets.",
                        "label": "mqtt_piggyback",
                        "symbols": [
                            "single",
                            "multiple"
                        ],
                        "type": "enum"
                    },
                    "compress": {
                        "default": false,
                        "description": "If <code>true</code>, compress WebSocket messages using <code>zlib</code>.<br/>\nThe configuration items under <code>deflate_opts</code> belong to the compression-related parameter configuration.",
                        "label": "compress",
                        "type": "boolean"
                    },
                    "idle_timeout": {
                        "default": "15s",
                        "description": "Close transport-layer connections from the clients that have not sent MQTT CONNECT\nmessage within this interval.",
                        "label": "idle_timeout",
                        "type": "duration"
                    },
                    "max_frame_size": {
                        "default": "infinity",
                        "description": "The maximum length of a single MQTT packet.",
                        "label": "max_frame_size",
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "fail_if_no_subprotocol": {
                        "default": true,
                        "description": "If <code>true</code>, the server will return an error when\n the client does not carry the <code>Sec-WebSocket-Protocol</code> field.\n <br/>Note: WeChat applet needs to disable this verification.",
                        "label": "fail_if_no_subprotocol",
                        "type": "boolean"
                    },
                    "supported_subprotocols": {
                        "default": "mqtt, mqtt-v3, mqtt-v3.1.1, mqtt-v5",
                        "description": "Comma-separated list of supported subprotocols.",
                        "label": "supported_subprotocols",
                        "type": "comma_separated_string"
                    },
                    "check_origin_enable": {
                        "default": false,
                        "description": "If <code>true</code>, <code>origin</code> HTTP header will be\n validated against the list of allowed origins configured in <code>check_origins</code>\n parameter.",
                        "label": "check_origin_enable",
                        "type": "boolean"
                    },
                    "allow_origin_absence": {
                        "default": true,
                        "description": "If <code>false</code> and <code>check_origin_enable</code> is\n <code>true</code>, the server will reject requests that don't have <code>origin</code>\n HTTP header.",
                        "label": "allow_origin_absence",
                        "type": "boolean"
                    },
                    "check_origins": {
                        "default": "",
                        "description": "List of allowed origins.<br/>See <code>check_origin_enable</code>.",
                        "items": {
                            "type": "string"
                        },
                        "label": "check_origins",
                        "type": "array"
                    },
                    "proxy_address_header": {
                        "default": "x-forwarded-for",
                        "description": "HTTP header used to pass information about the client IP address.\n Relevant when the EMQX cluster is deployed behind a load-balancer.",
                        "label": "proxy_address_header",
                        "type": "string"
                    },
                    "proxy_port_header": {
                        "default": "x-forwarded-port",
                        "description": "HTTP header used to pass information about the client port.\n Relevant when the EMQX cluster is deployed behind a load-balancer.",
                        "label": "proxy_port_header",
                        "type": "string"
                    },
                    "deflate_opts": {
                        "description": "deflate_opts Description",
                        "label": "deflate_opts",
                        "$ref": "#/components/schemas/emqx_schema.deflate_opts"
                    }
                },
                "type": "object"
            },
            "emqx_conf_schema.log_file_handler": {
                "properties": {
                    "file": {
                        "description": "Name the log file.",
                        "label": "Log File Name",
                        "type": "string"
                    },
                    "rotation": {
                        "description": "rotation Description",
                        "label": "rotation",
                        "$ref": "#/components/schemas/emqx_conf_schema.log_rotation"
                    },
                    "max_size": {
                        "default": "10MB",
                        "description": "This parameter controls log file rotation. The value `infinity` means the log file will grow indefinitely, otherwise the log file will be rotated once it reaches `max_size` in bytes.",
                        "label": "Rotation Size",
                        "oneOf": [
                            {
                                "type": "byteSize"
                            },
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "enable": {
                        "default": false,
                        "description": "Enable this log handler.",
                        "label": "Enable Log Handler",
                        "type": "boolean"
                    },
                    "level": {
                        "default": "warning",
                        "description": "Global log level. This includes the primary log level and all log handlers.",
                        "label": "Global Level",
                        "symbols": [
                            "debug",
                            "info",
                            "notice",
                            "warning",
                            "error",
                            "critical",
                            "alert",
                            "emergency",
                            "all"
                        ],
                        "type": "enum"
                    },
                    "time_offset": {
                        "default": "system",
                        "description": "The time offset to be used when formatting the timestamp.",
                        "label": "Time Offset",
                        "type": "string"
                    },
                    "chars_limit": {
                        "default": "unlimited",
                        "description": "Set the maximum length of a single log message. If this length is exceeded, the log message will be truncated.",
                        "label": "Single Log Max Length",
                        "oneOf": [
                            {
                                "minimum": 1,
                                "type": "number"
                            },
                            {
                                "symbols": [
                                    "unlimited"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "formatter": {
                        "default": "text",
                        "description": "Choose log format. <code>text</code> for free text, and <code>json</code> for structured logging.",
                        "label": "Log Format",
                        "symbols": [
                            "text",
                            "json"
                        ],
                        "type": "enum"
                    },
                    "single_line": {
                        "default": true,
                        "description": "Print logs in a single line if set to true. Otherwise, log messages may span multiple lines.",
                        "label": "Single Line Mode",
                        "type": "boolean"
                    },
                    "sync_mode_qlen": {
                        "default": 100,
                        "description": "As long as the number of buffered log events is lower than this value, all log events are handled asynchronously.",
                        "label": "Sync Mode Max Log Events",
                        "type": "number"
                    },
                    "drop_mode_qlen": {
                        "default": 3000,
                        "description": "When the number of buffered log events is larger than this value, the new log events are dropped.<br/>When drop mode is activated or deactivated, a message is printed in the logs.",
                        "label": "Drop Mode Max Log Events",
                        "type": "number"
                    },
                    "flush_qlen": {
                        "default": 8000,
                        "description": "If the number of buffered log events grows larger than this threshold, a flush (delete) operation takes place. To flush events, the handler discards the buffered log messages without logging.",
                        "label": "Flush Threshold",
                        "type": "number"
                    },
                    "overload_kill": {
                        "description": "overload_kill Description",
                        "label": "overload_kill",
                        "$ref": "#/components/schemas/emqx_conf_schema.log_overload_kill"
                    },
                    "burst_limit": {
                        "description": "burst_limit Description",
                        "label": "burst_limit",
                        "$ref": "#/components/schemas/emqx_conf_schema.log_burst_limit"
                    },
                    "supervisor_reports": {
                        "default": "error",
                        "description": "Type of supervisor reports that are logged.\n - `error`: only log errors in the Erlang processes.\n - `progress`: log process startup.",
                        "label": "Report Type",
                        "symbols": [
                            "error",
                            "progress"
                        ],
                        "type": "enum"
                    },
                    "max_depth": {
                        "default": 100,
                        "description": "Maximum depth for Erlang term log formatting and Erlang process message queue inspection.",
                        "label": "Max Depth",
                        "oneOf": [
                            {
                                "minimum": 1,
                                "type": "number"
                            },
                            {
                                "symbols": [
                                    "unlimited"
                                ],
                                "type": "enum"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "authn-jwt.hmac-based": {
                "required": [
                    "mechanism",
                    "secret",
                    "algorithm",
                    "use_jwks"
                ],
                "properties": {
                    "use_jwks": {
                        "description": "",
                        "label": "use_jwks",
                        "symbols": [
                            false
                        ],
                        "type": "enum"
                    },
                    "algorithm": {
                        "description": "Signing algorithm.",
                        "label": "algorithm",
                        "symbols": [
                            "hmac-based"
                        ],
                        "type": "enum"
                    },
                    "secret": {
                        "description": "The key to verify the JWT Token using HMAC algorithm.",
                        "label": "secret",
                        "type": "string"
                    },
                    "secret_base64_encoded": {
                        "default": false,
                        "description": "Enable/disable base64 encoding of the secret.",
                        "label": "secret_base64_encoded",
                        "type": "boolean"
                    },
                    "mechanism": {
                        "description": "Authentication mechanism.",
                        "label": "mechanism",
                        "symbols": [
                            "jwt"
                        ],
                        "type": "enum"
                    },
                    "verify_claims": {
                        "default": {},
                        "description": "The list of claims to verify.",
                        "items": {
                            "type": "string"
                        },
                        "label": "verify_claims",
                        "type": "array"
                    },
                    "enable": {
                        "default": true,
                        "description": "Set to <code>false</code> to disable this auth provider",
                        "label": "enable",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "zone.flapping_detect": {
                "properties": {
                    "enable": {
                        "description": "Enable flapping connection detection feature.",
                        "label": "Enable flapping detection",
                        "type": "boolean"
                    },
                    "max_count": {
                        "description": "The maximum number of disconnects allowed for a MQTT Client in `window_time`",
                        "label": "Max count",
                        "type": "number"
                    },
                    "window_time": {
                        "description": "The time window for flapping detection.",
                        "label": "Window time",
                        "type": "duration"
                    },
                    "ban_time": {
                        "description": "How long the flapping clientid will be banned.",
                        "label": "Ban time",
                        "type": "duration"
                    }
                },
                "type": "object"
            },
            "zone.stats": {
                "properties": {
                    "enable": {
                        "description": "Enable/disable statistic data collection.",
                        "label": "Enable/disable statistic data collection.",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "authn-mongodb.replica-set": {
                "required": [
                    "database",
                    "replica_set_name",
                    "servers",
                    "mongo_type",
                    "collection",
                    "backend",
                    "mechanism"
                ],
                "properties": {
                    "mechanism": {
                        "description": "Authentication mechanism.",
                        "label": "mechanism",
                        "symbols": [
                            "password_based"
                        ],
                        "type": "enum"
                    },
                    "backend": {
                        "description": "Backend type.",
                        "label": "backend",
                        "symbols": [
                            "mongodb"
                        ],
                        "type": "enum"
                    },
                    "collection": {
                        "description": "Collection used to store authentication data.",
                        "label": "collection",
                        "type": "string"
                    },
                    "selector": {
                        "description": "Statement that is executed during the authentication process. Commands can support following wildcards:\n - `${username}`: substituted with client's username\n - `${clientid}`: substituted with the clientid",
                        "label": "selector",
                        "type": "string"
                    },
                    "password_hash_field": {
                        "description": "Document field that contains password hash.",
                        "label": "password_hash_field",
                        "type": "string"
                    },
                    "salt_field": {
                        "description": "Document field that contains the password salt.",
                        "label": "salt_field",
                        "type": "string"
                    },
                    "is_superuser_field": {
                        "description": "Document field that defines if the user has superuser privileges.",
                        "label": "is_superuser_field",
                        "type": "string"
                    },
                    "password_hash_algorithm": {
                        "default": {
                            "name": "sha256",
                            "salt_position": "prefix"
                        },
                        "description": "Options for password hash verification.",
                        "label": "password_hash_algorithm",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/authn-hash.other_algorithms"
                            },
                            {
                                "$ref": "#/components/schemas/authn-hash.pbkdf2"
                            },
                            {
                                "$ref": "#/components/schemas/authn-hash.bcrypt"
                            }
                        ]
                    },
                    "enable": {
                        "default": true,
                        "description": "Set to <code>false</code> to disable this auth provider",
                        "label": "enable",
                        "type": "boolean"
                    },
                    "mongo_type": {
                        "default": "rs",
                        "description": "Replica set.",
                        "label": "Replica set",
                        "symbols": [
                            "rs"
                        ],
                        "type": "enum"
                    },
                    "servers": {
                        "description": "\nA Node list for Cluster to connect to. The nodes should be separated with commas, such as: `Node[,Node].<br/>`\nFor each Node should be: The IPv4 or IPv6 address or the hostname to connect to.<br/>\nA host entry has the following form: `Host[:Port]`.<br/>\nThe MongoDB default port 27017 is used if `[:Port]` is not specified.\n",
                        "items": {
                            "type": "string"
                        },
                        "label": "Servers",
                        "type": "array"
                    },
                    "w_mode": {
                        "default": "unsafe",
                        "description": "Write mode.",
                        "label": "Write Mode",
                        "symbols": [
                            "unsafe",
                            "safe"
                        ],
                        "type": "enum"
                    },
                    "r_mode": {
                        "default": "master",
                        "description": "Read mode.",
                        "label": "Read Mode",
                        "symbols": [
                            "master",
                            "slave_ok"
                        ],
                        "type": "enum"
                    },
                    "replica_set_name": {
                        "description": "Name of the replica set.",
                        "label": "Replica Set Name",
                        "type": "string"
                    },
                    "srv_record": {
                        "default": false,
                        "description": "Use DNS SRV record.",
                        "label": "Srv Record",
                        "type": "boolean"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "Size of the connection pool.",
                        "label": "Pool Size",
                        "type": "string"
                    },
                    "username": {
                        "description": "EMQX's username in the external database.",
                        "label": "Username",
                        "type": "string"
                    },
                    "password": {
                        "description": "EMQX's password in the external database.",
                        "label": "Password",
                        "type": "string"
                    },
                    "auth_source": {
                        "description": "Database name associated with the user's credentials.",
                        "label": "Auth Source",
                        "type": "string"
                    },
                    "database": {
                        "description": "Database name.",
                        "label": "Database Name",
                        "type": "string"
                    },
                    "topology": {
                        "description": "topology Description",
                        "label": "topology",
                        "$ref": "#/components/schemas/emqx_connector_mongo.topology"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/emqx_schema.ssl_client_opts"
                    }
                },
                "type": "object"
            },
            "emqx_conf_schema.log_overload_kill": {
                "properties": {
                    "enable": {
                        "default": true,
                        "description": "Enable log handler overload kill feature.",
                        "label": "Log Handler Overload Kill",
                        "type": "boolean"
                    },
                    "mem_size": {
                        "default": "30MB",
                        "description": "Maximum memory size that the handler process is allowed to use.",
                        "label": "Handler Allowed Max Memory Size",
                        "type": "byteSize"
                    },
                    "qlen": {
                        "default": 20000,
                        "description": "Maximum allowed queue length.",
                        "label": "Max Queue Length",
                        "type": "number"
                    },
                    "restart_after": {
                        "default": "5s",
                        "description": "If the handler is terminated, it restarts automatically after a delay specified in milliseconds. The value `infinity` prevents restarts.",
                        "label": "Handler Restart Delay",
                        "oneOf": [
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            },
                            {
                                "type": "duration"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "emqx_schema.rate_limit": {
                "properties": {
                    "max_conn_rate": {
                        "default": 1000,
                        "description": "Maximum connections per second.",
                        "label": "max_conn_rate",
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "conn_messages_in": {
                        "default": "infinity",
                        "description": "Message limit for the external MQTT connections.",
                        "label": "conn_messages_in",
                        "oneOf": [
                            {
                                "type": "comma_separated_string"
                            },
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "conn_bytes_in": {
                        "default": "infinity",
                        "description": "Limit the rate of receiving packets for a MQTT connection.\nThe rate is counted by bytes of packets per second.",
                        "label": "conn_bytes_in",
                        "oneOf": [
                            {
                                "type": "comma_separated_string"
                            },
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "emqx_schema.sysmon_top": {
                "properties": {
                    "num_items": {
                        "default": 10,
                        "description": "The number of top processes per monitoring group",
                        "label": "Top num items",
                        "minimum": 1,
                        "type": "number"
                    },
                    "sample_interval": {
                        "default": "2s",
                        "description": "Specifies how often process top should be collected",
                        "label": "Top sample interval",
                        "type": "duration"
                    },
                    "max_procs": {
                        "default": 1000000,
                        "description": "Stop collecting data when the number of processes\\nin the VM exceeds this value",
                        "label": "Max procs",
                        "minimum": 1,
                        "type": "number"
                    },
                    "db_hostname": {
                        "default": "",
                        "description": "Hostname of the PostgreSQL database that collects the data points",
                        "label": "DB Hostname",
                        "type": "string"
                    },
                    "db_port": {
                        "default": 5432,
                        "description": "Port of the PostgreSQL database that collects the data points",
                        "label": "DB Port",
                        "type": "number"
                    },
                    "db_username": {
                        "default": "system_monitor",
                        "description": "Username of the PostgreSQL database",
                        "label": "DB Username",
                        "type": "string"
                    },
                    "db_password": {
                        "default": "system_monitor_password",
                        "description": "EMQX user password in the PostgreSQL database",
                        "label": "DB Password",
                        "type": "string"
                    },
                    "db_name": {
                        "default": "postgres",
                        "description": "PostgreSQL database name",
                        "label": "DB Name",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "authn-redis.standalone": {
                "required": [
                    "database",
                    "redis_type",
                    "server",
                    "cmd",
                    "backend",
                    "mechanism"
                ],
                "properties": {
                    "mechanism": {
                        "description": "Authentication mechanism.",
                        "label": "mechanism",
                        "symbols": [
                            "password_based"
                        ],
                        "type": "enum"
                    },
                    "backend": {
                        "description": "Backend type.",
                        "label": "backend",
                        "symbols": [
                            "redis"
                        ],
                        "type": "enum"
                    },
                    "cmd": {
                        "description": "Redis query.",
                        "label": "cmd",
                        "type": "string"
                    },
                    "password_hash_algorithm": {
                        "default": {
                            "name": "sha256",
                            "salt_position": "prefix"
                        },
                        "description": "Options for password hash verification.",
                        "label": "password_hash_algorithm",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/authn-hash.other_algorithms"
                            },
                            {
                                "$ref": "#/components/schemas/authn-hash.pbkdf2"
                            },
                            {
                                "$ref": "#/components/schemas/authn-hash.bcrypt"
                            }
                        ]
                    },
                    "enable": {
                        "default": true,
                        "description": "Set to <code>false</code> to disable this auth provider",
                        "label": "enable",
                        "type": "boolean"
                    },
                    "server": {
                        "description": "\nThe IPv4 or IPv6 address or the hostname to connect to.<br/>\nA host entry has the following form: `Host[:Port]`.<br/>\nThe Redis default port 6379 is used if `[:Port]` is not specified.\n",
                        "label": "Server Host",
                        "type": "ip_port"
                    },
                    "redis_type": {
                        "default": "single",
                        "description": "Single mode",
                        "label": "Single Mode",
                        "symbols": [
                            "single"
                        ],
                        "type": "enum"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "Size of the connection pool.",
                        "label": "Pool Size",
                        "type": "string"
                    },
                    "password": {
                        "description": "EMQX's password in the external database.",
                        "label": "Password",
                        "type": "string"
                    },
                    "database": {
                        "default": 0,
                        "description": "Redis database ID.",
                        "label": "Database ID",
                        "type": "number"
                    },
                    "auto_reconnect": {
                        "default": true,
                        "description": "Enable automatic reconnect to the database.",
                        "label": "Auto Reconnect Database",
                        "type": "boolean"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/emqx_schema.ssl_client_opts"
                    }
                },
                "type": "object"
            },
            "authn-jwt.public-key": {
                "required": [
                    "mechanism",
                    "algorithm",
                    "use_jwks"
                ],
                "properties": {
                    "use_jwks": {
                        "description": "",
                        "label": "use_jwks",
                        "symbols": [
                            false
                        ],
                        "type": "enum"
                    },
                    "algorithm": {
                        "description": "Signing algorithm.",
                        "label": "algorithm",
                        "symbols": [
                            "public-key"
                        ],
                        "type": "enum"
                    },
                    "certificate": {
                        "description": "The certificate used for signing the token.",
                        "label": "certificate",
                        "type": "string"
                    },
                    "mechanism": {
                        "description": "Authentication mechanism.",
                        "label": "mechanism",
                        "symbols": [
                            "jwt"
                        ],
                        "type": "enum"
                    },
                    "verify_claims": {
                        "default": {},
                        "description": "The list of claims to verify.",
                        "items": {
                            "type": "string"
                        },
                        "label": "verify_claims",
                        "type": "array"
                    },
                    "enable": {
                        "default": true,
                        "description": "Set to <code>false</code> to disable this auth provider",
                        "label": "enable",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "emqx_conf_schema.cluster_static": {
                "properties": {
                    "seeds": {
                        "default": "",
                        "description": "List EMQX node names in the static cluster. See <code>node.name</code>.",
                        "items": {
                            "type": "string"
                        },
                        "label": "Cluster Static Seeds",
                        "readOnly": true,
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "authn-redis.sentinel": {
                "required": [
                    "database",
                    "redis_type",
                    "servers",
                    "cmd",
                    "backend",
                    "mechanism"
                ],
                "properties": {
                    "mechanism": {
                        "description": "Authentication mechanism.",
                        "label": "mechanism",
                        "symbols": [
                            "password_based"
                        ],
                        "type": "enum"
                    },
                    "backend": {
                        "description": "Backend type.",
                        "label": "backend",
                        "symbols": [
                            "redis"
                        ],
                        "type": "enum"
                    },
                    "cmd": {
                        "description": "Redis query.",
                        "label": "cmd",
                        "type": "string"
                    },
                    "password_hash_algorithm": {
                        "default": {
                            "name": "sha256",
                            "salt_position": "prefix"
                        },
                        "description": "Options for password hash verification.",
                        "label": "password_hash_algorithm",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/authn-hash.other_algorithms"
                            },
                            {
                                "$ref": "#/components/schemas/authn-hash.pbkdf2"
                            },
                            {
                                "$ref": "#/components/schemas/authn-hash.bcrypt"
                            }
                        ]
                    },
                    "enable": {
                        "default": true,
                        "description": "Set to <code>false</code> to disable this auth provider",
                        "label": "enable",
                        "type": "boolean"
                    },
                    "servers": {
                        "description": "\nA Node list for Cluster to connect to. The nodes should be separated with commas, such as: `Node[,Node].<br/>`\nFor each Node should be: The IPv4 or IPv6 address or the hostname to connect to.<br/>\nA host entry has the following form: `Host[:Port]`.<br/>\nThe MongoDB default port 27017 is used if `[:Port]` is not specified.\n",
                        "items": {
                            "type": "string"
                        },
                        "label": "Servers",
                        "type": "array"
                    },
                    "redis_type": {
                        "default": "sentinel",
                        "description": "Sentinel mode",
                        "label": "Sentinel Mode",
                        "symbols": [
                            "sentinel"
                        ],
                        "type": "enum"
                    },
                    "sentinel": {
                        "description": "The cluster name in Redis sentinel mode.",
                        "label": "Cluster Name",
                        "type": "string"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "Size of the connection pool.",
                        "label": "Pool Size",
                        "type": "string"
                    },
                    "password": {
                        "description": "EMQX's password in the external database.",
                        "label": "Password",
                        "type": "string"
                    },
                    "database": {
                        "default": 0,
                        "description": "Redis database ID.",
                        "label": "Database ID",
                        "type": "number"
                    },
                    "auto_reconnect": {
                        "default": true,
                        "description": "Enable automatic reconnect to the database.",
                        "label": "Auto Reconnect Database",
                        "type": "boolean"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/emqx_schema.ssl_client_opts"
                    }
                },
                "type": "object"
            },
            "emqx_conf_schema.cluster_call": {
                "properties": {
                    "retry_interval": {
                        "default": "1s",
                        "description": "Time interval to retry after a failed call.",
                        "label": "Cluster Call Retry Interval",
                        "type": "duration"
                    },
                    "max_history": {
                        "default": 100,
                        "description": "Retain the maximum number of completed transactions (for queries).",
                        "label": "Cluster Call Max History",
                        "maximum": 500,
                        "minimum": 1,
                        "type": "number"
                    },
                    "cleanup_interval": {
                        "default": "5m",
                        "description": "Time interval to clear completed but stale transactions.\nEnsure that the number of completed transactions is less than the <code>max_history</code>.",
                        "label": "Clean Up Interval",
                        "type": "duration"
                    }
                },
                "type": "object"
            },
            "zone.overload_protection": {
                "properties": {
                    "enable": {
                        "description": "React on system overload or not",
                        "label": "React on system overload or not",
                        "type": "boolean"
                    },
                    "backoff_delay": {
                        "description": "Some unimportant tasks could be delayed for execution, here set the delays in ms",
                        "label": "Delay Time",
                        "minimum": 0,
                        "type": "number"
                    },
                    "backoff_gc": {
                        "description": "Skip forceful GC if necessary",
                        "label": "Skip GC",
                        "type": "boolean"
                    },
                    "backoff_hibernation": {
                        "description": "Skip process hibernation if necessary",
                        "label": "Skip hibernation",
                        "type": "boolean"
                    },
                    "backoff_new_conn": {
                        "description": "Close new incoming connections if necessary",
                        "label": "Close new connections",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "authn-hash.other_algorithms": {
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "Simple password hashing algorithm.",
                        "label": "name",
                        "symbols": [
                            "plain",
                            "md5",
                            "sha",
                            "sha256",
                            "sha512"
                        ],
                        "type": "enum"
                    },
                    "salt_position": {
                        "default": "prefix",
                        "description": "Salt position for PLAIN, MD5, SHA, SHA256 and SHA512 algorithms.",
                        "label": "salt_position",
                        "symbols": [
                            "disable",
                            "prefix",
                            "suffix"
                        ],
                        "type": "enum"
                    }
                },
                "type": "object"
            },
            "dashboard.listeners": {
                "properties": {
                    "http": {
                        "description": "TCP listeners",
                        "label": "http",
                        "$ref": "#/components/schemas/dashboard.http"
                    },
                    "https": {
                        "description": "SSL listeners",
                        "label": "https",
                        "$ref": "#/components/schemas/dashboard.https"
                    }
                },
                "type": "object"
            },
            "authn-http.get": {
                "required": [
                    "url",
                    "backend",
                    "mechanism",
                    "method"
                ],
                "properties": {
                    "method": {
                        "default": "post",
                        "description": "HTTP method.",
                        "label": "method",
                        "symbols": [
                            "get"
                        ],
                        "type": "enum"
                    },
                    "headers": {
                        "default": {
                            "accept": "application/json",
                            "cache-control": "no-cache",
                            "connection": "keep-alive",
                            "keep-alive": "timeout=30, max=1000"
                        },
                        "description": "List of HTTP headers.",
                        "label": "headers",
                        "type": "string"
                    },
                    "mechanism": {
                        "description": "Authentication mechanism.",
                        "label": "mechanism",
                        "symbols": [
                            "password_based"
                        ],
                        "type": "enum"
                    },
                    "backend": {
                        "description": "Backend type.",
                        "label": "backend",
                        "symbols": [
                            "http"
                        ],
                        "type": "enum"
                    },
                    "url": {
                        "description": "URL of the auth server.",
                        "label": "url",
                        "type": "string"
                    },
                    "body": {
                        "description": "Body of the HTTP request.",
                        "label": "body",
                        "type": "string"
                    },
                    "request_timeout": {
                        "default": "5s",
                        "description": "HTTP request timeout",
                        "label": "request_timeout",
                        "type": "duration"
                    },
                    "enable": {
                        "default": true,
                        "description": "Set to <code>false</code> to disable this auth provider",
                        "label": "enable",
                        "type": "boolean"
                    },
                    "connect_timeout": {
                        "default": "15s",
                        "description": "The timeout when connecting to the HTTP server.",
                        "label": "Connect Timeout",
                        "type": "duration"
                    },
                    "enable_pipelining": {
                        "default": true,
                        "description": "Enable the HTTP pipeline.",
                        "label": "HTTP Pipelineing",
                        "type": "boolean"
                    },
                    "max_retries": {
                        "default": 5,
                        "description": "Max retry times if error on sending request.",
                        "label": "Max Retries",
                        "minimum": 1,
                        "type": "number"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "The pool size.",
                        "label": "Pool Size",
                        "type": "string"
                    },
                    "request": {
                        "description": "\nIf the request is provided, the caller can send HTTP requests via\n<code>emqx_resource:query(ResourceId, {send_message, BridgeId, Message})</code>\n",
                        "label": "Request",
                        "$ref": "#/components/schemas/connector-http.request"
                    },
                    "retry_interval": {
                        "default": "1s",
                        "description": "Interval between retries.",
                        "label": "Retry Interval",
                        "type": "duration"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/emqx_schema.ssl_client_opts"
                    }
                },
                "type": "object"
            },
            "limiter.client_bucket": {
                "properties": {
                    "rate": {
                        "default": "infinity",
                        "description": "Rate for this bucket.",
                        "label": "rate",
                        "type": "string"
                    },
                    "initial": {
                        "default": "0",
                        "description": "The initial number of tokens for this bucket.",
                        "label": "initial",
                        "type": "string"
                    },
                    "low_water_mark": {
                        "default": "0",
                        "description": "If the remaining tokens are lower than this value,\nthe check/consume will succeed, but it will be forced to wait for a short period of time.",
                        "label": "low_water_mark",
                        "type": "string"
                    },
                    "capacity": {
                        "default": "infinity",
                        "description": "The capacity of the token bucket.",
                        "label": "capacity",
                        "type": "string"
                    },
                    "divisible": {
                        "default": false,
                        "description": "Is it possible to split the number of requested tokens?",
                        "label": "divisible",
                        "type": "boolean"
                    },
                    "max_retry_time": {
                        "default": "10s",
                        "description": "The maximum retry time when acquire failed.",
                        "label": "max_retry_time",
                        "type": "duration"
                    },
                    "failure_strategy": {
                        "default": "force",
                        "description": "The strategy when all the retries failed.",
                        "label": "failure_strategy",
                        "symbols": [
                            "force",
                            "drop",
                            "throw"
                        ],
                        "type": "enum"
                    }
                },
                "type": "object"
            },
            "authn-postgresql.authentication": {
                "required": [
                    "database",
                    "server",
                    "query",
                    "backend",
                    "mechanism"
                ],
                "properties": {
                    "mechanism": {
                        "description": "Authentication mechanism.",
                        "label": "mechanism",
                        "symbols": [
                            "password_based"
                        ],
                        "type": "enum"
                    },
                    "backend": {
                        "description": "Backend type.",
                        "label": "backend",
                        "symbols": [
                            "postgresql"
                        ],
                        "type": "enum"
                    },
                    "password_hash_algorithm": {
                        "default": {
                            "name": "sha256",
                            "salt_position": "prefix"
                        },
                        "description": "Options for password hash verification.",
                        "label": "password_hash_algorithm",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/authn-hash.other_algorithms"
                            },
                            {
                                "$ref": "#/components/schemas/authn-hash.pbkdf2"
                            },
                            {
                                "$ref": "#/components/schemas/authn-hash.bcrypt"
                            }
                        ]
                    },
                    "query": {
                        "description": "`SQL` query for looking up authentication data.",
                        "label": "query",
                        "type": "string"
                    },
                    "enable": {
                        "default": true,
                        "description": "Set to <code>false</code> to disable this auth provider",
                        "label": "enable",
                        "type": "boolean"
                    },
                    "server": {
                        "description": "\nThe IPv4 or IPv6 address or the hostname to connect to.<br/>\nA host entry has the following form: `Host[:Port]`.<br/>\nThe PostgreSQL default port 5432 is used if `[:Port]` is not specified.\n",
                        "label": "Server Host",
                        "type": "ip_port"
                    },
                    "database": {
                        "description": "Database name.",
                        "label": "Database Name",
                        "type": "string"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "Size of the connection pool.",
                        "label": "Pool Size",
                        "type": "string"
                    },
                    "username": {
                        "description": "EMQX's username in the external database.",
                        "label": "Username",
                        "type": "string"
                    },
                    "password": {
                        "description": "EMQX's password in the external database.",
                        "label": "Password",
                        "type": "string"
                    },
                    "auto_reconnect": {
                        "default": true,
                        "description": "Enable automatic reconnect to the database.",
                        "label": "Auto Reconnect Database",
                        "type": "boolean"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/emqx_schema.ssl_client_opts"
                    }
                },
                "type": "object"
            },
            "emqx_schema.alarm": {
                "properties": {
                    "actions": {
                        "default": [
                            "log",
                            "publish"
                        ],
                        "description": "The actions triggered when the alarm is activated.<br/>\\nCurrently, the following actions are supported: <code>log</code> and <code>publish</code>.\\n<code>log</code> is to write the alarm to log (console or file).\\n<code>publish</code> is to publish the alarm as an MQTT message to the system topics:\\n<code>$SYS/brokers/emqx@xx.xx.xx.x/alarms/activate</code> and\\n<code>$SYS/brokers/emqx@xx.xx.xx.x/alarms/deactivate</code>",
                        "example": [
                            "log",
                            "publish"
                        ],
                        "items": {
                            "type": "string"
                        },
                        "label": "Alarm Actions",
                        "type": "array"
                    },
                    "size_limit": {
                        "default": 1000,
                        "description": "The maximum total number of deactivated alarms to keep as history.<br>\\nWhen this limit is exceeded, the oldest deactivated alarms are deleted to cap the total number.\\n",
                        "example": 1000,
                        "label": "Alarm size limit",
                        "maximum": 3000,
                        "minimum": 1,
                        "type": "number"
                    },
                    "validity_period": {
                        "default": "24h",
                        "description": "Retention time of deactivated alarms. Alarms are not deleted immediately\\nwhen deactivated, but after the retention time.\\n",
                        "example": "24h",
                        "label": "Alarm validity period",
                        "type": "duration"
                    }
                },
                "type": "object"
            },
            "authn-jwt.jwks": {
                "required": [
                    "mechanism",
                    "endpoint",
                    "use_jwks"
                ],
                "properties": {
                    "use_jwks": {
                        "description": "",
                        "label": "use_jwks",
                        "symbols": [
                            true
                        ],
                        "type": "enum"
                    },
                    "endpoint": {
                        "description": "JWKs endpoint.",
                        "label": "endpoint",
                        "type": "string"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "JWKS connection count",
                        "label": "pool_size",
                        "type": "number"
                    },
                    "refresh_interval": {
                        "default": 300,
                        "description": "JWKs refresh interval",
                        "label": "refresh_interval",
                        "type": "number"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "Enable/disable SSL.",
                        "label": "ssl",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/authn-jwt.ssl_disable"
                            },
                            {
                                "$ref": "#/components/schemas/authn-jwt.ssl_enable"
                            }
                        ]
                    },
                    "mechanism": {
                        "description": "Authentication mechanism.",
                        "label": "mechanism",
                        "symbols": [
                            "jwt"
                        ],
                        "type": "enum"
                    },
                    "verify_claims": {
                        "default": {},
                        "description": "The list of claims to verify.",
                        "items": {
                            "type": "string"
                        },
                        "label": "verify_claims",
                        "type": "array"
                    },
                    "enable": {
                        "default": true,
                        "description": "Set to <code>false</code> to disable this auth provider",
                        "label": "enable",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "emqx_schema.sysmon": {
                "properties": {
                    "vm": {
                        "description": "vm Description",
                        "label": "vm",
                        "$ref": "#/components/schemas/emqx_schema.sysmon_vm"
                    },
                    "os": {
                        "description": "os Description",
                        "label": "os",
                        "$ref": "#/components/schemas/emqx_schema.sysmon_os"
                    },
                    "top": {
                        "description": "top Description",
                        "label": "top",
                        "$ref": "#/components/schemas/emqx_schema.sysmon_top"
                    }
                },
                "type": "object"
            },
            "authn-mongodb.standalone": {
                "required": [
                    "database",
                    "server",
                    "mongo_type",
                    "collection",
                    "backend",
                    "mechanism"
                ],
                "properties": {
                    "mechanism": {
                        "description": "Authentication mechanism.",
                        "label": "mechanism",
                        "symbols": [
                            "password_based"
                        ],
                        "type": "enum"
                    },
                    "backend": {
                        "description": "Backend type.",
                        "label": "backend",
                        "symbols": [
                            "mongodb"
                        ],
                        "type": "enum"
                    },
                    "collection": {
                        "description": "Collection used to store authentication data.",
                        "label": "collection",
                        "type": "string"
                    },
                    "selector": {
                        "description": "Statement that is executed during the authentication process. Commands can support following wildcards:\n - `${username}`: substituted with client's username\n - `${clientid}`: substituted with the clientid",
                        "label": "selector",
                        "type": "string"
                    },
                    "password_hash_field": {
                        "description": "Document field that contains password hash.",
                        "label": "password_hash_field",
                        "type": "string"
                    },
                    "salt_field": {
                        "description": "Document field that contains the password salt.",
                        "label": "salt_field",
                        "type": "string"
                    },
                    "is_superuser_field": {
                        "description": "Document field that defines if the user has superuser privileges.",
                        "label": "is_superuser_field",
                        "type": "string"
                    },
                    "password_hash_algorithm": {
                        "default": {
                            "name": "sha256",
                            "salt_position": "prefix"
                        },
                        "description": "Options for password hash verification.",
                        "label": "password_hash_algorithm",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/authn-hash.other_algorithms"
                            },
                            {
                                "$ref": "#/components/schemas/authn-hash.pbkdf2"
                            },
                            {
                                "$ref": "#/components/schemas/authn-hash.bcrypt"
                            }
                        ]
                    },
                    "enable": {
                        "default": true,
                        "description": "Set to <code>false</code> to disable this auth provider",
                        "label": "enable",
                        "type": "boolean"
                    },
                    "mongo_type": {
                        "default": "single",
                        "description": "Standalone instance.",
                        "label": "Standalone instance",
                        "symbols": [
                            "single"
                        ],
                        "type": "enum"
                    },
                    "server": {
                        "description": "\nThe IPv4 or IPv6 address or the hostname to connect to.<br/>\nA host entry has the following form: `Host[:Port]`.<br/>\nThe MongoDB default port 27017 is used if `[:Port]` is not specified.\n",
                        "label": "Server Host",
                        "type": "ip_port"
                    },
                    "w_mode": {
                        "default": "unsafe",
                        "description": "Write mode.",
                        "label": "Write Mode",
                        "symbols": [
                            "unsafe",
                            "safe"
                        ],
                        "type": "enum"
                    },
                    "srv_record": {
                        "default": false,
                        "description": "Use DNS SRV record.",
                        "label": "Srv Record",
                        "type": "boolean"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "Size of the connection pool.",
                        "label": "Pool Size",
                        "type": "string"
                    },
                    "username": {
                        "description": "EMQX's username in the external database.",
                        "label": "Username",
                        "type": "string"
                    },
                    "password": {
                        "description": "EMQX's password in the external database.",
                        "label": "Password",
                        "type": "string"
                    },
                    "auth_source": {
                        "description": "Database name associated with the user's credentials.",
                        "label": "Auth Source",
                        "type": "string"
                    },
                    "database": {
                        "description": "Database name.",
                        "label": "Database Name",
                        "type": "string"
                    },
                    "topology": {
                        "description": "topology Description",
                        "label": "topology",
                        "$ref": "#/components/schemas/emqx_connector_mongo.topology"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/emqx_schema.ssl_client_opts"
                    }
                },
                "type": "object"
            },
            "authn-hash.bcrypt": {
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "BCRYPT password hashing.",
                        "label": "name",
                        "symbols": [
                            "bcrypt"
                        ],
                        "type": "enum"
                    }
                },
                "type": "object"
            },
            "authn-jwt.ssl_disable": {
                "properties": {
                    "enable": {
                        "description": "",
                        "label": "enable",
                        "symbols": [
                            false
                        ],
                        "type": "enum"
                    }
                },
                "type": "object"
            },
            "emqx_schema.listener_wss_opts": {
                "properties": {
                    "enable": {
                        "default": false,
                        "description": "Enable TLS.",
                        "label": "enable",
                        "type": "boolean"
                    },
                    "cacertfile": {
                        "default": "etc/certs/cacert.pem",
                        "description": "Trusted PEM format CA certificates bundle file.<br>\nThe certificates in this file are used to verify the TLS peer's certificates.\nAppend new certificates to the file if new CAs are to be trusted.\nThere is no need to restart EMQX to have the updated file loaded, because\nthe system regularly checks if file has been updated (and reload).<br>\nNOTE: invalidating (deleting) a certificate from the file will not affect\nalready established connections.\n",
                        "label": "cacertfile",
                        "type": "string"
                    },
                    "certfile": {
                        "default": "etc/certs/cert.pem",
                        "description": "PEM format certificates chain file.<br>\nThe certificates in this file should be in reversed order of the certificate\nissue chain. That is, the host's certificate should be placed in the beginning\nof the file, followed by the immediate issuer certificate and so on.\nAlthough the root CA certificate is optional, it should be placed at the end of\nthe file if it is to be added.",
                        "label": "certfile",
                        "type": "string"
                    },
                    "keyfile": {
                        "default": "etc/certs/key.pem",
                        "description": "PEM format private key file.",
                        "label": "keyfile",
                        "type": "string"
                    },
                    "verify": {
                        "default": "verify_none",
                        "description": "Enable or disable peer verification.",
                        "label": "verify",
                        "symbols": [
                            "verify_peer",
                            "verify_none"
                        ],
                        "type": "enum"
                    },
                    "reuse_sessions": {
                        "default": true,
                        "description": "Enable TLS session reuse.",
                        "label": "reuse_sessions",
                        "type": "boolean"
                    },
                    "depth": {
                        "default": 10,
                        "description": "Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path. So, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly; if 1 the path can be PEER, CA, ROOT-CA; if 2 the path can be PEER, CA, CA, ROOT-CA, and so on. The default value is 10.",
                        "label": "depth",
                        "type": "number"
                    },
                    "password": {
                        "description": "String containing the user's password. Only used if the private\nkey file is password-protected.",
                        "label": "password",
                        "type": "string"
                    },
                    "versions": {
                        "default": [
                            "tlsv1.3",
                            "tlsv1.2",
                            "tlsv1.1",
                            "tlsv1"
                        ],
                        "description": "All TLS/DTLS versions to be supported.<br>\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br>\nIn case PSK cipher suites are intended, make sure to configured\n<code>['tlsv1.2', 'tlsv1.1']</code> here.",
                        "items": {
                            "type": "string"
                        },
                        "label": "versions",
                        "type": "array"
                    },
                    "ciphers": {
                        "default": [
                            "TLS_AES_256_GCM_SHA384",
                            "TLS_AES_128_GCM_SHA256",
                            "TLS_CHACHA20_POLY1305_SHA256",
                            "TLS_AES_128_CCM_SHA256",
                            "TLS_AES_128_CCM_8_SHA256",
                            "ECDHE-ECDSA-AES256-GCM-SHA384",
                            "ECDHE-RSA-AES256-GCM-SHA384",
                            "ECDHE-ECDSA-AES256-SHA384",
                            "ECDHE-RSA-AES256-SHA384",
                            "ECDH-ECDSA-AES256-GCM-SHA384",
                            "ECDH-RSA-AES256-GCM-SHA384",
                            "ECDH-ECDSA-AES256-SHA384",
                            "ECDH-RSA-AES256-SHA384",
                            "DHE-DSS-AES256-GCM-SHA384",
                            "DHE-DSS-AES256-SHA256",
                            "AES256-GCM-SHA384",
                            "AES256-SHA256",
                            "ECDHE-ECDSA-AES128-GCM-SHA256",
                            "ECDHE-RSA-AES128-GCM-SHA256",
                            "ECDHE-ECDSA-AES128-SHA256",
                            "ECDHE-RSA-AES128-SHA256",
                            "ECDH-ECDSA-AES128-GCM-SHA256",
                            "ECDH-RSA-AES128-GCM-SHA256",
                            "ECDH-ECDSA-AES128-SHA256",
                            "ECDH-RSA-AES128-SHA256",
                            "DHE-DSS-AES128-GCM-SHA256",
                            "DHE-DSS-AES128-SHA256",
                            "AES128-GCM-SHA256",
                            "AES128-SHA256",
                            "ECDHE-ECDSA-AES256-SHA",
                            "ECDHE-RSA-AES256-SHA",
                            "DHE-DSS-AES256-SHA",
                            "ECDH-ECDSA-AES256-SHA",
                            "ECDH-RSA-AES256-SHA",
                            "ECDHE-ECDSA-AES128-SHA",
                            "ECDHE-RSA-AES128-SHA",
                            "DHE-DSS-AES128-SHA",
                            "ECDH-ECDSA-AES128-SHA",
                            "ECDH-RSA-AES128-SHA",
                            "RSA-PSK-AES256-GCM-SHA384",
                            "RSA-PSK-AES256-CBC-SHA384",
                            "RSA-PSK-AES128-GCM-SHA256",
                            "RSA-PSK-AES128-CBC-SHA256",
                            "RSA-PSK-AES256-CBC-SHA",
                            "RSA-PSK-AES128-CBC-SHA"
                        ],
                        "description": "This config holds TLS cipher suite names separated by comma,\nor as an array of strings. e.g.\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.\n<br>\nCiphers (and their ordering) define the way in which the\nclient and server encrypts information over the network connection.\nSelecting a good cipher suite is critical for the\napplication's data security, confidentiality and performance.\n\nThe names should be in OpenSSL string format (not RFC format).\nAll default values and examples provided by EMQX config\ndocumentation are all in OpenSSL format.<br>\n\nNOTE: Certain cipher suites are only compatible with\nspecific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')\nincompatible cipher suites will be silently dropped.\nFor instance, if only 'tlsv1.3' is given in the <code>versions</code>,\nconfiguring cipher suites for other versions will have no effect.\n<br>\n\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br>\nIf PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br>\nPSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code><br>\n",
                        "items": {
                            "type": "string"
                        },
                        "label": "ciphers",
                        "type": "array"
                    },
                    "user_lookup_fun": {
                        "default": "emqx_tls_psk:lookup",
                        "description": "EMQX-internal callback that is used to lookup pre-shared key (PSK) identity.",
                        "label": "user_lookup_fun",
                        "type": "string"
                    },
                    "secure_renegotiate": {
                        "default": true,
                        "description": "SSL parameter renegotiation is a feature that allows a client and a server\nto renegotiate the parameters of the SSL connection on the fly.\nRFC 5746 defines a more secure way of doing this. By enabling secure renegotiation,\nyou drop support for the insecure renegotiation, prone to MitM attacks.",
                        "label": "secure_renegotiate",
                        "type": "boolean"
                    },
                    "dhfile": {
                        "description": "Path to a file containing PEM-encoded Diffie-Hellman parameters\nto be used by the server if a cipher suite using Diffie-Hellman\nkey exchange is negotiated. If not specified, default parameters\nare used.<br>\nNOTE: The <code>dhfile</code> option is not supported by TLS 1.3.",
                        "label": "dhfile",
                        "type": "string"
                    },
                    "fail_if_no_peer_cert": {
                        "default": false,
                        "description": "Used together with {verify, verify_peer} by an TLS/DTLS server.\nIf set to true, the server fails if the client does not have a\ncertificate to send, that is, sends an empty certificate.\nIf set to false, it fails only if the client sends an invalid\ncertificate (an empty certificate is considered valid).",
                        "label": "fail_if_no_peer_cert",
                        "type": "boolean"
                    },
                    "honor_cipher_order": {
                        "default": true,
                        "description": "An important security setting, it forces the cipher to be set based\n on the server-specified order instead of the client-specified order,\n hence enforcing the (usually more properly configured) security\n ordering of the server administrator.",
                        "label": "honor_cipher_order",
                        "type": "boolean"
                    },
                    "client_renegotiation": {
                        "default": true,
                        "description": "In protocols that support client-initiated renegotiation,\nthe cost of resources of such an operation is higher for the server than the client.\nThis can act as a vector for denial of service attacks.\nThe SSL application already takes measures to counter-act such attempts,\nbut client-initiated renegotiation can be strictly disabled by setting this option to false.\nThe default value is true. Note that disabling renegotiation can result in\nlong-lived connections becoming unusable due to limits on\nthe number of messages the underlying cipher suite can encipher.",
                        "label": "client_renegotiation",
                        "type": "boolean"
                    },
                    "handshake_timeout": {
                        "default": "15s",
                        "description": "Maximum time duration allowed for the handshake to complete",
                        "label": "handshake_timeout",
                        "type": "duration"
                    }
                },
                "type": "object"
            },
            "emqx_schema.mqtt_tcp_listener": {
                "required": [
                    "bind"
                ],
                "properties": {
                    "tcp": {
                        "description": "tcp Description",
                        "label": "tcp",
                        "$ref": "#/components/schemas/emqx_schema.tcp_opts"
                    },
                    "bind": {
                        "description": "IP address and port for the listening socket.",
                        "label": "bind",
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "ip_port"
                            }
                        ]
                    },
                    "acceptors": {
                        "default": 16,
                        "description": "The size of the listener's receiving pool.",
                        "label": "acceptors",
                        "type": "number"
                    },
                    "max_connections": {
                        "default": "infinity",
                        "description": "The maximum number of concurrent connections allowed by the listener.",
                        "label": "max_connections",
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "mountpoint": {
                        "default": "",
                        "description": "When publishing or subscribing, prefix all topics with a mountpoint string.\n The prefixed string will be removed from the topic name when the message\n is delivered to the subscriber. The mountpoint is a way that users can use\n to implement isolation of message routing between different listeners.\n For example if a client A subscribes to `t` with `listeners.tcp.<name>.mountpoint`\n set to `some_tenant`, then the client actually subscribes to the topic\n `some_tenant/t`. Similarly, if another client B (connected to the same listener\n as the client A) sends a message to topic `t`, the message is routed\n to all the clients subscribed `some_tenant/t`, so client A will receive the\n message, with topic name `t`.<br/>\n Set to `\"\"` to disable the feature.<br/>\n\n Variables in mountpoint string:\n - <code>${clientid}</code>: clientid\n - <code>${username}</code>: username",
                        "label": "mountpoint",
                        "type": "string"
                    },
                    "zone": {
                        "default": "default",
                        "description": "The configuration zone to which the listener belongs.",
                        "label": "zone",
                        "type": "string"
                    },
                    "limiter": {
                        "default": {},
                        "description": "Type of the rate limit.",
                        "label": "limiter",
                        "properties": {
                            "$ratelimit's type": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "access_rules": {
                        "default": [
                            "allow all"
                        ],
                        "description": "The access control rules for this listener.<br/>See: https://github.com/emqtt/esockd#allowdeny",
                        "items": {
                            "type": "string"
                        },
                        "label": "access_rules",
                        "type": "array"
                    },
                    "proxy_protocol": {
                        "default": false,
                        "description": "Enable the Proxy Protocol V1/2 if the EMQX cluster is deployed\n behind HAProxy or Nginx.<br/>See: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
                        "label": "proxy_protocol",
                        "type": "boolean"
                    },
                    "proxy_protocol_timeout": {
                        "default": "3s",
                        "description": "Timeout for proxy protocol. EMQX will close the TCP connection if proxy protocol packet is not received within the timeout.",
                        "label": "proxy_protocol_timeout",
                        "type": "duration"
                    },
                    "authentication": {
                        "description": "Per-listener authentication override\nAuthentication can be one single authenticator instance or a chain of authenticators as an array.\nWhen authenticating a login (username, client ID, etc.) the authenticators are checked in the configured order.<br>\n",
                        "items": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/authn-scram-builtin_db.authentication"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-jwt.jwks"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-jwt.public-key"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-jwt.hmac-based"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-http.post"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-http.get"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-redis.sentinel"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-redis.cluster"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-redis.standalone"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-mongodb.sharded-cluster"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-mongodb.replica-set"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-mongodb.standalone"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-postgresql.authentication"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-mysql.authentication"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-builtin_db.authentication"
                                }
                            ]
                        },
                        "label": "authentication",
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "emqx_schema.broker": {
                "properties": {
                    "enable_session_registry": {
                        "default": true,
                        "description": "Enable session registry",
                        "label": "enable_session_registry",
                        "type": "boolean"
                    },
                    "session_locking_strategy": {
                        "default": "quorum",
                        "description": "Session locking strategy in a cluster.\n  - `local`: only lock the session on the current node\n  - `one`: select only one remote node to lock the session\n  - `quorum`: select some nodes to lock the session\n  - `all`: lock the session on all the nodes in the cluster\n",
                        "label": "session_locking_strategy",
                        "symbols": [
                            "local",
                            "leader",
                            "quorum",
                            "all"
                        ],
                        "type": "enum"
                    },
                    "shared_subscription_strategy": {
                        "default": "round_robin",
                        "description": "Dispatch strategy for shared subscription.\n  - `random`: dispatch the message to a random selected subscriber\n  - `round_robin`: select the subscribers in a round-robin manner\n  - `sticky`: always use the last selected subscriber to dispatch, until the subscriber disconnects.\n  - `hash`: select the subscribers by the hash of `clientIds`\n",
                        "label": "shared_subscription_strategy",
                        "symbols": [
                            "random",
                            "round_robin",
                            "sticky",
                            "hash_topic",
                            "hash_clientid"
                        ],
                        "type": "enum"
                    },
                    "shared_dispatch_ack_enabled": {
                        "default": false,
                        "description": "Enable/disable shared dispatch acknowledgement for QoS1 and QoS2 messages.\nThis should allow messages to be dispatched to a different subscriber in the group in case the picked (based on `shared_subscription_strategy`) subscriber is offline.\n",
                        "label": "shared_dispatch_ack_enabled",
                        "type": "boolean"
                    },
                    "route_batch_clean": {
                        "default": true,
                        "description": "Enable batch clean for deleted routes.",
                        "label": "route_batch_clean",
                        "type": "boolean"
                    },
                    "perf": {
                        "description": "perf Description",
                        "label": "perf",
                        "$ref": "#/components/schemas/emqx_schema.broker_perf"
                    }
                },
                "type": "object"
            },
            "emqx_conf_schema.cluster_mcast": {
                "properties": {
                    "addr": {
                        "default": "239.192.0.1",
                        "description": "Multicast IPv4 address.",
                        "label": "Cluster Multicast Address",
                        "readOnly": true,
                        "type": "string"
                    },
                    "ports": {
                        "default": [
                            4369,
                            4370
                        ],
                        "description": "List of UDP ports used for service discovery.<br/>\nNote: probe messages are broadcast to all the specified ports.\n          ",
                        "items": {
                            "type": "number"
                        },
                        "label": "Cluster Multicast Ports",
                        "readOnly": true,
                        "type": "array"
                    },
                    "iface": {
                        "default": "0.0.0.0",
                        "description": "Local IP address the node discovery service needs to bind to.",
                        "label": "Cluster Multicast Interface",
                        "readOnly": true,
                        "type": "string"
                    },
                    "ttl": {
                        "default": 255,
                        "description": "Time-to-live (TTL) for the outgoing UDP datagrams.",
                        "label": "Cluster Multicast TTL",
                        "maximum": 255,
                        "minimum": 0,
                        "readOnly": true,
                        "type": "number"
                    },
                    "loop": {
                        "default": true,
                        "description": "If <code>true</code>, loop UDP datagrams back to the local socket.",
                        "label": "Cluster Multicast Loop",
                        "readOnly": true,
                        "type": "boolean"
                    },
                    "sndbuf": {
                        "default": "16KB",
                        "description": "Size of the kernel-level buffer for outgoing datagrams.",
                        "label": "Cluster Muticast Sendbuf",
                        "readOnly": true,
                        "type": "byteSize"
                    },
                    "recbuf": {
                        "default": "16KB",
                        "description": "Size of the kernel-level buffer for incoming datagrams.",
                        "label": "Cluster Muticast Sendbuf",
                        "readOnly": true,
                        "type": "byteSize"
                    },
                    "buffer": {
                        "default": "32KB",
                        "description": "Size of the user-level buffer.",
                        "label": "Cluster Muticast Buffer",
                        "readOnly": true,
                        "type": "byteSize"
                    }
                },
                "type": "object"
            },
            "zone.mqtt": {
                "properties": {
                    "idle_timeout": {
                        "description": "Close TCP connections from the clients that have not sent MQTT CONNECT message within this interval.",
                        "label": "idle_timeout",
                        "oneOf": [
                            {
                                "type": "duration"
                            },
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "max_packet_size": {
                        "description": "Maximum MQTT packet size allowed.",
                        "label": "max_packet_size",
                        "type": "byteSize"
                    },
                    "max_clientid_len": {
                        "description": "Maximum allowed length of MQTT clientId.",
                        "label": "max_clientid_len",
                        "maximum": 65535,
                        "minimum": 23,
                        "type": "number"
                    },
                    "max_topic_levels": {
                        "description": "Maximum topic levels allowed.",
                        "label": "max_topic_levels",
                        "maximum": 65535,
                        "minimum": 1,
                        "type": "number"
                    },
                    "max_qos_allowed": {
                        "description": "Maximum QoS allowed.",
                        "label": "max_qos_allowed",
                        "symbols": [
                            0,
                            1,
                            2
                        ],
                        "type": "enum"
                    },
                    "max_topic_alias": {
                        "description": "Maximum Topic Alias, 0 means no topic alias supported.",
                        "label": "max_topic_alias",
                        "maximum": 65535,
                        "minimum": 0,
                        "type": "number"
                    },
                    "retain_available": {
                        "description": "Support MQTT retained messages.",
                        "label": "retain_available",
                        "type": "boolean"
                    },
                    "wildcard_subscription": {
                        "description": "Support MQTT Wildcard Subscriptions.",
                        "label": "wildcard_subscription",
                        "type": "boolean"
                    },
                    "shared_subscription": {
                        "description": "Support MQTT Shared Subscriptions.",
                        "label": "shared_subscription",
                        "type": "boolean"
                    },
                    "ignore_loop_deliver": {
                        "description": "Ignore loop delivery of messages for MQTT v3.1.1/v3.1.0.",
                        "label": "ignore_loop_deliver",
                        "type": "boolean"
                    },
                    "strict_mode": {
                        "description": "Parse MQTT messages in strict mode.\nWhen set to true, invalid utf8 strings in for example client ID, topic name, etc. will cause the client to be disconnected",
                        "label": "strict_mode",
                        "type": "boolean"
                    },
                    "response_information": {
                        "description": "Specify the response information returned to the client. This feature is disabled if is set to \"\".",
                        "label": "response_information",
                        "type": "string"
                    },
                    "server_keepalive": {
                        "description": "'Server Keep Alive' of MQTT 5.0.\nIf the server returns a 'Server Keep Alive' in the CONNACK packet, the client MUST use that value instead of the value it sent as the 'Keep Alive'.",
                        "label": "server_keepalive",
                        "oneOf": [
                            {
                                "symbols": [
                                    "disabled"
                                ],
                                "type": "enum"
                            },
                            {
                                "type": "number"
                            }
                        ]
                    },
                    "keepalive_backoff": {
                        "description": "The backoff for MQTT keepalive timeout. The broker will close the connection after idling for 'Keepalive * backoff * 2'.",
                        "label": "keepalive_backoff",
                        "type": "number"
                    },
                    "max_subscriptions": {
                        "description": "Maximum number of subscriptions allowed.",
                        "label": "max_subscriptions",
                        "oneOf": [
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            },
                            {
                                "minimum": 1,
                                "type": "number"
                            }
                        ]
                    },
                    "upgrade_qos": {
                        "description": "Force upgrade of QoS level according to subscription.",
                        "label": "upgrade_qos",
                        "type": "boolean"
                    },
                    "max_inflight": {
                        "description": "Maximum size of the Inflight Window storing QoS1/2 messages delivered but un-acked.",
                        "label": "max_inflight",
                        "maximum": 65535,
                        "minimum": 1,
                        "type": "number"
                    },
                    "retry_interval": {
                        "description": "Retry interval for QoS1/2 message delivering.",
                        "label": "retry_interval",
                        "type": "duration"
                    },
                    "max_awaiting_rel": {
                        "description": "Maximum QoS2 packets (Client -> Broker) awaiting PUBREL.",
                        "label": "max_awaiting_rel",
                        "oneOf": [
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            },
                            {
                                "type": "number"
                            }
                        ]
                    },
                    "await_rel_timeout": {
                        "description": "The QoS2 messages (Client -> Broker) will be dropped if awaiting PUBREL timeout.",
                        "label": "await_rel_timeout",
                        "type": "duration"
                    },
                    "session_expiry_interval": {
                        "description": "Default session expiry interval for MQTT V3.1.1 connections.",
                        "label": "session_expiry_interval",
                        "type": "duration"
                    },
                    "max_mqueue_len": {
                        "description": "Maximum queue length. Enqueued messages when persistent client disconnected, or inflight window is full.",
                        "label": "max_mqueue_len",
                        "oneOf": [
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            },
                            {
                                "minimum": 1,
                                "type": "number"
                            }
                        ]
                    },
                    "mqueue_priorities": {
                        "description": "Topic priorities. Priority number [1-255]\nThere's no priority table by default, hence all messages are treated equal.\n\n**NOTE**: Comma and equal signs are not allowed for priority topic names.\n**NOTE**: Messages for topics not in the priority table are treated as either highest or lowest priority depending on the configured value for <code>mqtt.mqueue_default_priority</code>.\n\n**Examples**:\nTo configure <code>\"topic/1\" > \"topic/2\"</code>:\n<code>mqueue_priorities: {\"topic/1\": 10, \"topic/2\": 8}</code>\n",
                        "label": "mqueue_priorities",
                        "oneOf": [
                            {
                                "symbols": [
                                    "disabled"
                                ],
                                "type": "enum"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "mqueue_default_priority": {
                        "description": "Default to the highest priority for topics not matching priority table.",
                        "label": "mqueue_default_priority",
                        "symbols": [
                            "highest",
                            "lowest"
                        ],
                        "type": "enum"
                    },
                    "mqueue_store_qos0": {
                        "description": "Support enqueue QoS0 messages.",
                        "label": "mqueue_store_qos0",
                        "type": "boolean"
                    },
                    "use_username_as_clientid": {
                        "description": "Replace client ID with the username.",
                        "label": "use_username_as_clientid",
                        "type": "boolean"
                    },
                    "peer_cert_as_username": {
                        "description": "Use the CN, DN or CRT field from the client certificate as a username.\nOnly works for the TLS connection.",
                        "label": "peer_cert_as_username",
                        "symbols": [
                            "disabled",
                            "cn",
                            "dn",
                            "crt",
                            "pem",
                            "md5"
                        ],
                        "type": "enum"
                    },
                    "peer_cert_as_clientid": {
                        "description": "Use the CN, DN or CRT field from the client certificate as a clientid.\nOnly works for the TLS connection.",
                        "label": "peer_cert_as_clientid",
                        "symbols": [
                            "disabled",
                            "cn",
                            "dn",
                            "crt",
                            "pem",
                            "md5"
                        ],
                        "type": "enum"
                    }
                },
                "type": "object"
            },
            "authn-scram-builtin_db.authentication": {
                "required": [
                    "backend",
                    "mechanism"
                ],
                "properties": {
                    "mechanism": {
                        "description": "Authentication mechanism.",
                        "label": "mechanism",
                        "symbols": [
                            "scram"
                        ],
                        "type": "enum"
                    },
                    "backend": {
                        "description": "Backend type.",
                        "label": "backend",
                        "symbols": [
                            "built_in_database"
                        ],
                        "type": "enum"
                    },
                    "algorithm": {
                        "default": "sha256",
                        "description": "Hashing algorithm.",
                        "label": "algorithm",
                        "symbols": [
                            "sha256",
                            "sha512"
                        ],
                        "type": "enum"
                    },
                    "iteration_count": {
                        "default": 4096,
                        "description": "Iteration count.",
                        "label": "iteration_count",
                        "minimum": 1,
                        "type": "number"
                    },
                    "enable": {
                        "default": true,
                        "description": "Set to <code>false</code> to disable this auth provider",
                        "label": "enable",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "zone.conn_congestion": {
                "properties": {
                    "enable_alarm": {
                        "description": "Enable or disable connection congestion alarm.",
                        "label": "Enable/disable congestion alarm",
                        "type": "boolean"
                    },
                    "min_alarm_sustain_duration": {
                        "description": "Minimal time before clearing the alarm.\\n\\nThe alarm is cleared only when there's no pending data in\\nthe queue, and at least `min_alarm_sustain_duration`\\nmilliseconds passed since the last time we considered the connection \"congested\".\\n\\nThis is to avoid clearing and raising the alarm again too often.",
                        "label": "Sustain duration",
                        "type": "duration"
                    }
                },
                "type": "object"
            },
            "limiter.limiter": {
                "properties": {
                    "bytes_in": {
                        "description": "The bytes_in limiter.<br>It is used to limit the inbound bytes rate for this EMQX node.If the this limiter limit is reached,the restricted client will be slow down even be hung for a while.",
                        "label": "bytes_in",
                        "$ref": "#/components/schemas/limiter.limiter_opts"
                    },
                    "message_in": {
                        "description": "The message_in limiter.<br>This is used to limit the inbound message numbers for this EMQX nodeIf the this limiter limit is reached,the restricted client will be slow down even be hung for a while.",
                        "label": "message_in",
                        "$ref": "#/components/schemas/limiter.limiter_opts"
                    },
                    "connection": {
                        "description": "The connection limiter.<br>This is used to limit the connection rate for this EMQX nodeIf the this limiter limit is reached,New connections will be refused",
                        "label": "connection",
                        "$ref": "#/components/schemas/limiter.limiter_opts"
                    },
                    "message_routing": {
                        "description": "The message_routing limiter.<br>This is used to limite the deliver rate for this EMQX nodeIf the this limiter limit is reached,New publish will be refused",
                        "label": "message_routing",
                        "$ref": "#/components/schemas/limiter.limiter_opts"
                    },
                    "batch": {
                        "description": "The batch limiter.<br>This is used for EMQX internal batch operatione.g. limite the retainer's deliver rate",
                        "label": "batch",
                        "$ref": "#/components/schemas/limiter.limiter_opts"
                    }
                },
                "type": "object"
            },
            "dashboard.https": {
                "required": [
                    "bind"
                ],
                "properties": {
                    "bind": {
                        "default": 18083,
                        "description": "Port without IP(18083) or port with specified IP(127.0.0.1:18083).",
                        "label": "Bind",
                        "oneOf": [
                            {
                                "type": "ip_port"
                            },
                            {
                                "minimum": 1,
                                "type": "number"
                            }
                        ]
                    },
                    "num_acceptors": {
                        "default": 4,
                        "description": "Socket acceptor pool size for TCP protocols.",
                        "label": "Number of acceptors",
                        "type": "number"
                    },
                    "max_connections": {
                        "default": 512,
                        "description": "Maximum number of simultaneous connections.",
                        "label": "Maximum connections",
                        "type": "number"
                    },
                    "backlog": {
                        "default": 1024,
                        "description": "Defines the maximum length that the queue of pending connections can grow to.",
                        "label": "Backlog",
                        "type": "number"
                    },
                    "send_timeout": {
                        "default": "5s",
                        "description": "Send timeout for the socket.",
                        "label": "Send timeout",
                        "type": "duration"
                    },
                    "inet6": {
                        "default": false,
                        "description": "Enable IPv6 support.",
                        "label": "IPv6",
                        "type": "boolean"
                    },
                    "ipv6_v6only": {
                        "default": false,
                        "description": "Disable IPv4-to-IPv6 mapping for the listener.",
                        "label": "IPv6 only",
                        "type": "boolean"
                    },
                    "enable": {
                        "default": false,
                        "description": "Enable TLS.",
                        "label": "enable",
                        "type": "boolean"
                    },
                    "cacertfile": {
                        "default": "etc/certs/cacert.pem",
                        "description": "Trusted PEM format CA certificates bundle file.<br>\nThe certificates in this file are used to verify the TLS peer's certificates.\nAppend new certificates to the file if new CAs are to be trusted.\nThere is no need to restart EMQX to have the updated file loaded, because\nthe system regularly checks if file has been updated (and reload).<br>\nNOTE: invalidating (deleting) a certificate from the file will not affect\nalready established connections.\n",
                        "label": "cacertfile",
                        "type": "string"
                    },
                    "certfile": {
                        "default": "etc/certs/cert.pem",
                        "description": "PEM format certificates chain file.<br>\nThe certificates in this file should be in reversed order of the certificate\nissue chain. That is, the host's certificate should be placed in the beginning\nof the file, followed by the immediate issuer certificate and so on.\nAlthough the root CA certificate is optional, it should be placed at the end of\nthe file if it is to be added.",
                        "label": "certfile",
                        "type": "string"
                    },
                    "keyfile": {
                        "default": "etc/certs/key.pem",
                        "description": "PEM format private key file.",
                        "label": "keyfile",
                        "type": "string"
                    },
                    "verify": {
                        "default": "verify_none",
                        "description": "Enable or disable peer verification.",
                        "label": "verify",
                        "symbols": [
                            "verify_peer",
                            "verify_none"
                        ],
                        "type": "enum"
                    },
                    "reuse_sessions": {
                        "default": true,
                        "description": "Enable TLS session reuse.",
                        "label": "reuse_sessions",
                        "type": "boolean"
                    },
                    "depth": {
                        "default": 10,
                        "description": "Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path. So, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly; if 1 the path can be PEER, CA, ROOT-CA; if 2 the path can be PEER, CA, CA, ROOT-CA, and so on. The default value is 10.",
                        "label": "depth",
                        "type": "number"
                    },
                    "password": {
                        "description": "String containing the user's password. Only used if the private\nkey file is password-protected.",
                        "label": "password",
                        "type": "string"
                    },
                    "versions": {
                        "default": [
                            "tlsv1.3",
                            "tlsv1.2",
                            "tlsv1.1",
                            "tlsv1"
                        ],
                        "description": "All TLS/DTLS versions to be supported.<br>\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br>\nIn case PSK cipher suites are intended, make sure to configured\n<code>['tlsv1.2', 'tlsv1.1']</code> here.",
                        "items": {
                            "type": "string"
                        },
                        "label": "versions",
                        "type": "array"
                    },
                    "ciphers": {
                        "default": [
                            "TLS_AES_256_GCM_SHA384",
                            "TLS_AES_128_GCM_SHA256",
                            "TLS_CHACHA20_POLY1305_SHA256",
                            "TLS_AES_128_CCM_SHA256",
                            "TLS_AES_128_CCM_8_SHA256",
                            "ECDHE-ECDSA-AES256-GCM-SHA384",
                            "ECDHE-RSA-AES256-GCM-SHA384",
                            "ECDHE-ECDSA-AES256-SHA384",
                            "ECDHE-RSA-AES256-SHA384",
                            "ECDH-ECDSA-AES256-GCM-SHA384",
                            "ECDH-RSA-AES256-GCM-SHA384",
                            "ECDH-ECDSA-AES256-SHA384",
                            "ECDH-RSA-AES256-SHA384",
                            "DHE-DSS-AES256-GCM-SHA384",
                            "DHE-DSS-AES256-SHA256",
                            "AES256-GCM-SHA384",
                            "AES256-SHA256",
                            "ECDHE-ECDSA-AES128-GCM-SHA256",
                            "ECDHE-RSA-AES128-GCM-SHA256",
                            "ECDHE-ECDSA-AES128-SHA256",
                            "ECDHE-RSA-AES128-SHA256",
                            "ECDH-ECDSA-AES128-GCM-SHA256",
                            "ECDH-RSA-AES128-GCM-SHA256",
                            "ECDH-ECDSA-AES128-SHA256",
                            "ECDH-RSA-AES128-SHA256",
                            "DHE-DSS-AES128-GCM-SHA256",
                            "DHE-DSS-AES128-SHA256",
                            "AES128-GCM-SHA256",
                            "AES128-SHA256",
                            "ECDHE-ECDSA-AES256-SHA",
                            "ECDHE-RSA-AES256-SHA",
                            "DHE-DSS-AES256-SHA",
                            "ECDH-ECDSA-AES256-SHA",
                            "ECDH-RSA-AES256-SHA",
                            "ECDHE-ECDSA-AES128-SHA",
                            "ECDHE-RSA-AES128-SHA",
                            "DHE-DSS-AES128-SHA",
                            "ECDH-ECDSA-AES128-SHA",
                            "ECDH-RSA-AES128-SHA",
                            "RSA-PSK-AES256-GCM-SHA384",
                            "RSA-PSK-AES256-CBC-SHA384",
                            "RSA-PSK-AES128-GCM-SHA256",
                            "RSA-PSK-AES128-CBC-SHA256",
                            "RSA-PSK-AES256-CBC-SHA",
                            "RSA-PSK-AES128-CBC-SHA"
                        ],
                        "description": "This config holds TLS cipher suite names separated by comma,\nor as an array of strings. e.g.\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.\n<br>\nCiphers (and their ordering) define the way in which the\nclient and server encrypts information over the network connection.\nSelecting a good cipher suite is critical for the\napplication's data security, confidentiality and performance.\n\nThe names should be in OpenSSL string format (not RFC format).\nAll default values and examples provided by EMQX config\ndocumentation are all in OpenSSL format.<br>\n\nNOTE: Certain cipher suites are only compatible with\nspecific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')\nincompatible cipher suites will be silently dropped.\nFor instance, if only 'tlsv1.3' is given in the <code>versions</code>,\nconfiguring cipher suites for other versions will have no effect.\n<br>\n\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br>\nIf PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br>\nPSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code><br>\n",
                        "items": {
                            "type": "string"
                        },
                        "label": "ciphers",
                        "type": "array"
                    },
                    "user_lookup_fun": {
                        "default": "emqx_tls_psk:lookup",
                        "description": "EMQX-internal callback that is used to lookup pre-shared key (PSK) identity.",
                        "label": "user_lookup_fun",
                        "type": "string"
                    },
                    "secure_renegotiate": {
                        "default": true,
                        "description": "SSL parameter renegotiation is a feature that allows a client and a server\nto renegotiate the parameters of the SSL connection on the fly.\nRFC 5746 defines a more secure way of doing this. By enabling secure renegotiation,\nyou drop support for the insecure renegotiation, prone to MitM attacks.",
                        "label": "secure_renegotiate",
                        "type": "boolean"
                    },
                    "dhfile": {
                        "description": "Path to a file containing PEM-encoded Diffie-Hellman parameters\nto be used by the server if a cipher suite using Diffie-Hellman\nkey exchange is negotiated. If not specified, default parameters\nare used.<br>\nNOTE: The <code>dhfile</code> option is not supported by TLS 1.3.",
                        "label": "dhfile",
                        "type": "string"
                    },
                    "honor_cipher_order": {
                        "default": true,
                        "description": "An important security setting, it forces the cipher to be set based\n on the server-specified order instead of the client-specified order,\n hence enforcing the (usually more properly configured) security\n ordering of the server administrator.",
                        "label": "honor_cipher_order",
                        "type": "boolean"
                    },
                    "client_renegotiation": {
                        "default": true,
                        "description": "In protocols that support client-initiated renegotiation,\nthe cost of resources of such an operation is higher for the server than the client.\nThis can act as a vector for denial of service attacks.\nThe SSL application already takes measures to counter-act such attempts,\nbut client-initiated renegotiation can be strictly disabled by setting this option to false.\nThe default value is true. Note that disabling renegotiation can result in\nlong-lived connections becoming unusable due to limits on\nthe number of messages the underlying cipher suite can encipher.",
                        "label": "client_renegotiation",
                        "type": "boolean"
                    },
                    "handshake_timeout": {
                        "default": "15s",
                        "description": "Maximum time duration allowed for the handshake to complete",
                        "label": "handshake_timeout",
                        "type": "duration"
                    }
                },
                "type": "object"
            },
            "limiter.limiter_opts": {
                "properties": {
                    "rate": {
                        "default": "infinity",
                        "description": "The rate",
                        "label": "rate",
                        "type": "string"
                    },
                    "burst": {
                        "default": "0/0s",
                        "description": "The burst, This value is based on rate.<br/>\n This value + rate = the maximum limit that can be achieved when limiter burst.",
                        "label": "burst",
                        "type": "string"
                    },
                    "bucket": {
                        "description": "Buckets config",
                        "label": "bucket",
                        "properties": {
                            "$bucket_name": {
                                "$ref": "#/components/schemas/limiter.bucket_opts"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "emqx_conf_schema.log_rotation": {
                "properties": {
                    "enable": {
                        "default": true,
                        "description": "Enable log rotation feature.",
                        "label": "Rotation Enable",
                        "type": "boolean"
                    },
                    "count": {
                        "default": 10,
                        "description": "Maximum number of log files.",
                        "label": "Max Log Files Number",
                        "maximum": 2048,
                        "minimum": 1,
                        "type": "number"
                    }
                },
                "type": "object"
            },
            "authn-builtin_db.authentication": {
                "required": [
                    "user_id_type",
                    "backend",
                    "mechanism"
                ],
                "properties": {
                    "mechanism": {
                        "description": "Authentication mechanism.",
                        "label": "mechanism",
                        "symbols": [
                            "password_based"
                        ],
                        "type": "enum"
                    },
                    "backend": {
                        "description": "Backend type.",
                        "label": "backend",
                        "symbols": [
                            "built_in_database"
                        ],
                        "type": "enum"
                    },
                    "user_id_type": {
                        "default": "username",
                        "description": "Authenticate by client ID or username.",
                        "label": "user_id_type",
                        "symbols": [
                            "clientid",
                            "username"
                        ],
                        "type": "enum"
                    },
                    "password_hash_algorithm": {
                        "default": {
                            "name": "sha256",
                            "salt_position": "prefix"
                        },
                        "description": "Options for password hash creation and verification.",
                        "label": "password_hash_algorithm",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/authn-hash.other_algorithms"
                            },
                            {
                                "$ref": "#/components/schemas/authn-hash.pbkdf2"
                            },
                            {
                                "$ref": "#/components/schemas/authn-hash.bcrypt_rw"
                            }
                        ]
                    },
                    "enable": {
                        "default": true,
                        "description": "Set to <code>false</code> to disable this auth provider",
                        "label": "enable",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "authn-jwt.ssl_enable": {
                "properties": {
                    "enable": {
                        "description": "",
                        "label": "enable",
                        "symbols": [
                            true
                        ],
                        "type": "enum"
                    },
                    "cacertfile": {
                        "description": "Path to the SSL CA certificate file.",
                        "label": "cacertfile",
                        "type": "string"
                    },
                    "certfile": {
                        "description": "Path to the SSL certificate file.",
                        "label": "certfile",
                        "type": "string"
                    },
                    "keyfile": {
                        "description": "Path to the SSL secret key file.",
                        "label": "keyfile",
                        "type": "string"
                    },
                    "verify": {
                        "default": "verify_none",
                        "description": "Enable or disable SSL peer verification.",
                        "label": "verify",
                        "symbols": [
                            "verify_peer",
                            "verify_none"
                        ],
                        "type": "enum"
                    },
                    "server_name_indication": {
                        "description": "SSL SNI (Server Name Indication)",
                        "label": "server_name_indication",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "emqx_schema.broker_perf": {
                "properties": {
                    "route_lock_type": {
                        "default": "key",
                        "description": "Performance tuning for subscribing/unsubscribing a wildcard topic.\nChange this parameter only when there are many wildcard topics.\n\nNOTE: when changing from/to `global` lock, it requires all nodes in the cluster to be stopped before the change.\n  - `key`: mnesia transactional updates with per-key locks. Recommended for a single-node setup.\n  - `tab`: mnesia transactional updates with table lock. Recommended for a cluster setup.\n  - `global`: updates are protected with a global lock. Recommended for large clusters.\n",
                        "label": "route_lock_type",
                        "symbols": [
                            "key",
                            "tab",
                            "global"
                        ],
                        "type": "enum"
                    },
                    "trie_compaction": {
                        "default": true,
                        "description": "Enable trie path compaction.\nEnabling it significantly improves wildcard topic subscribe rate, if wildcard topics have unique prefixes like: 'sensor/{{id}}/+/', where ID is unique per subscriber.\nTopic match performance (when publishing) may degrade if messages are mostly published to topics with large number of levels.\n\nNOTE: This is a cluster-wide configuration. It requires all nodes to be stopped before changing it.\n",
                        "label": "trie_compaction",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "limiter.bucket_opts": {
                "properties": {
                    "rate": {
                        "description": "Rate for this bucket.",
                        "label": "rate",
                        "type": "string"
                    },
                    "capacity": {
                        "description": "The maximum number of tokens for this bucket.",
                        "label": "capacity",
                        "type": "string"
                    },
                    "initial": {
                        "default": "0",
                        "description": "The initial number of tokens for this bucket.",
                        "label": "initial",
                        "type": "string"
                    },
                    "per_client": {
                        "default": {},
                        "description": "The rate limit for each user of the bucket, this field is not required",
                        "label": "per_client",
                        "$ref": "#/components/schemas/limiter.client_bucket"
                    }
                },
                "type": "object"
            },
            "emqx_conf_schema.node": {
                "required": [
                    "data_dir"
                ],
                "properties": {
                    "name": {
                        "default": "emqx@127.0.0.1",
                        "description": "Unique name of the EMQX node. It must follow <code>%name%@FQDN</code> or\n<code>%name%@IPv4</code> format.\n          ",
                        "label": "Node Name",
                        "readOnly": true,
                        "type": "string"
                    },
                    "cookie": {
                        "default": "emqxsecretcookie",
                        "description": "Secret cookie is a random string that should be the same on all nodes in\nthe given EMQX cluster, but unique per EMQX cluster. It is used to prevent EMQX nodes that\nbelong to different clusters from accidentally connecting to each other.",
                        "label": "Node Cookie",
                        "readOnly": true,
                        "type": "string"
                    },
                    "data_dir": {
                        "description": "\nPath to the persistent data directory.<\\br>\nPossible auto-created subdirectories are:<\\br>\n- `mnesia/<node_name>`: EMQX's built-in database directory.<\\br>\nFor example, `mnesia/emqx@127.0.0.1`.<\\br>\nThere should be only one such subdirectory.<\\br>\nMeaning, in case the node is to be renamed (to e.g. `emqx@10.0.1.1`),<\\br>\nthe old dir should be deleted first.<\\br>\n- `configs`: Generated configs at boot time, and cluster/local override configs.<\\br>\n- `patches`: Hot-patch beam files are to be placed here.<\\br>\n- `trace`: Trace log files.<\\br>\n\n**NOTE**: One data dir cannot be shared by two or more EMQX nodes.\n",
                        "label": "Node Data Dir",
                        "readOnly": true,
                        "type": "string"
                    },
                    "config_files": {
                        "description": "List of configuration files that are read during startup. The order is\nsignificant: later configuration files override the previous ones.\n          ",
                        "items": {
                            "type": "string"
                        },
                        "label": "Config Files",
                        "readOnly": true,
                        "type": "array"
                    },
                    "global_gc_interval": {
                        "default": "15m",
                        "description": "Periodic garbage collection interval.",
                        "label": "Global GC Interval",
                        "readOnly": true,
                        "type": "duration"
                    },
                    "crash_dump_file": {
                        "description": "Location of the crash dump file.",
                        "label": "Crash Dump File",
                        "readOnly": true,
                        "type": "string"
                    },
                    "crash_dump_seconds": {
                        "default": "30s",
                        "description": "The number of seconds that the broker is allowed to spend writing a crash dump.",
                        "label": "Crash Dump Seconds",
                        "readOnly": true,
                        "type": "duration"
                    },
                    "crash_dump_bytes": {
                        "default": "100MB",
                        "description": "The maximum size of a crash dump file in bytes.",
                        "label": "Crash Dump Bytes",
                        "readOnly": true,
                        "type": "byteSize"
                    },
                    "dist_net_ticktime": {
                        "default": "2m",
                        "description": "This is the approximate time an EMQX node may be unresponsive until it is considered down and thereby disconnected.",
                        "label": "Dist Net TickTime",
                        "readOnly": true,
                        "type": "duration"
                    },
                    "backtrace_depth": {
                        "default": 23,
                        "description": "Maximum depth of the call stack printed in error messages and\n<code>process_info</code>.\n          ",
                        "label": "BackTrace Depth",
                        "readOnly": true,
                        "type": "number"
                    },
                    "applications": {
                        "default": "",
                        "description": "List of Erlang applications that shall be rebooted when the EMQX broker joins the cluster.\n          ",
                        "label": "Application",
                        "readOnly": true,
                        "type": "comma_separated_string"
                    },
                    "etc_dir": {
                        "description": "<code>etc</code> dir for the node",
                        "label": "Etc Dir",
                        "readOnly": true,
                        "type": "string"
                    },
                    "cluster_call": {
                        "description": "cluster_call Description",
                        "label": "cluster_call",
                        "readOnly": true,
                        "$ref": "#/components/schemas/emqx_conf_schema.cluster_call"
                    }
                },
                "type": "object"
            },
            "emqx_schema.mqtt_quic_listener": {
                "required": [
                    "bind"
                ],
                "properties": {
                    "enabled": {
                        "default": true,
                        "description": "Enable QUIC listener.",
                        "label": "enabled",
                        "type": "boolean"
                    },
                    "certfile": {
                        "description": "Path to the certificate file.",
                        "label": "certfile",
                        "type": "string"
                    },
                    "keyfile": {
                        "description": "Path to the secret key file.",
                        "label": "keyfile",
                        "type": "string"
                    },
                    "ciphers": {
                        "default": [
                            "TLS_AES_256_GCM_SHA384",
                            "TLS_AES_128_GCM_SHA256",
                            "TLS_CHACHA20_POLY1305_SHA256"
                        ],
                        "description": "This config holds TLS cipher suite names separated by comma,\nor as an array of strings. e.g.\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.\n<br>\nCiphers (and their ordering) define the way in which the\nclient and server encrypts information over the network connection.\nSelecting a good cipher suite is critical for the\napplication's data security, confidentiality and performance.\n\nThe names should be in OpenSSL string format (not RFC format).\nAll default values and examples provided by EMQX config\ndocumentation are all in OpenSSL format.<br>\n\nNOTE: Certain cipher suites are only compatible with\nspecific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')\nincompatible cipher suites will be silently dropped.\nFor instance, if only 'tlsv1.3' is given in the <code>versions</code>,\nconfiguring cipher suites for other versions will have no effect.\n<br>\n\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br>\nIf PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br>\nPSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code><br>\nNOTE: QUIC listener supports only 'tlsv1.3' ciphers<br>",
                        "items": {
                            "type": "string"
                        },
                        "label": "ciphers",
                        "type": "array"
                    },
                    "idle_timeout": {
                        "default": "15s",
                        "description": "Close transport-layer connections from the clients that have not sent MQTT CONNECT\nmessage within this interval.",
                        "label": "idle_timeout",
                        "type": "duration"
                    },
                    "bind": {
                        "description": "IP address and port for the listening socket.",
                        "label": "bind",
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "ip_port"
                            }
                        ]
                    },
                    "acceptors": {
                        "default": 16,
                        "description": "The size of the listener's receiving pool.",
                        "label": "acceptors",
                        "type": "number"
                    },
                    "max_connections": {
                        "default": "infinity",
                        "description": "The maximum number of concurrent connections allowed by the listener.",
                        "label": "max_connections",
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "mountpoint": {
                        "default": "",
                        "description": "When publishing or subscribing, prefix all topics with a mountpoint string.\n The prefixed string will be removed from the topic name when the message\n is delivered to the subscriber. The mountpoint is a way that users can use\n to implement isolation of message routing between different listeners.\n For example if a client A subscribes to `t` with `listeners.tcp.<name>.mountpoint`\n set to `some_tenant`, then the client actually subscribes to the topic\n `some_tenant/t`. Similarly, if another client B (connected to the same listener\n as the client A) sends a message to topic `t`, the message is routed\n to all the clients subscribed `some_tenant/t`, so client A will receive the\n message, with topic name `t`.<br/>\n Set to `\"\"` to disable the feature.<br/>\n\n Variables in mountpoint string:\n - <code>${clientid}</code>: clientid\n - <code>${username}</code>: username",
                        "label": "mountpoint",
                        "type": "string"
                    },
                    "zone": {
                        "default": "default",
                        "description": "The configuration zone to which the listener belongs.",
                        "label": "zone",
                        "type": "string"
                    },
                    "limiter": {
                        "default": {},
                        "description": "Type of the rate limit.",
                        "label": "limiter",
                        "properties": {
                            "$ratelimit's type": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "emqx_schema.listeners": {
                "properties": {
                    "tcp": {
                        "description": "TCP listeners",
                        "label": "tcp",
                        "properties": {
                            "$name": {
                                "$ref": "#/components/schemas/emqx_schema.mqtt_tcp_listener"
                            }
                        },
                        "type": "object"
                    },
                    "ssl": {
                        "description": "SSL listeners",
                        "label": "ssl",
                        "properties": {
                            "$name": {
                                "$ref": "#/components/schemas/emqx_schema.mqtt_ssl_listener"
                            }
                        },
                        "type": "object"
                    },
                    "ws": {
                        "description": "HTTP websocket listeners",
                        "label": "ws",
                        "properties": {
                            "$name": {
                                "$ref": "#/components/schemas/emqx_schema.mqtt_ws_listener"
                            }
                        },
                        "type": "object"
                    },
                    "wss": {
                        "description": "HTTPS websocket listeners",
                        "label": "wss",
                        "properties": {
                            "$name": {
                                "$ref": "#/components/schemas/emqx_schema.mqtt_wss_listener"
                            }
                        },
                        "type": "object"
                    },
                    "quic": {
                        "description": "QUIC listeners",
                        "label": "quic",
                        "properties": {
                            "$name": {
                                "$ref": "#/components/schemas/emqx_schema.mqtt_quic_listener"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "authn-hash.pbkdf2": {
                "required": [
                    "iterations",
                    "mac_fun",
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "PBKDF2 password hashing.",
                        "label": "name",
                        "symbols": [
                            "pbkdf2"
                        ],
                        "type": "enum"
                    },
                    "mac_fun": {
                        "description": "Specifies mac_fun for PBKDF2 hashing algorithm.",
                        "label": "mac_fun",
                        "symbols": [
                            "md4",
                            "md5",
                            "ripemd160",
                            "sha",
                            "sha224",
                            "sha256",
                            "sha384",
                            "sha512"
                        ],
                        "type": "enum"
                    },
                    "iterations": {
                        "description": "Iteration count for PBKDF2 hashing algorithm.",
                        "label": "iterations",
                        "type": "number"
                    },
                    "dk_length": {
                        "description": "Derived length for PBKDF2 hashing algorithm. If not specified, calculated automatically based on `mac_fun`.",
                        "label": "dk_length",
                        "type": "number"
                    }
                },
                "type": "object"
            },
            "authn-mongodb.sharded-cluster": {
                "required": [
                    "database",
                    "servers",
                    "mongo_type",
                    "collection",
                    "backend",
                    "mechanism"
                ],
                "properties": {
                    "mechanism": {
                        "description": "Authentication mechanism.",
                        "label": "mechanism",
                        "symbols": [
                            "password_based"
                        ],
                        "type": "enum"
                    },
                    "backend": {
                        "description": "Backend type.",
                        "label": "backend",
                        "symbols": [
                            "mongodb"
                        ],
                        "type": "enum"
                    },
                    "collection": {
                        "description": "Collection used to store authentication data.",
                        "label": "collection",
                        "type": "string"
                    },
                    "selector": {
                        "description": "Statement that is executed during the authentication process. Commands can support following wildcards:\n - `${username}`: substituted with client's username\n - `${clientid}`: substituted with the clientid",
                        "label": "selector",
                        "type": "string"
                    },
                    "password_hash_field": {
                        "description": "Document field that contains password hash.",
                        "label": "password_hash_field",
                        "type": "string"
                    },
                    "salt_field": {
                        "description": "Document field that contains the password salt.",
                        "label": "salt_field",
                        "type": "string"
                    },
                    "is_superuser_field": {
                        "description": "Document field that defines if the user has superuser privileges.",
                        "label": "is_superuser_field",
                        "type": "string"
                    },
                    "password_hash_algorithm": {
                        "default": {
                            "name": "sha256",
                            "salt_position": "prefix"
                        },
                        "description": "Options for password hash verification.",
                        "label": "password_hash_algorithm",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/authn-hash.other_algorithms"
                            },
                            {
                                "$ref": "#/components/schemas/authn-hash.pbkdf2"
                            },
                            {
                                "$ref": "#/components/schemas/authn-hash.bcrypt"
                            }
                        ]
                    },
                    "enable": {
                        "default": true,
                        "description": "Set to <code>false</code> to disable this auth provider",
                        "label": "enable",
                        "type": "boolean"
                    },
                    "mongo_type": {
                        "default": "sharded",
                        "description": "Sharded cluster.",
                        "label": "Sharded cluster",
                        "symbols": [
                            "sharded"
                        ],
                        "type": "enum"
                    },
                    "servers": {
                        "description": "\nA Node list for Cluster to connect to. The nodes should be separated with commas, such as: `Node[,Node].<br/>`\nFor each Node should be: The IPv4 or IPv6 address or the hostname to connect to.<br/>\nA host entry has the following form: `Host[:Port]`.<br/>\nThe MongoDB default port 27017 is used if `[:Port]` is not specified.\n",
                        "items": {
                            "type": "string"
                        },
                        "label": "Servers",
                        "type": "array"
                    },
                    "w_mode": {
                        "default": "unsafe",
                        "description": "Write mode.",
                        "label": "Write Mode",
                        "symbols": [
                            "unsafe",
                            "safe"
                        ],
                        "type": "enum"
                    },
                    "srv_record": {
                        "default": false,
                        "description": "Use DNS SRV record.",
                        "label": "Srv Record",
                        "type": "boolean"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "Size of the connection pool.",
                        "label": "Pool Size",
                        "type": "string"
                    },
                    "username": {
                        "description": "EMQX's username in the external database.",
                        "label": "Username",
                        "type": "string"
                    },
                    "password": {
                        "description": "EMQX's password in the external database.",
                        "label": "Password",
                        "type": "string"
                    },
                    "auth_source": {
                        "description": "Database name associated with the user's credentials.",
                        "label": "Auth Source",
                        "type": "string"
                    },
                    "database": {
                        "description": "Database name.",
                        "label": "Database Name",
                        "type": "string"
                    },
                    "topology": {
                        "description": "topology Description",
                        "label": "topology",
                        "$ref": "#/components/schemas/emqx_connector_mongo.topology"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "SSL connection settings.",
                        "label": "Enable SSL",
                        "$ref": "#/components/schemas/emqx_schema.ssl_client_opts"
                    }
                },
                "type": "object"
            },
            "dashboard.dashboard": {
                "required": [
                    "default_password",
                    "default_username"
                ],
                "properties": {
                    "listeners": {
                        "description": "HTTP(s) listeners are identified by their protocol type and are <br>\nused to serve dashboard UI and restful HTTP API.<br>\nListeners must have a unique combination of port number and IP address.<br>\nFor example, an HTTP listener can listen on all configured IP addresses\non a given port for a machine by specifying the IP address 0.0.0.0.<br>\nAlternatively, the HTTP listener can specify a unique IP address for each listener,\nbut use the same port.",
                        "label": "Listeners",
                        "$ref": "#/components/schemas/dashboard.listeners"
                    },
                    "default_username": {
                        "default": "admin",
                        "description": "The default username of the automatically created dashboard user.",
                        "label": "Default username",
                        "readOnly": true,
                        "type": "string"
                    },
                    "default_password": {
                        "default": "public",
                        "description": "The initial default password for dashboard 'admin' user.<br>\"\nFor safety, it should be changed as soon as possible.",
                        "label": "Default password",
                        "readOnly": true,
                        "type": "string"
                    },
                    "sample_interval": {
                        "default": "10s",
                        "description": "How often to update metrics displayed in the dashboard.<br/>\"\nNote: `sample_interval` should be a divisor of 60.",
                        "label": "sample_interval",
                        "type": "duration"
                    },
                    "token_expired_time": {
                        "default": "30m",
                        "description": "JWT token expiration time.",
                        "label": "Token expired time",
                        "type": "duration"
                    },
                    "cors": {
                        "default": false,
                        "description": "Support Cross-Origin Resource Sharing (CORS).<br>\nAllows a server to indicate any origins (domain, scheme, or port) other than <br\nits own from which a browser should permit loading resources.",
                        "label": "CORS",
                        "type": "boolean"
                    },
                    "i18n_lang": {
                        "default": "en",
                        "description": "Internationalization language support.",
                        "label": "I18n language",
                        "readOnly": true,
                        "symbols": [
                            "en",
                            "zh"
                        ],
                        "type": "enum"
                    }
                },
                "type": "object"
            },
            "emqx_schema.mqtt_ws_listener": {
                "required": [
                    "bind"
                ],
                "properties": {
                    "tcp": {
                        "description": "tcp Description",
                        "label": "tcp",
                        "$ref": "#/components/schemas/emqx_schema.tcp_opts"
                    },
                    "websocket": {
                        "description": "websocket Description",
                        "label": "websocket",
                        "$ref": "#/components/schemas/emqx_schema.ws_opts"
                    },
                    "bind": {
                        "description": "IP address and port for the listening socket.",
                        "label": "bind",
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "ip_port"
                            }
                        ]
                    },
                    "acceptors": {
                        "default": 16,
                        "description": "The size of the listener's receiving pool.",
                        "label": "acceptors",
                        "type": "number"
                    },
                    "max_connections": {
                        "default": "infinity",
                        "description": "The maximum number of concurrent connections allowed by the listener.",
                        "label": "max_connections",
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "mountpoint": {
                        "default": "",
                        "description": "When publishing or subscribing, prefix all topics with a mountpoint string.\n The prefixed string will be removed from the topic name when the message\n is delivered to the subscriber. The mountpoint is a way that users can use\n to implement isolation of message routing between different listeners.\n For example if a client A subscribes to `t` with `listeners.tcp.<name>.mountpoint`\n set to `some_tenant`, then the client actually subscribes to the topic\n `some_tenant/t`. Similarly, if another client B (connected to the same listener\n as the client A) sends a message to topic `t`, the message is routed\n to all the clients subscribed `some_tenant/t`, so client A will receive the\n message, with topic name `t`.<br/>\n Set to `\"\"` to disable the feature.<br/>\n\n Variables in mountpoint string:\n - <code>${clientid}</code>: clientid\n - <code>${username}</code>: username",
                        "label": "mountpoint",
                        "type": "string"
                    },
                    "zone": {
                        "default": "default",
                        "description": "The configuration zone to which the listener belongs.",
                        "label": "zone",
                        "type": "string"
                    },
                    "limiter": {
                        "default": {},
                        "description": "Type of the rate limit.",
                        "label": "limiter",
                        "properties": {
                            "$ratelimit's type": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "access_rules": {
                        "default": [
                            "allow all"
                        ],
                        "description": "The access control rules for this listener.<br/>See: https://github.com/emqtt/esockd#allowdeny",
                        "items": {
                            "type": "string"
                        },
                        "label": "access_rules",
                        "type": "array"
                    },
                    "proxy_protocol": {
                        "default": false,
                        "description": "Enable the Proxy Protocol V1/2 if the EMQX cluster is deployed\n behind HAProxy or Nginx.<br/>See: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
                        "label": "proxy_protocol",
                        "type": "boolean"
                    },
                    "proxy_protocol_timeout": {
                        "default": "3s",
                        "description": "Timeout for proxy protocol. EMQX will close the TCP connection if proxy protocol packet is not received within the timeout.",
                        "label": "proxy_protocol_timeout",
                        "type": "duration"
                    },
                    "authentication": {
                        "description": "Per-listener authentication override\nAuthentication can be one single authenticator instance or a chain of authenticators as an array.\nWhen authenticating a login (username, client ID, etc.) the authenticators are checked in the configured order.<br>\n",
                        "items": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/authn-scram-builtin_db.authentication"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-jwt.jwks"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-jwt.public-key"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-jwt.hmac-based"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-http.post"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-http.get"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-redis.sentinel"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-redis.cluster"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-redis.standalone"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-mongodb.sharded-cluster"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-mongodb.replica-set"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-mongodb.standalone"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-postgresql.authentication"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-mysql.authentication"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-builtin_db.authentication"
                                }
                            ]
                        },
                        "label": "authentication",
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "zone.force_shutdown": {
                "properties": {
                    "enable": {
                        "description": "Enable `force_shutdown` feature.",
                        "label": "Enable `force_shutdown` feature.",
                        "type": "boolean"
                    },
                    "max_message_queue_len": {
                        "description": "Maximum message queue length.",
                        "label": "Maximum message queue length.",
                        "minimum": 0,
                        "type": "number"
                    },
                    "max_heap_size": {
                        "description": "Total heap size",
                        "label": "Total heap size",
                        "type": "byteSize"
                    }
                },
                "type": "object"
            }
        }
    },
    "info": {
        "title": "EMQX Hot Conf Schema",
        "version": "0.1.0"
    },
    "paths": {
        "/configs": {
            "get": {
                "properties": {
                    "listeners": {
                        "description": "listeners Description",
                        "label": "listeners",
                        "$ref": "#/components/schemas/emqx_schema.listeners"
                    },
                    "zones": {
                        "description": "A zone is a set of configs grouped by the zone <code>name</code>.\nFor flexible configuration mapping, the <code>name</code> can be set to a listener's <code>zone</code> config.\nNOTE: A built-in zone named <code>default</code> is auto created and can not be deleted.\n",
                        "label": "zones",
                        "properties": {
                            "$name": {
                                "$ref": "#/components/schemas/emqx_schema.zone"
                            }
                        },
                        "type": "object"
                    },
                    "node": {
                        "description": "node Description",
                        "label": "node",
                        "$ref": "#/components/schemas/emqx_conf_schema.node"
                    },
                    "cluster": {
                        "description": "cluster Description",
                        "label": "cluster",
                        "$ref": "#/components/schemas/emqx_conf_schema.cluster"
                    },
                    "log": {
                        "description": "log Description",
                        "label": "log",
                        "$ref": "#/components/schemas/emqx_conf_schema.log"
                    },
                    "broker": {
                        "description": "Message broker options.",
                        "label": "broker",
                        "$ref": "#/components/schemas/emqx_schema.broker"
                    },
                    "rate_limit": {
                        "description": "rate_limit Description",
                        "label": "rate_limit",
                        "$ref": "#/components/schemas/emqx_schema.rate_limit"
                    },
                    "sysmon": {
                        "description": "sysmon Description",
                        "label": "sysmon",
                        "$ref": "#/components/schemas/emqx_schema.sysmon"
                    },
                    "alarm": {
                        "description": "alarm Description",
                        "label": "alarm",
                        "$ref": "#/components/schemas/emqx_schema.alarm"
                    },
                    "persistent_session_store": {
                        "description": "persistent_session_store Description",
                        "label": "persistent_session_store",
                        "$ref": "#/components/schemas/emqx_schema.persistent_session_store"
                    },
                    "trace": {
                        "description": "trace Description",
                        "label": "trace",
                        "$ref": "#/components/schemas/emqx_schema.trace"
                    },
                    "dashboard": {
                        "description": "dashboard Description",
                        "label": "dashboard",
                        "$ref": "#/components/schemas/dashboard.dashboard"
                    },
                    "limiter": {
                        "description": "limiter Description",
                        "label": "limiter",
                        "$ref": "#/components/schemas/limiter.limiter"
                    }
                },
                "type": "object"
            }
        },
        "/configs/alarm": {
            "get": {
                "$ref": "#/components/schemas/emqx_schema.alarm"
            },
            "put": {
                "$ref": "#/components/schemas/emqx_schema.alarm"
            }
        },
        "/configs/broker": {
            "get": {
                "$ref": "#/components/schemas/emqx_schema.broker"
            },
            "put": {
                "$ref": "#/components/schemas/emqx_schema.broker"
            }
        },
        "/configs/cluster": {
            "get": {
                "$ref": "#/components/schemas/emqx_conf_schema.cluster"
            },
            "put": {
                "$ref": "#/components/schemas/emqx_conf_schema.cluster"
            }
        },
        "/configs/dashboard": {
            "get": {
                "$ref": "#/components/schemas/dashboard.dashboard"
            },
            "put": {
                "$ref": "#/components/schemas/dashboard.dashboard"
            }
        },
        "/configs/global_zone": {
            "get": {
                "properties": {
                    "mqtt": {
                        "description": "mqtt Description",
                        "label": "mqtt",
                        "$ref": "#/components/schemas/zone.mqtt"
                    },
                    "stats": {
                        "description": "stats Description",
                        "label": "stats",
                        "$ref": "#/components/schemas/zone.stats"
                    },
                    "flapping_detect": {
                        "description": "flapping_detect Description",
                        "label": "flapping_detect",
                        "$ref": "#/components/schemas/zone.flapping_detect"
                    },
                    "force_shutdown": {
                        "description": "force_shutdown Description",
                        "label": "force_shutdown",
                        "$ref": "#/components/schemas/zone.force_shutdown"
                    },
                    "conn_congestion": {
                        "description": "conn_congestion Description",
                        "label": "conn_congestion",
                        "$ref": "#/components/schemas/zone.conn_congestion"
                    },
                    "force_gc": {
                        "description": "force_gc Description",
                        "label": "force_gc",
                        "$ref": "#/components/schemas/zone.force_gc"
                    },
                    "overload_protection": {
                        "description": "overload_protection Description",
                        "label": "overload_protection",
                        "$ref": "#/components/schemas/zone.overload_protection"
                    }
                },
                "type": "object"
            },
            "put": {
                "properties": {
                    "mqtt": {
                        "description": "mqtt Description",
                        "label": "mqtt",
                        "$ref": "#/components/schemas/zone.mqtt"
                    },
                    "stats": {
                        "description": "stats Description",
                        "label": "stats",
                        "$ref": "#/components/schemas/zone.stats"
                    },
                    "flapping_detect": {
                        "description": "flapping_detect Description",
                        "label": "flapping_detect",
                        "$ref": "#/components/schemas/zone.flapping_detect"
                    },
                    "force_shutdown": {
                        "description": "force_shutdown Description",
                        "label": "force_shutdown",
                        "$ref": "#/components/schemas/zone.force_shutdown"
                    },
                    "conn_congestion": {
                        "description": "conn_congestion Description",
                        "label": "conn_congestion",
                        "$ref": "#/components/schemas/zone.conn_congestion"
                    },
                    "force_gc": {
                        "description": "force_gc Description",
                        "label": "force_gc",
                        "$ref": "#/components/schemas/zone.force_gc"
                    },
                    "overload_protection": {
                        "description": "overload_protection Description",
                        "label": "overload_protection",
                        "$ref": "#/components/schemas/zone.overload_protection"
                    }
                },
                "type": "object"
            }
        },
        "/configs/limiter": {
            "get": {
                "$ref": "#/components/schemas/limiter.limiter"
            },
            "put": {
                "$ref": "#/components/schemas/limiter.limiter"
            }
        },
        "/configs/listeners": {
            "get": {
                "$ref": "#/components/schemas/emqx_schema.listeners"
            },
            "put": {
                "$ref": "#/components/schemas/emqx_schema.listeners"
            }
        },
        "/configs/log": {
            "get": {
                "$ref": "#/components/schemas/emqx_conf_schema.log"
            },
            "put": {
                "$ref": "#/components/schemas/emqx_conf_schema.log"
            }
        },
        "/configs/node": {
            "get": {
                "$ref": "#/components/schemas/emqx_conf_schema.node"
            },
            "put": {
                "$ref": "#/components/schemas/emqx_conf_schema.node"
            }
        },
        "/configs/persistent_session_store": {
            "get": {
                "$ref": "#/components/schemas/emqx_schema.persistent_session_store"
            },
            "put": {
                "$ref": "#/components/schemas/emqx_schema.persistent_session_store"
            }
        },
        "/configs/rate_limit": {
            "get": {
                "$ref": "#/components/schemas/emqx_schema.rate_limit"
            },
            "put": {
                "$ref": "#/components/schemas/emqx_schema.rate_limit"
            }
        },
        "/configs/sysmon": {
            "get": {
                "$ref": "#/components/schemas/emqx_schema.sysmon"
            },
            "put": {
                "$ref": "#/components/schemas/emqx_schema.sysmon"
            }
        },
        "/configs/trace": {
            "get": {
                "$ref": "#/components/schemas/emqx_schema.trace"
            },
            "put": {
                "$ref": "#/components/schemas/emqx_schema.trace"
            }
        },
        "/configs/zones": {
            "get": {
                "properties": {
                    "$name": {
                        "$ref": "#/components/schemas/emqx_schema.zone"
                    }
                },
                "type": "object"
            },
            "put": {
                "properties": {
                    "$name": {
                        "$ref": "#/components/schemas/emqx_schema.zone"
                    }
                },
                "type": "object"
            }
        },
        "/configs_reset/:rootname": {}
    }
}