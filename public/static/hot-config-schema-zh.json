{
    "components": {
        "schemas": {
            "dashboard.http": {
                "required": [
                    "bind"
                ],
                "properties": {
                    "bind": {
                        "default": 18083,
                        "description": "监听的地址与端口",
                        "label": "绑定端口",
                        "oneOf": [
                            {
                                "type": "ip_port"
                            },
                            {
                                "minimum": 1,
                                "type": "number"
                            }
                        ]
                    },
                    "num_acceptors": {
                        "default": 4,
                        "description": "TCP协议的Socket acceptor池大小",
                        "label": "Acceptor 数量",
                        "type": "number"
                    },
                    "max_connections": {
                        "default": 512,
                        "description": "同时处理的最大连接数",
                        "label": "最大连接数",
                        "type": "number"
                    },
                    "backlog": {
                        "default": 1024,
                        "description": "排队等待连接的队列的最大长度",
                        "label": "排队长度",
                        "type": "number"
                    },
                    "send_timeout": {
                        "default": "5s",
                        "description": "Socket发送超时时间",
                        "label": "发送超时时间",
                        "type": "duration"
                    },
                    "inet6": {
                        "default": false,
                        "description": "启用IPv6",
                        "label": "IPv6",
                        "type": "boolean"
                    },
                    "ipv6_v6only": {
                        "default": false,
                        "description": "禁用IPv4-to-IPv6映射",
                        "label": "IPv6 only",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "authn-mysql.authentication": {
                "required": [
                    "database",
                    "server",
                    "query",
                    "backend",
                    "mechanism"
                ],
                "properties": {
                    "mechanism": {
                        "description": "Authentication mechanism.",
                        "label": "mechanism",
                        "symbols": [
                            "password_based"
                        ],
                        "type": "enum"
                    },
                    "backend": {
                        "description": "Backend type.",
                        "label": "backend",
                        "symbols": [
                            "mysql"
                        ],
                        "type": "enum"
                    },
                    "password_hash_algorithm": {
                        "default": {
                            "name": "sha256",
                            "salt_position": "prefix"
                        },
                        "description": "Options for password hash verification.",
                        "label": "password_hash_algorithm",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/authn-hash.other_algorithms"
                            },
                            {
                                "$ref": "#/components/schemas/authn-hash.pbkdf2"
                            },
                            {
                                "$ref": "#/components/schemas/authn-hash.bcrypt"
                            }
                        ]
                    },
                    "query": {
                        "description": "SQL query used to lookup client data.",
                        "label": "query",
                        "type": "string"
                    },
                    "query_timeout": {
                        "default": "5s",
                        "description": "Timeout for the SQL query.",
                        "label": "query_timeout",
                        "type": "duration"
                    },
                    "enable": {
                        "default": true,
                        "description": "Set to <code>false</code> to disable this auth provider",
                        "label": "enable",
                        "type": "boolean"
                    },
                    "server": {
                        "description": "\n将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/>\n主机名具有以下形式：`Host[:Port]`。<br/>\n如果未指定 `[:Port]`，则使用 MySQL 默认端口 3306。\n",
                        "label": "服务器地址",
                        "type": "ip_port"
                    },
                    "database": {
                        "description": "数据库名字。",
                        "label": "数据库名字",
                        "type": "string"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "连接池大小。",
                        "label": "连接池大小",
                        "type": "string"
                    },
                    "username": {
                        "description": "内部数据库的用户名。",
                        "label": "用户名",
                        "type": "string"
                    },
                    "password": {
                        "description": "内部数据库密码。",
                        "label": "密码",
                        "type": "string"
                    },
                    "auto_reconnect": {
                        "default": true,
                        "description": "自动重连数据库。",
                        "label": "自动重连数据库",
                        "type": "boolean"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "启用 SSL 连接。",
                        "label": "启用SSL",
                        "$ref": "#/components/schemas/emqx_schema.ssl_client_opts"
                    }
                },
                "type": "object"
            },
            "emqx_schema.ssl_client_opts": {
                "properties": {
                    "enable": {
                        "default": false,
                        "description": "Enable TLS.",
                        "label": "enable",
                        "type": "boolean"
                    },
                    "cacertfile": {
                        "default": "etc/certs/cacert.pem",
                        "description": "Trusted PEM format CA certificates bundle file.<br>\nThe certificates in this file are used to verify the TLS peer's certificates.\nAppend new certificates to the file if new CAs are to be trusted.\nThere is no need to restart EMQX to have the updated file loaded, because\nthe system regularly checks if file has been updated (and reload).<br>\nNOTE: invalidating (deleting) a certificate from the file will not affect\nalready established connections.\n",
                        "label": "cacertfile",
                        "type": "string"
                    },
                    "certfile": {
                        "default": "etc/certs/client-cert.pem",
                        "description": "PEM format certificates chain file.<br>\nThe certificates in this file should be in reversed order of the certificate\nissue chain. That is, the host's certificate should be placed in the beginning\nof the file, followed by the immediate issuer certificate and so on.\nAlthough the root CA certificate is optional, it should be placed at the end of\nthe file if it is to be added.",
                        "label": "certfile",
                        "type": "string"
                    },
                    "keyfile": {
                        "default": "etc/certs/client-key.pem",
                        "description": "PEM format private key file.",
                        "label": "keyfile",
                        "type": "string"
                    },
                    "verify": {
                        "default": "verify_none",
                        "description": "Enable or disable peer verification.",
                        "label": "verify",
                        "symbols": [
                            "verify_peer",
                            "verify_none"
                        ],
                        "type": "enum"
                    },
                    "reuse_sessions": {
                        "default": true,
                        "description": "Enable TLS session reuse.",
                        "label": "reuse_sessions",
                        "type": "boolean"
                    },
                    "depth": {
                        "default": 10,
                        "description": "Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path. So, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly; if 1 the path can be PEER, CA, ROOT-CA; if 2 the path can be PEER, CA, CA, ROOT-CA, and so on. The default value is 10.",
                        "label": "depth",
                        "type": "number"
                    },
                    "password": {
                        "description": "String containing the user's password. Only used if the private\nkey file is password-protected.",
                        "label": "password",
                        "type": "string"
                    },
                    "versions": {
                        "default": [
                            "tlsv1.3",
                            "tlsv1.2",
                            "tlsv1.1",
                            "tlsv1"
                        ],
                        "description": "All TLS/DTLS versions to be supported.<br>\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br>\nIn case PSK cipher suites are intended, make sure to configured\n<code>['tlsv1.2', 'tlsv1.1']</code> here.",
                        "items": {
                            "type": "string"
                        },
                        "label": "versions",
                        "type": "array"
                    },
                    "ciphers": {
                        "default": [
                            "TLS_AES_256_GCM_SHA384",
                            "TLS_AES_128_GCM_SHA256",
                            "TLS_CHACHA20_POLY1305_SHA256",
                            "TLS_AES_128_CCM_SHA256",
                            "TLS_AES_128_CCM_8_SHA256",
                            "ECDHE-ECDSA-AES256-GCM-SHA384",
                            "ECDHE-RSA-AES256-GCM-SHA384",
                            "ECDHE-ECDSA-AES256-SHA384",
                            "ECDHE-RSA-AES256-SHA384",
                            "ECDH-ECDSA-AES256-GCM-SHA384",
                            "ECDH-RSA-AES256-GCM-SHA384",
                            "ECDH-ECDSA-AES256-SHA384",
                            "ECDH-RSA-AES256-SHA384",
                            "DHE-DSS-AES256-GCM-SHA384",
                            "DHE-DSS-AES256-SHA256",
                            "AES256-GCM-SHA384",
                            "AES256-SHA256",
                            "ECDHE-ECDSA-AES128-GCM-SHA256",
                            "ECDHE-RSA-AES128-GCM-SHA256",
                            "ECDHE-ECDSA-AES128-SHA256",
                            "ECDHE-RSA-AES128-SHA256",
                            "ECDH-ECDSA-AES128-GCM-SHA256",
                            "ECDH-RSA-AES128-GCM-SHA256",
                            "ECDH-ECDSA-AES128-SHA256",
                            "ECDH-RSA-AES128-SHA256",
                            "DHE-DSS-AES128-GCM-SHA256",
                            "DHE-DSS-AES128-SHA256",
                            "AES128-GCM-SHA256",
                            "AES128-SHA256",
                            "ECDHE-ECDSA-AES256-SHA",
                            "ECDHE-RSA-AES256-SHA",
                            "DHE-DSS-AES256-SHA",
                            "ECDH-ECDSA-AES256-SHA",
                            "ECDH-RSA-AES256-SHA",
                            "ECDHE-ECDSA-AES128-SHA",
                            "ECDHE-RSA-AES128-SHA",
                            "DHE-DSS-AES128-SHA",
                            "ECDH-ECDSA-AES128-SHA",
                            "ECDH-RSA-AES128-SHA",
                            "RSA-PSK-AES256-GCM-SHA384",
                            "RSA-PSK-AES256-CBC-SHA384",
                            "RSA-PSK-AES128-GCM-SHA256",
                            "RSA-PSK-AES128-CBC-SHA256",
                            "RSA-PSK-AES256-CBC-SHA",
                            "RSA-PSK-AES128-CBC-SHA"
                        ],
                        "description": "This config holds TLS cipher suite names separated by comma,\nor as an array of strings. e.g.\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.\n<br>\nCiphers (and their ordering) define the way in which the\nclient and server encrypts information over the network connection.\nSelecting a good cipher suite is critical for the\napplication's data security, confidentiality and performance.\n\nThe names should be in OpenSSL string format (not RFC format).\nAll default values and examples provided by EMQX config\ndocumentation are all in OpenSSL format.<br>\n\nNOTE: Certain cipher suites are only compatible with\nspecific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')\nincompatible cipher suites will be silently dropped.\nFor instance, if only 'tlsv1.3' is given in the <code>versions</code>,\nconfiguring cipher suites for other versions will have no effect.\n<br>\n\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br>\nIf PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br>\nPSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code><br>\n",
                        "items": {
                            "type": "string"
                        },
                        "label": "ciphers",
                        "type": "array"
                    },
                    "user_lookup_fun": {
                        "default": "emqx_tls_psk:lookup",
                        "description": "EMQX-internal callback that is used to lookup pre-shared key (PSK) identity.",
                        "label": "user_lookup_fun",
                        "type": "string"
                    },
                    "secure_renegotiate": {
                        "default": true,
                        "description": "SSL parameter renegotiation is a feature that allows a client and a server\nto renegotiate the parameters of the SSL connection on the fly.\nRFC 5746 defines a more secure way of doing this. By enabling secure renegotiation,\nyou drop support for the insecure renegotiation, prone to MitM attacks.",
                        "label": "secure_renegotiate",
                        "type": "boolean"
                    },
                    "server_name_indication": {
                        "description": "Specify the host name to be used in TLS Server Name Indication extension.<br>\nFor instance, when connecting to \"server.example.net\", the genuine server\nwhich accepts the connection and performs TLS handshake may differ from the\nhost the TLS client initially connects to, e.g. when connecting to an IP address\nor when the host has multiple resolvable DNS records <br>\nIf not specified, it will default to the host name string which is used\nto establish the connection, unless it is IP addressed used.<br>\nThe host name is then also used in the host name verification of the peer\ncertificate.<br> The special value 'disable' prevents the Server Name\nIndication extension from being sent and disables the hostname\nverification check.",
                        "label": "server_name_indication",
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "symbols": [
                                    "disable"
                                ],
                                "type": "enum"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "emqx_conf_schema.cluster_etcd": {
                "properties": {
                    "server": {
                        "description": "指定 etcd 服务的地址。如有多个服务使用逗号 , 分隔。\n当 cluster.discovery_strategy 为 etcd 时，此配置项才有效。\n          ",
                        "label": "Etcd 服务器地址",
                        "readOnly": true,
                        "type": "comma_separated_string"
                    },
                    "prefix": {
                        "default": "emqxcl",
                        "description": "指定 etcd 路径的前缀。每个节点在 etcd 中都会创建一个路径:\nv2/keys/<prefix>/<cluster.name>/<node.name> <\\br>\n当 cluster.discovery_strategy 为 etcd 时，此配置项才有效。\n      ",
                        "label": "Etcd 路径前缀",
                        "readOnly": true,
                        "type": "string"
                    },
                    "node_ttl": {
                        "default": "1m",
                        "description": "指定 etcd 中节点信息的过期时间。\n当 cluster.discovery_strategy 为 etcd 时，此配置项才有效。\n          ",
                        "label": "Etcd 节点过期时间",
                        "readOnly": true,
                        "type": "duration"
                    },
                    "ssl": {
                        "description": "当使用 TLS 连接 etcd 时的配置选项。\n当 cluster.discovery_strategy 为 etcd 时，此配置项才有效。\n          ",
                        "label": "Etcd SSL 选项",
                        "readOnly": true,
                        "$ref": "#/components/schemas/emqx_schema.ssl_client_opts"
                    }
                },
                "type": "object"
            },
            "emqx_schema.tcp_opts": {
                "properties": {
                    "active_n": {
                        "default": 100,
                        "description": "Specify the {active, N} option for this Socket.<br/>\n See: https://erlang.org/doc/man/inet.html#setopts-2",
                        "label": "active_n",
                        "type": "number"
                    },
                    "backlog": {
                        "default": 1024,
                        "description": "TCP backlog defines the maximum length that the queue of\n pending connections can grow to.",
                        "label": "backlog",
                        "type": "number"
                    },
                    "send_timeout": {
                        "default": "15s",
                        "description": "The TCP send timeout for the connections.",
                        "label": "send_timeout",
                        "type": "duration"
                    },
                    "send_timeout_close": {
                        "default": true,
                        "description": "Close the connection if send timeout.",
                        "label": "send_timeout_close",
                        "type": "boolean"
                    },
                    "recbuf": {
                        "description": "The TCP receive buffer (OS kernel) for the connections.",
                        "label": "recbuf",
                        "type": "byteSize"
                    },
                    "sndbuf": {
                        "description": "The TCP send buffer (OS kernel) for the connections.",
                        "label": "sndbuf",
                        "type": "byteSize"
                    },
                    "buffer": {
                        "description": "The size of the user-space buffer used by the driver.",
                        "label": "buffer",
                        "type": "byteSize"
                    },
                    "high_watermark": {
                        "default": "1MB",
                        "description": "The socket is set to a busy state when the amount of data queued internally\n  by the VM socket implementation reaches this limit.",
                        "label": "high_watermark",
                        "type": "byteSize"
                    },
                    "nodelay": {
                        "default": false,
                        "description": "The TCP_NODELAY flag for the connections.",
                        "label": "nodelay",
                        "type": "boolean"
                    },
                    "reuseaddr": {
                        "default": true,
                        "description": "The SO_REUSEADDR flag for the connections.",
                        "label": "reuseaddr",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "emqx_schema.mqtt_wss_listener": {
                "required": [
                    "bind"
                ],
                "properties": {
                    "tcp": {
                        "description": "tcp Description",
                        "label": "tcp",
                        "$ref": "#/components/schemas/emqx_schema.tcp_opts"
                    },
                    "ssl": {
                        "description": "ssl Description",
                        "label": "ssl",
                        "$ref": "#/components/schemas/emqx_schema.listener_wss_opts"
                    },
                    "websocket": {
                        "description": "websocket Description",
                        "label": "websocket",
                        "$ref": "#/components/schemas/emqx_schema.ws_opts"
                    },
                    "bind": {
                        "description": "IP address and port for the listening socket.",
                        "label": "bind",
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "ip_port"
                            }
                        ]
                    },
                    "acceptors": {
                        "default": 16,
                        "description": "The size of the listener's receiving pool.",
                        "label": "acceptors",
                        "type": "number"
                    },
                    "max_connections": {
                        "default": "infinity",
                        "description": "The maximum number of concurrent connections allowed by the listener.",
                        "label": "max_connections",
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "mountpoint": {
                        "default": "",
                        "description": "When publishing or subscribing, prefix all topics with a mountpoint string.\n The prefixed string will be removed from the topic name when the message\n is delivered to the subscriber. The mountpoint is a way that users can use\n to implement isolation of message routing between different listeners.\n For example if a client A subscribes to `t` with `listeners.tcp.<name>.mountpoint`\n set to `some_tenant`, then the client actually subscribes to the topic\n `some_tenant/t`. Similarly, if another client B (connected to the same listener\n as the client A) sends a message to topic `t`, the message is routed\n to all the clients subscribed `some_tenant/t`, so client A will receive the\n message, with topic name `t`.<br/>\n Set to `\"\"` to disable the feature.<br/>\n\n Variables in mountpoint string:\n - <code>${clientid}</code>: clientid\n - <code>${username}</code>: username",
                        "label": "mountpoint",
                        "type": "string"
                    },
                    "zone": {
                        "default": "default",
                        "description": "The configuration zone to which the listener belongs.",
                        "label": "zone",
                        "type": "string"
                    },
                    "limiter": {
                        "default": {},
                        "description": "Type of the rate limit.",
                        "label": "limiter",
                        "properties": {
                            "$ratelimit's type": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "access_rules": {
                        "default": [
                            "allow all"
                        ],
                        "description": "The access control rules for this listener.<br/>See: https://github.com/emqtt/esockd#allowdeny",
                        "items": {
                            "type": "string"
                        },
                        "label": "access_rules",
                        "type": "array"
                    },
                    "proxy_protocol": {
                        "default": false,
                        "description": "Enable the Proxy Protocol V1/2 if the EMQX cluster is deployed\n behind HAProxy or Nginx.<br/>See: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
                        "label": "proxy_protocol",
                        "type": "boolean"
                    },
                    "proxy_protocol_timeout": {
                        "default": "3s",
                        "description": "Timeout for proxy protocol. EMQX will close the TCP connection if proxy protocol packet is not received within the timeout.",
                        "label": "proxy_protocol_timeout",
                        "type": "duration"
                    },
                    "authentication": {
                        "description": "Per-listener authentication override\nAuthentication can be one single authenticator instance or a chain of authenticators as an array.\nWhen authenticating a login (username, client ID, etc.) the authenticators are checked in the configured order.<br>\n",
                        "items": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/authn-scram-builtin_db.authentication"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-jwt.jwks"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-jwt.public-key"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-jwt.hmac-based"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-http.post"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-http.get"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-redis.sentinel"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-redis.cluster"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-redis.standalone"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-mongodb.sharded-cluster"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-mongodb.replica-set"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-mongodb.standalone"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-postgresql.authentication"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-mysql.authentication"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-builtin_db.authentication"
                                }
                            ]
                        },
                        "label": "authentication",
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "emqx_schema.persistent_session_store": {
                "properties": {
                    "enabled": {
                        "default": false,
                        "description": "使用数据库存储有关持久会话的信息。\\n这使得在节点停止时，可以将客户端连接迁移到另一个群集节点。",
                        "label": "启用持久会话保存",
                        "type": "boolean"
                    },
                    "storage_type": {
                        "default": "disc",
                        "description": "将有关持久会话的信息存储在磁盘或内存中。\\n如果选择了ram，有关持久会话的所有信息将保留\\n只要群集中至少有一个节点处于活动状态，就可以保留信息。\\n如果选择了光盘，则信息将保留在光盘上，并且将继续存在\\n群集重新启动，代价是磁盘使用量增加，吞吐量降低。\\n",
                        "label": "存储类型",
                        "oneOf": [
                            {
                                "symbols": [
                                    "disc"
                                ],
                                "type": "enum"
                            },
                            {
                                "symbols": [
                                    "ram"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "max_retain_undelivered": {
                        "default": "1h",
                        "description": "如果重新启动时处理上一个会话的节点已停止，则未传递到持久会话的消息在垃圾收集之前会被存储。",
                        "label": "未投递的消息保留条数",
                        "type": "duration"
                    },
                    "message_gc_interval": {
                        "default": "1h",
                        "description": "将未送达的消息垃圾收集到持久会话的开始间隔。\\n这会影响检查 \"max_retain_undelivered\"（最大保留未送达）的删除频率。",
                        "label": "消息清理间隔",
                        "type": "duration"
                    },
                    "session_message_gc_interval": {
                        "default": "1m",
                        "description": "持久会话消息的临时数据垃圾收集的开始间隔。\\n这不会影响持久会话消息的生命周期长度。\\n",
                        "label": "会话消息清理间隔",
                        "type": "duration"
                    }
                },
                "type": "object"
            },
            "connector-http.request": {
                "properties": {
                    "method": {
                        "description": "HTTP 请求方法。",
                        "label": "HTTP 请求方法",
                        "symbols": [
                            "post",
                            "put",
                            "get",
                            "delete"
                        ],
                        "type": "enum"
                    },
                    "path": {
                        "description": "HTTP请求路径。",
                        "label": "HTTP请求路径",
                        "type": "string"
                    },
                    "body": {
                        "description": "HTTP请求报文主体。",
                        "label": "HTTP请求报文主体",
                        "type": "string"
                    },
                    "headers": {
                        "description": "HTTP 头字段列表。",
                        "label": "HTTP 头字段列表",
                        "type": "string"
                    },
                    "request_timeout": {
                        "description": "HTTP 请求超时。",
                        "label": "HTTP 请求超时",
                        "type": "duration"
                    }
                },
                "type": "object"
            },
            "emqx_schema.zone": {
                "properties": {
                    "mqtt": {
                        "description": "mqtt Description",
                        "label": "mqtt",
                        "$ref": "#/components/schemas/zone.mqtt"
                    },
                    "stats": {
                        "description": "stats Description",
                        "label": "stats",
                        "$ref": "#/components/schemas/zone.stats"
                    },
                    "flapping_detect": {
                        "description": "flapping_detect Description",
                        "label": "flapping_detect",
                        "$ref": "#/components/schemas/zone.flapping_detect"
                    },
                    "force_shutdown": {
                        "description": "force_shutdown Description",
                        "label": "force_shutdown",
                        "$ref": "#/components/schemas/zone.force_shutdown"
                    },
                    "conn_congestion": {
                        "description": "conn_congestion Description",
                        "label": "conn_congestion",
                        "$ref": "#/components/schemas/zone.conn_congestion"
                    },
                    "force_gc": {
                        "description": "force_gc Description",
                        "label": "force_gc",
                        "$ref": "#/components/schemas/zone.force_gc"
                    },
                    "overload_protection": {
                        "description": "overload_protection Description",
                        "label": "overload_protection",
                        "$ref": "#/components/schemas/zone.overload_protection"
                    }
                },
                "type": "object"
            },
            "emqx_schema.listener_ssl_opts": {
                "properties": {
                    "enable": {
                        "default": false,
                        "description": "Enable TLS.",
                        "label": "enable",
                        "type": "boolean"
                    },
                    "cacertfile": {
                        "default": "etc/certs/cacert.pem",
                        "description": "Trusted PEM format CA certificates bundle file.<br>\nThe certificates in this file are used to verify the TLS peer's certificates.\nAppend new certificates to the file if new CAs are to be trusted.\nThere is no need to restart EMQX to have the updated file loaded, because\nthe system regularly checks if file has been updated (and reload).<br>\nNOTE: invalidating (deleting) a certificate from the file will not affect\nalready established connections.\n",
                        "label": "cacertfile",
                        "type": "string"
                    },
                    "certfile": {
                        "default": "etc/certs/cert.pem",
                        "description": "PEM format certificates chain file.<br>\nThe certificates in this file should be in reversed order of the certificate\nissue chain. That is, the host's certificate should be placed in the beginning\nof the file, followed by the immediate issuer certificate and so on.\nAlthough the root CA certificate is optional, it should be placed at the end of\nthe file if it is to be added.",
                        "label": "certfile",
                        "type": "string"
                    },
                    "keyfile": {
                        "default": "etc/certs/key.pem",
                        "description": "PEM format private key file.",
                        "label": "keyfile",
                        "type": "string"
                    },
                    "verify": {
                        "default": "verify_none",
                        "description": "Enable or disable peer verification.",
                        "label": "verify",
                        "symbols": [
                            "verify_peer",
                            "verify_none"
                        ],
                        "type": "enum"
                    },
                    "reuse_sessions": {
                        "default": true,
                        "description": "Enable TLS session reuse.",
                        "label": "reuse_sessions",
                        "type": "boolean"
                    },
                    "depth": {
                        "default": 10,
                        "description": "Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path. So, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly; if 1 the path can be PEER, CA, ROOT-CA; if 2 the path can be PEER, CA, CA, ROOT-CA, and so on. The default value is 10.",
                        "label": "depth",
                        "type": "number"
                    },
                    "password": {
                        "description": "String containing the user's password. Only used if the private\nkey file is password-protected.",
                        "label": "password",
                        "type": "string"
                    },
                    "versions": {
                        "default": [
                            "tlsv1.3",
                            "tlsv1.2",
                            "tlsv1.1",
                            "tlsv1"
                        ],
                        "description": "All TLS/DTLS versions to be supported.<br>\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br>\nIn case PSK cipher suites are intended, make sure to configured\n<code>['tlsv1.2', 'tlsv1.1']</code> here.",
                        "items": {
                            "type": "string"
                        },
                        "label": "versions",
                        "type": "array"
                    },
                    "ciphers": {
                        "default": [
                            "TLS_AES_256_GCM_SHA384",
                            "TLS_AES_128_GCM_SHA256",
                            "TLS_CHACHA20_POLY1305_SHA256",
                            "TLS_AES_128_CCM_SHA256",
                            "TLS_AES_128_CCM_8_SHA256",
                            "ECDHE-ECDSA-AES256-GCM-SHA384",
                            "ECDHE-RSA-AES256-GCM-SHA384",
                            "ECDHE-ECDSA-AES256-SHA384",
                            "ECDHE-RSA-AES256-SHA384",
                            "ECDH-ECDSA-AES256-GCM-SHA384",
                            "ECDH-RSA-AES256-GCM-SHA384",
                            "ECDH-ECDSA-AES256-SHA384",
                            "ECDH-RSA-AES256-SHA384",
                            "DHE-DSS-AES256-GCM-SHA384",
                            "DHE-DSS-AES256-SHA256",
                            "AES256-GCM-SHA384",
                            "AES256-SHA256",
                            "ECDHE-ECDSA-AES128-GCM-SHA256",
                            "ECDHE-RSA-AES128-GCM-SHA256",
                            "ECDHE-ECDSA-AES128-SHA256",
                            "ECDHE-RSA-AES128-SHA256",
                            "ECDH-ECDSA-AES128-GCM-SHA256",
                            "ECDH-RSA-AES128-GCM-SHA256",
                            "ECDH-ECDSA-AES128-SHA256",
                            "ECDH-RSA-AES128-SHA256",
                            "DHE-DSS-AES128-GCM-SHA256",
                            "DHE-DSS-AES128-SHA256",
                            "AES128-GCM-SHA256",
                            "AES128-SHA256",
                            "ECDHE-ECDSA-AES256-SHA",
                            "ECDHE-RSA-AES256-SHA",
                            "DHE-DSS-AES256-SHA",
                            "ECDH-ECDSA-AES256-SHA",
                            "ECDH-RSA-AES256-SHA",
                            "ECDHE-ECDSA-AES128-SHA",
                            "ECDHE-RSA-AES128-SHA",
                            "DHE-DSS-AES128-SHA",
                            "ECDH-ECDSA-AES128-SHA",
                            "ECDH-RSA-AES128-SHA",
                            "RSA-PSK-AES256-GCM-SHA384",
                            "RSA-PSK-AES256-CBC-SHA384",
                            "RSA-PSK-AES128-GCM-SHA256",
                            "RSA-PSK-AES128-CBC-SHA256",
                            "RSA-PSK-AES256-CBC-SHA",
                            "RSA-PSK-AES128-CBC-SHA"
                        ],
                        "description": "This config holds TLS cipher suite names separated by comma,\nor as an array of strings. e.g.\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.\n<br>\nCiphers (and their ordering) define the way in which the\nclient and server encrypts information over the network connection.\nSelecting a good cipher suite is critical for the\napplication's data security, confidentiality and performance.\n\nThe names should be in OpenSSL string format (not RFC format).\nAll default values and examples provided by EMQX config\ndocumentation are all in OpenSSL format.<br>\n\nNOTE: Certain cipher suites are only compatible with\nspecific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')\nincompatible cipher suites will be silently dropped.\nFor instance, if only 'tlsv1.3' is given in the <code>versions</code>,\nconfiguring cipher suites for other versions will have no effect.\n<br>\n\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br>\nIf PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br>\nPSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code><br>\n",
                        "items": {
                            "type": "string"
                        },
                        "label": "ciphers",
                        "type": "array"
                    },
                    "user_lookup_fun": {
                        "default": "emqx_tls_psk:lookup",
                        "description": "EMQX-internal callback that is used to lookup pre-shared key (PSK) identity.",
                        "label": "user_lookup_fun",
                        "type": "string"
                    },
                    "secure_renegotiate": {
                        "default": true,
                        "description": "SSL parameter renegotiation is a feature that allows a client and a server\nto renegotiate the parameters of the SSL connection on the fly.\nRFC 5746 defines a more secure way of doing this. By enabling secure renegotiation,\nyou drop support for the insecure renegotiation, prone to MitM attacks.",
                        "label": "secure_renegotiate",
                        "type": "boolean"
                    },
                    "dhfile": {
                        "description": "Path to a file containing PEM-encoded Diffie-Hellman parameters\nto be used by the server if a cipher suite using Diffie-Hellman\nkey exchange is negotiated. If not specified, default parameters\nare used.<br>\nNOTE: The <code>dhfile</code> option is not supported by TLS 1.3.",
                        "label": "dhfile",
                        "type": "string"
                    },
                    "fail_if_no_peer_cert": {
                        "default": false,
                        "description": "Used together with {verify, verify_peer} by an TLS/DTLS server.\nIf set to true, the server fails if the client does not have a\ncertificate to send, that is, sends an empty certificate.\nIf set to false, it fails only if the client sends an invalid\ncertificate (an empty certificate is considered valid).",
                        "label": "fail_if_no_peer_cert",
                        "type": "boolean"
                    },
                    "honor_cipher_order": {
                        "default": true,
                        "description": "An important security setting, it forces the cipher to be set based\n on the server-specified order instead of the client-specified order,\n hence enforcing the (usually more properly configured) security\n ordering of the server administrator.",
                        "label": "honor_cipher_order",
                        "type": "boolean"
                    },
                    "client_renegotiation": {
                        "default": true,
                        "description": "In protocols that support client-initiated renegotiation,\nthe cost of resources of such an operation is higher for the server than the client.\nThis can act as a vector for denial of service attacks.\nThe SSL application already takes measures to counter-act such attempts,\nbut client-initiated renegotiation can be strictly disabled by setting this option to false.\nThe default value is true. Note that disabling renegotiation can result in\nlong-lived connections becoming unusable due to limits on\nthe number of messages the underlying cipher suite can encipher.",
                        "label": "client_renegotiation",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "emqx_schema.trace": {
                "properties": {
                    "payload_encode": {
                        "default": "text",
                        "description": "Determine the format of the payload format in the trace file.<br>\n`text`: Text-based protocol or plain text protocol.\n It is recommended when payload is JSON encoded.<br>\n`hex`: Binary hexadecimal encode. It is recommended when payload is a custom binary protocol.<br>\n`hidden`: payload is obfuscated as `******`\n",
                        "label": "payload_encode",
                        "symbols": [
                            "hex",
                            "text",
                            "hidden"
                        ],
                        "type": "enum"
                    }
                },
                "type": "object"
            },
            "emqx_schema.deflate_opts": {
                "properties": {
                    "level": {
                        "description": "Compression level.",
                        "label": "level",
                        "symbols": [
                            "none",
                            "default",
                            "best_compression",
                            "best_speed"
                        ],
                        "type": "enum"
                    },
                    "mem_level": {
                        "default": 8,
                        "description": "Specifies the size of the compression state.<br/>\n Lower values decrease memory usage per connection.",
                        "label": "mem_level",
                        "maximum": 9,
                        "minimum": 1,
                        "type": "number"
                    },
                    "strategy": {
                        "description": "Specifies the compression strategy.",
                        "label": "strategy",
                        "symbols": [
                            "default",
                            "filtered",
                            "huffman_only",
                            "rle"
                        ],
                        "type": "enum"
                    },
                    "server_context_takeover": {
                        "description": "Takeover means the compression state is retained\n between server messages.",
                        "label": "server_context_takeover",
                        "symbols": [
                            "takeover",
                            "no_takeover"
                        ],
                        "type": "enum"
                    },
                    "client_context_takeover": {
                        "description": "Takeover means the compression state is retained\n between client messages.",
                        "label": "client_context_takeover",
                        "symbols": [
                            "takeover",
                            "no_takeover"
                        ],
                        "type": "enum"
                    },
                    "server_max_window_bits": {
                        "default": 15,
                        "description": "Specifies the size of the compression context for the server.",
                        "label": "server_max_window_bits",
                        "maximum": 15,
                        "minimum": 8,
                        "type": "number"
                    },
                    "client_max_window_bits": {
                        "default": 15,
                        "description": "Specifies the size of the compression context for the client.",
                        "label": "client_max_window_bits",
                        "maximum": 15,
                        "minimum": 8,
                        "type": "number"
                    }
                },
                "type": "object"
            },
            "emqx_conf_schema.log_burst_limit": {
                "properties": {
                    "enable": {
                        "default": true,
                        "description": "启用日志突发控制功能。",
                        "label": "启用日志突发控制",
                        "type": "boolean"
                    },
                    "max_count": {
                        "default": 10000,
                        "description": "在 `window_time` 间隔内处理的最大日志事件数。 达到限制后，将丢弃连续事件，直到 `window_time` 结束。",
                        "label": "日志事件数",
                        "type": "number"
                    },
                    "window_time": {
                        "default": "1s",
                        "description": "参考 `max_count`。",
                        "label": "Window Time",
                        "type": "duration"
                    }
                },
                "type": "object"
            },
            "emqx_conf_schema.cluster": {
                "properties": {
                    "name": {
                        "default": "emqxcl",
                        "description": "EMQX集群名称。每个集群都有一个唯一的名称。服务发现时会用于做路径的一部分。",
                        "label": "集群名称",
                        "readOnly": true,
                        "type": "string"
                    },
                    "discovery_strategy": {
                        "default": "manual",
                        "description": "集群节点发现方式。可选值为:\n- manual: 手动加入集群<\\br>\n- static: 配置静态节点。配置几个固定的节点，新节点通过连接固定节点中的某一个来加入集群。<\\br>\n- mcast: 使用 UDP 多播的方式发现节点。<\\br>\n- dns: 使用 DNS A 记录的方式发现节点。<\\br>\n- etcd: 使用 etcd 发现节点。<\\br>\n- k8s: 使用 Kubernetes 发现节点。<\\br>\n           ",
                        "label": "集群服务发现策略",
                        "readOnly": true,
                        "symbols": [
                            "manual",
                            "static",
                            "mcast",
                            "dns",
                            "etcd",
                            "k8s"
                        ],
                        "type": "enum"
                    },
                    "autoclean": {
                        "default": "5m",
                        "description": "指定多久之后从集群中删除离线节点。",
                        "label": "自动删除离线节点时间",
                        "readOnly": true,
                        "type": "duration"
                    },
                    "autoheal": {
                        "default": true,
                        "description": "集群脑裂自动恢复机制开关。",
                        "label": "节点脑裂自动修复机制",
                        "readOnly": true,
                        "type": "boolean"
                    },
                    "proto_dist": {
                        "default": "inet_tcp",
                        "description": "分布式 Erlang 集群协议类型。可选值为:\n- inet_tcp: 使用 IPv4 <\\br>\n- inet6_tcp 使用 IPv6 <\\br>\n- inet_tls: 使用 TLS，需要与 node.ssl_dist_optfile 配置一起使用。<\\br>\n         ",
                        "label": "集群内部通信协议",
                        "readOnly": true,
                        "symbols": [
                            "inet_tcp",
                            "inet6_tcp",
                            "inet_tls"
                        ],
                        "type": "enum"
                    },
                    "static": {
                        "description": "static Description",
                        "label": "static",
                        "$ref": "#/components/schemas/emqx_conf_schema.cluster_static"
                    },
                    "mcast": {
                        "description": "mcast Description",
                        "label": "mcast",
                        "$ref": "#/components/schemas/emqx_conf_schema.cluster_mcast"
                    },
                    "dns": {
                        "description": "dns Description",
                        "label": "dns",
                        "$ref": "#/components/schemas/emqx_conf_schema.cluster_dns"
                    },
                    "etcd": {
                        "description": "etcd Description",
                        "label": "etcd",
                        "$ref": "#/components/schemas/emqx_conf_schema.cluster_etcd"
                    },
                    "k8s": {
                        "description": "k8s Description",
                        "label": "k8s",
                        "$ref": "#/components/schemas/emqx_conf_schema.cluster_k8s"
                    }
                },
                "type": "object"
            },
            "emqx_schema.sysmon_os": {
                "properties": {
                    "cpu_check_interval": {
                        "default": "60s",
                        "description": "定期 CPU 检查的时间间隔。",
                        "label": "定期 CPU 检查的时间间隔",
                        "type": "duration"
                    },
                    "cpu_high_watermark": {
                        "default": "80%",
                        "description": "在发出相应警报之前可以使用多少系统 CPU 的阈值，以系统CPU负载的百分比表示。",
                        "label": "CPU 高水位线",
                        "type": "percent"
                    },
                    "cpu_low_watermark": {
                        "default": "60%",
                        "description": "在解除相应警报之前可以使用多少系统 CPU 的阈值，以系统CPU负载的百分比表示。",
                        "label": "CPU 低水位线",
                        "type": "percent"
                    },
                    "mem_check_interval": {
                        "default": "60s",
                        "description": "定期内存检查的时间间隔。",
                        "label": "内存检查间隔",
                        "oneOf": [
                            {
                                "type": "duration"
                            },
                            {
                                "symbols": [
                                    "disabled"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "sysmem_high_watermark": {
                        "default": "70%",
                        "description": "在发出相应报警之前可以分配多少系统内存的阈值，以系统内存的百分比表示。",
                        "label": "系统内存高水位线",
                        "type": "percent"
                    },
                    "procmem_high_watermark": {
                        "default": "5%",
                        "description": "在发出相应警报之前，一个Erlang进程可以分配多少系统内存的阈值，以系统内存的百分比表示。",
                        "label": "进程内存高水位线",
                        "type": "percent"
                    }
                },
                "type": "object"
            },
            "emqx_conf_schema.log": {
                "properties": {
                    "console_handler": {
                        "description": "console_handler Description",
                        "label": "console_handler",
                        "$ref": "#/components/schemas/emqx_conf_schema.console_handler"
                    },
                    "file_handlers": {
                        "description": "基于文件的日志处理进程的键值列表。",
                        "label": "日志处理进程键值列表",
                        "properties": {
                            "$name": {
                                "$ref": "#/components/schemas/emqx_conf_schema.log_file_handler"
                            }
                        },
                        "type": "object"
                    },
                    "error_logger": {
                        "default": "silent",
                        "description": "该配置已弃用。",
                        "label": "配置已弃用",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "emqx_conf_schema.cluster_k8s": {
                "properties": {
                    "apiserver": {
                        "description": "指定 Kubernetes API Server。如有多个 Server 使用逗号 , 分隔。\n当 cluster.discovery_strategy 为 k8s 时，此配置项才有效。\n          ",
                        "label": "K8s 服务地址",
                        "readOnly": true,
                        "type": "string"
                    },
                    "service_name": {
                        "default": "emqx",
                        "description": "指定 Kubernetes 中 EMQX 的服务名。\n当 cluster.discovery_strategy 为 k8s 时，此配置项才有效。\n          ",
                        "label": "K8s 服务别名",
                        "readOnly": true,
                        "type": "string"
                    },
                    "address_type": {
                        "description": "当使用 k8s 方式集群时，address_type 用来从 Kubernetes 接口的应答里获取什么形式的 Host 列表。\n指定 cluster.k8s.address_type 为 ip，则将从 Kubernetes 接口中获取 emqx 服务的 IP 地址列表:\n- 172.16.122.31 <\\br>\n- 172.16.122.32 <\\br>\n- 172.16.122.33 <\\br>\n然后与 cluster.k8s.app_name 配置指定的 app name 拼接，得到 emqx 节点列表: <\\br>\n- emqx@172.16.122.31\n- emqx@172.16.122.32\n- emqx@172.16.122.33\n          ",
                        "label": "K8s 地址类型",
                        "readOnly": true,
                        "symbols": [
                            "ip",
                            "dns",
                            "hostname"
                        ],
                        "type": "enum"
                    },
                    "app_name": {
                        "default": "emqx",
                        "description": "app_name 用来跟获取的 Host 列表拼接，得到节点列表。<\\br>\n当 cluster.discovery_strategy 为 k8s 时，此配置项才有效。\n          ",
                        "label": "K8s 节点名前缀",
                        "readOnly": true,
                        "type": "string"
                    },
                    "namespace": {
                        "default": "default",
                        "description": "当使用 k8s 方式并且 cluster.k8s.address_type 指定为 dns 类型时，\n可设置 emqx 节点名的命名空间。与 cluster.k8s.suffix 一起使用用以拼接得到节点名列表。\n      ",
                        "label": "K8s 命名空间",
                        "readOnly": true,
                        "type": "string"
                    },
                    "suffix": {
                        "default": "pod.local",
                        "description": "当使用 k8s 方式并且 cluster.k8s.address_type 指定为 dns 类型时，可设置 emqx 节点名的后缀。\n与 cluster.k8s.namespace 一起使用用以拼接得到节点名列表。\n          ",
                        "label": "K8s 前缀",
                        "readOnly": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "emqx_schema.mqtt_ssl_listener": {
                "required": [
                    "bind"
                ],
                "properties": {
                    "tcp": {
                        "description": "tcp Description",
                        "label": "tcp",
                        "$ref": "#/components/schemas/emqx_schema.tcp_opts"
                    },
                    "ssl": {
                        "description": "ssl Description",
                        "label": "ssl",
                        "$ref": "#/components/schemas/emqx_schema.listener_ssl_opts"
                    },
                    "bind": {
                        "description": "IP address and port for the listening socket.",
                        "label": "bind",
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "ip_port"
                            }
                        ]
                    },
                    "acceptors": {
                        "default": 16,
                        "description": "The size of the listener's receiving pool.",
                        "label": "acceptors",
                        "type": "number"
                    },
                    "max_connections": {
                        "default": "infinity",
                        "description": "The maximum number of concurrent connections allowed by the listener.",
                        "label": "max_connections",
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "mountpoint": {
                        "default": "",
                        "description": "When publishing or subscribing, prefix all topics with a mountpoint string.\n The prefixed string will be removed from the topic name when the message\n is delivered to the subscriber. The mountpoint is a way that users can use\n to implement isolation of message routing between different listeners.\n For example if a client A subscribes to `t` with `listeners.tcp.<name>.mountpoint`\n set to `some_tenant`, then the client actually subscribes to the topic\n `some_tenant/t`. Similarly, if another client B (connected to the same listener\n as the client A) sends a message to topic `t`, the message is routed\n to all the clients subscribed `some_tenant/t`, so client A will receive the\n message, with topic name `t`.<br/>\n Set to `\"\"` to disable the feature.<br/>\n\n Variables in mountpoint string:\n - <code>${clientid}</code>: clientid\n - <code>${username}</code>: username",
                        "label": "mountpoint",
                        "type": "string"
                    },
                    "zone": {
                        "default": "default",
                        "description": "The configuration zone to which the listener belongs.",
                        "label": "zone",
                        "type": "string"
                    },
                    "limiter": {
                        "default": {},
                        "description": "Type of the rate limit.",
                        "label": "limiter",
                        "properties": {
                            "$ratelimit's type": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "access_rules": {
                        "default": [
                            "allow all"
                        ],
                        "description": "The access control rules for this listener.<br/>See: https://github.com/emqtt/esockd#allowdeny",
                        "items": {
                            "type": "string"
                        },
                        "label": "access_rules",
                        "type": "array"
                    },
                    "proxy_protocol": {
                        "default": false,
                        "description": "Enable the Proxy Protocol V1/2 if the EMQX cluster is deployed\n behind HAProxy or Nginx.<br/>See: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
                        "label": "proxy_protocol",
                        "type": "boolean"
                    },
                    "proxy_protocol_timeout": {
                        "default": "3s",
                        "description": "Timeout for proxy protocol. EMQX will close the TCP connection if proxy protocol packet is not received within the timeout.",
                        "label": "proxy_protocol_timeout",
                        "type": "duration"
                    },
                    "authentication": {
                        "description": "Per-listener authentication override\nAuthentication can be one single authenticator instance or a chain of authenticators as an array.\nWhen authenticating a login (username, client ID, etc.) the authenticators are checked in the configured order.<br>\n",
                        "items": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/authn-scram-builtin_db.authentication"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-jwt.jwks"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-jwt.public-key"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-jwt.hmac-based"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-http.post"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-http.get"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-redis.sentinel"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-redis.cluster"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-redis.standalone"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-mongodb.sharded-cluster"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-mongodb.replica-set"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-mongodb.standalone"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-postgresql.authentication"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-mysql.authentication"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-builtin_db.authentication"
                                }
                            ]
                        },
                        "label": "authentication",
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "emqx_conf_schema.console_handler": {
                "properties": {
                    "enable": {
                        "default": false,
                        "description": "启用此日志处理进程。",
                        "label": "启用此日志处理进程",
                        "type": "boolean"
                    },
                    "level": {
                        "default": "warning",
                        "description": "全局日志级别。 这包括主日志级别和所有日志处理进程。",
                        "label": "全局日志级别",
                        "symbols": [
                            "debug",
                            "info",
                            "notice",
                            "warning",
                            "error",
                            "critical",
                            "alert",
                            "emergency",
                            "all"
                        ],
                        "type": "enum"
                    },
                    "time_offset": {
                        "default": "system",
                        "description": "格式化时间戳时要使用的时间偏移量。",
                        "label": "时间偏移",
                        "type": "string"
                    },
                    "chars_limit": {
                        "default": "unlimited",
                        "description": "设置单个日志消息的最大长度。 如果超过此长度，则日志消息将被截断。",
                        "label": "单个日志消息最大长度",
                        "oneOf": [
                            {
                                "minimum": 1,
                                "type": "number"
                            },
                            {
                                "symbols": [
                                    "unlimited"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "formatter": {
                        "default": "text",
                        "description": "选择日志格式。 <code>text</code> 用于自由文本，<code>json</code> 用于结构化日志记录。",
                        "label": "日志格式",
                        "symbols": [
                            "text",
                            "json"
                        ],
                        "type": "enum"
                    },
                    "single_line": {
                        "default": true,
                        "description": "如果设置为 true，则在一行中打印日志。 否则，日志消息可能跨越多行。",
                        "label": "单行模式",
                        "type": "boolean"
                    },
                    "sync_mode_qlen": {
                        "default": 100,
                        "description": "只要缓冲的日志事件的数量低于这个值，所有的日志事件都会被异步处理。",
                        "label": "异步模式最大事件数",
                        "type": "number"
                    },
                    "drop_mode_qlen": {
                        "default": 3000,
                        "description": "当缓冲的日志事件数大于此值时，新的日志事件将被丢弃。<br/>启用或停用丢弃模式时，会在日志中打印一条消息。",
                        "label": "缓存最大日志事件数",
                        "type": "number"
                    },
                    "flush_qlen": {
                        "default": 8000,
                        "description": "如果缓冲日志事件的数量增长大于此阈值，则会发生刷新（删除）操作。 为了完成刷新事件，处理进程丢弃缓冲的日志消息。",
                        "label": "刷新阈值",
                        "type": "number"
                    },
                    "overload_kill": {
                        "description": "overload_kill Description",
                        "label": "overload_kill",
                        "$ref": "#/components/schemas/emqx_conf_schema.log_overload_kill"
                    },
                    "burst_limit": {
                        "description": "burst_limit Description",
                        "label": "burst_limit",
                        "$ref": "#/components/schemas/emqx_conf_schema.log_burst_limit"
                    },
                    "supervisor_reports": {
                        "default": "error",
                        "description": " supervisor 报告的类型。\n  - `error`：仅记录 Erlang 进程中的错误。\n  - `progress`：记录进程启动。",
                        "label": "报告类型",
                        "symbols": [
                            "error",
                            "progress"
                        ],
                        "type": "enum"
                    },
                    "max_depth": {
                        "default": 100,
                        "description": "Erlang 内部格式日志格式化和 Erlang 进程消息队列检查的最大深度。",
                        "label": "最大深度",
                        "oneOf": [
                            {
                                "minimum": 1,
                                "type": "number"
                            },
                            {
                                "symbols": [
                                    "unlimited"
                                ],
                                "type": "enum"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "authn-hash.bcrypt_rw": {
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "BCRYPT password hashing.",
                        "label": "name",
                        "symbols": [
                            "bcrypt"
                        ],
                        "type": "enum"
                    },
                    "salt_rounds": {
                        "default": 10,
                        "description": "Salt rounds for BCRYPT password generation.",
                        "example": 10,
                        "label": "salt_rounds",
                        "type": "number"
                    }
                },
                "type": "object"
            },
            "authn-http.post": {
                "required": [
                    "url",
                    "backend",
                    "mechanism",
                    "method"
                ],
                "properties": {
                    "method": {
                        "default": "post",
                        "description": "HTTP method.",
                        "label": "method",
                        "symbols": [
                            "post"
                        ],
                        "type": "enum"
                    },
                    "headers": {
                        "default": {
                            "accept": "application/json",
                            "cache-control": "no-cache",
                            "connection": "keep-alive",
                            "content-type": "application/json",
                            "keep-alive": "timeout=30, max=1000"
                        },
                        "description": "List of HTTP headers.",
                        "label": "headers",
                        "type": "string"
                    },
                    "mechanism": {
                        "description": "Authentication mechanism.",
                        "label": "mechanism",
                        "symbols": [
                            "password_based"
                        ],
                        "type": "enum"
                    },
                    "backend": {
                        "description": "Backend type.",
                        "label": "backend",
                        "symbols": [
                            "http"
                        ],
                        "type": "enum"
                    },
                    "url": {
                        "description": "URL of the auth server.",
                        "label": "url",
                        "type": "string"
                    },
                    "body": {
                        "description": "Body of the HTTP request.",
                        "label": "body",
                        "type": "string"
                    },
                    "request_timeout": {
                        "default": "5s",
                        "description": "HTTP request timeout",
                        "label": "request_timeout",
                        "type": "duration"
                    },
                    "enable": {
                        "default": true,
                        "description": "Set to <code>false</code> to disable this auth provider",
                        "label": "enable",
                        "type": "boolean"
                    },
                    "connect_timeout": {
                        "default": "15s",
                        "description": "连接HTTP服务器的超时时间。",
                        "label": "连接超时",
                        "type": "duration"
                    },
                    "enable_pipelining": {
                        "default": true,
                        "description": "允许HTTP管道。",
                        "label": "HTTP管道",
                        "type": "boolean"
                    },
                    "max_retries": {
                        "default": 5,
                        "description": "请求出错时的最大重试次数。",
                        "label": "最大重试次数",
                        "minimum": 1,
                        "type": "number"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "连接池大小。",
                        "label": "连接池大小",
                        "type": "string"
                    },
                    "request": {
                        "description": "\n如果提供了请求，调用者可以通过以下方式发送 HTTP 请求\n<code>emqx_resource:query(ResourceId, {send_message, BridgeId, Message})</code>\n",
                        "label": "HTTP 请求",
                        "$ref": "#/components/schemas/connector-http.request"
                    },
                    "retry_interval": {
                        "default": "1s",
                        "description": "重试之间的间隔时间。",
                        "label": "重试间隔",
                        "type": "duration"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "启用 SSL 连接。",
                        "label": "启用SSL",
                        "$ref": "#/components/schemas/emqx_schema.ssl_client_opts"
                    }
                },
                "type": "object"
            },
            "emqx_schema.sysmon_vm": {
                "properties": {
                    "process_check_interval": {
                        "default": "30s",
                        "description": "定期进程限制检查的时间间隔。",
                        "label": "进程限制检查时间",
                        "type": "duration"
                    },
                    "process_high_watermark": {
                        "default": "80%",
                        "description": "在发出相应警报之前，本地节点上可以同时存在多少进程的阈值（以进程百分比表示）。",
                        "label": "进程数高水位线",
                        "type": "percent"
                    },
                    "process_low_watermark": {
                        "default": "60%",
                        "description": "在清除相应警报之前，本地节点上可以同时存在多少进程的阈值（以进程百分比表示）。",
                        "label": "进程数低水位线",
                        "type": "percent"
                    },
                    "long_gc": {
                        "description": "启用长垃圾回收监控",
                        "label": "启用长垃圾回收监控",
                        "oneOf": [
                            {
                                "type": "duration"
                            },
                            {
                                "symbols": [
                                    "disabled"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "long_schedule": {
                        "default": "240ms",
                        "description": "启用长调度监控",
                        "label": "启用长调度监控",
                        "oneOf": [
                            {
                                "type": "duration"
                            },
                            {
                                "symbols": [
                                    "disabled"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "large_heap": {
                        "default": "32MB",
                        "description": "启用大 heap 监控",
                        "label": "启用大 heap 监控",
                        "oneOf": [
                            {
                                "type": "byteSize"
                            },
                            {
                                "symbols": [
                                    "disabled"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "busy_dist_port": {
                        "default": true,
                        "description": "启用分布式端口过忙监控",
                        "label": "启用分布式端口过忙监控",
                        "type": "boolean"
                    },
                    "busy_port": {
                        "default": true,
                        "description": "启用端口过忙监控",
                        "label": "启用端口过忙监控",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "zone.force_gc": {
                "properties": {
                    "enable": {
                        "description": "启用强制垃圾回收",
                        "label": "启用强制垃圾回收",
                        "type": "boolean"
                    },
                    "count": {
                        "description": "在进程收到多少消息之后，对此进程执行垃圾回收",
                        "label": "垃圾回收消息数",
                        "minimum": 0,
                        "type": "number"
                    },
                    "bytes": {
                        "description": "在进程处理过多少个字节之后，对此进程执行垃圾回收",
                        "label": "垃圾回收字节数",
                        "type": "byteSize"
                    }
                },
                "type": "object"
            },
            "emqx_conf_schema.cluster_dns": {
                "properties": {
                    "name": {
                        "default": "localhost",
                        "description": "指定 DNS A 记录的名字。emqx 会通过访问这个 DNS A 记录来获取 IP 地址列表，\n然后拼接 cluster.dns.app 里指定的 APP 名得到集群中所有节点的列表。\n当 cluster.discovery_strategy 为 dns 时，此配置项才有效。\n          ",
                        "label": "DNS名称",
                        "readOnly": true,
                        "type": "string"
                    },
                    "app": {
                        "default": "emqx",
                        "description": "用来与从 cluster.dns.name 获取的 IP 列表拼接得到节点名列表。\n当 cluster.discovery_strategy 为 dns 时，此配置项才有效。\n         ",
                        "label": "DNS前缀标识",
                        "readOnly": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "emqx_connector_mongo.topology": {
                "properties": {
                    "pool_size": {
                        "default": 8,
                        "description": "连接池大小。",
                        "label": "连接池大小",
                        "type": "string"
                    },
                    "max_overflow": {
                        "default": 0,
                        "description": "最大溢出。",
                        "label": "最大溢出",
                        "minimum": 1,
                        "type": "number"
                    },
                    "overflow_ttl": {
                        "description": "时间间隔，例如超时或 TTL。",
                        "label": "时间间隔",
                        "type": "duration"
                    },
                    "overflow_check_period": {
                        "description": "时间间隔，例如超时或 TTL。",
                        "label": "时间间隔",
                        "type": "duration"
                    },
                    "local_threshold_ms": {
                        "description": "时间间隔，例如超时或 TTL。",
                        "label": "时间间隔",
                        "type": "duration"
                    },
                    "connect_timeout_ms": {
                        "description": "时间间隔，例如超时或 TTL。",
                        "label": "时间间隔",
                        "type": "duration"
                    },
                    "socket_timeout_ms": {
                        "description": "时间间隔，例如超时或 TTL。",
                        "label": "时间间隔",
                        "type": "duration"
                    },
                    "server_selection_timeout_ms": {
                        "description": "时间间隔，例如超时或 TTL。",
                        "label": "时间间隔",
                        "type": "duration"
                    },
                    "wait_queue_timeout_ms": {
                        "description": "时间间隔，例如超时或 TTL。",
                        "label": "时间间隔",
                        "type": "duration"
                    },
                    "heartbeat_frequency_ms": {
                        "description": "时间间隔，例如超时或 TTL。",
                        "label": "时间间隔",
                        "type": "duration"
                    },
                    "min_heartbeat_frequency_ms": {
                        "description": "时间间隔，例如超时或 TTL。",
                        "label": "时间间隔",
                        "type": "duration"
                    }
                },
                "type": "object"
            },
            "authn-redis.cluster": {
                "required": [
                    "database",
                    "redis_type",
                    "servers",
                    "cmd",
                    "backend",
                    "mechanism"
                ],
                "properties": {
                    "mechanism": {
                        "description": "Authentication mechanism.",
                        "label": "mechanism",
                        "symbols": [
                            "password_based"
                        ],
                        "type": "enum"
                    },
                    "backend": {
                        "description": "Backend type.",
                        "label": "backend",
                        "symbols": [
                            "redis"
                        ],
                        "type": "enum"
                    },
                    "cmd": {
                        "description": "Redis query.",
                        "label": "cmd",
                        "type": "string"
                    },
                    "password_hash_algorithm": {
                        "default": {
                            "name": "sha256",
                            "salt_position": "prefix"
                        },
                        "description": "Options for password hash verification.",
                        "label": "password_hash_algorithm",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/authn-hash.other_algorithms"
                            },
                            {
                                "$ref": "#/components/schemas/authn-hash.pbkdf2"
                            },
                            {
                                "$ref": "#/components/schemas/authn-hash.bcrypt"
                            }
                        ]
                    },
                    "enable": {
                        "default": true,
                        "description": "Set to <code>false</code> to disable this auth provider",
                        "label": "enable",
                        "type": "boolean"
                    },
                    "servers": {
                        "description": "\n\n集群将要连接的节点列表。 节点之间用逗号分隔，如：`Node[,Node].<br/>`\n每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。<br/>\n主机名具有以下形式：`Host[:Port]`。<br/>\n如果未指定 `[:Port]`，则使用 Redis 默认端口 6379。\n",
                        "items": {
                            "type": "string"
                        },
                        "label": "服务器列表",
                        "type": "array"
                    },
                    "redis_type": {
                        "default": "cluster",
                        "description": "集群模式。",
                        "label": "集群模式",
                        "symbols": [
                            "cluster"
                        ],
                        "type": "enum"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "连接池大小。",
                        "label": "连接池大小",
                        "type": "string"
                    },
                    "password": {
                        "description": "内部数据库密码。",
                        "label": "密码",
                        "type": "string"
                    },
                    "database": {
                        "default": 0,
                        "description": "Redis 数据库 ID。",
                        "label": "数据库 ID",
                        "type": "number"
                    },
                    "auto_reconnect": {
                        "default": true,
                        "description": "自动重连数据库。",
                        "label": "自动重连数据库",
                        "type": "boolean"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "启用 SSL 连接。",
                        "label": "启用SSL",
                        "$ref": "#/components/schemas/emqx_schema.ssl_client_opts"
                    }
                },
                "type": "object"
            },
            "emqx_schema.ws_opts": {
                "properties": {
                    "mqtt_path": {
                        "default": "/mqtt",
                        "description": "WebSocket's MQTT protocol path. So the address of\n EMQX Broker's WebSocket is: <code>ws://{ip}:{port}/mqtt</code>",
                        "label": "mqtt_path",
                        "type": "string"
                    },
                    "mqtt_piggyback": {
                        "default": "multiple",
                        "description": "Whether a WebSocket message is allowed to contain multiple MQTT packets.",
                        "label": "mqtt_piggyback",
                        "symbols": [
                            "single",
                            "multiple"
                        ],
                        "type": "enum"
                    },
                    "compress": {
                        "default": false,
                        "description": "If <code>true</code>, compress WebSocket messages using <code>zlib</code>.<br/>\nThe configuration items under <code>deflate_opts</code> belong to the compression-related parameter configuration.",
                        "label": "compress",
                        "type": "boolean"
                    },
                    "idle_timeout": {
                        "default": "15s",
                        "description": "Close transport-layer connections from the clients that have not sent MQTT CONNECT\nmessage within this interval.",
                        "label": "idle_timeout",
                        "type": "duration"
                    },
                    "max_frame_size": {
                        "default": "infinity",
                        "description": "The maximum length of a single MQTT packet.",
                        "label": "max_frame_size",
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "fail_if_no_subprotocol": {
                        "default": true,
                        "description": "If <code>true</code>, the server will return an error when\n the client does not carry the <code>Sec-WebSocket-Protocol</code> field.\n <br/>Note: WeChat applet needs to disable this verification.",
                        "label": "fail_if_no_subprotocol",
                        "type": "boolean"
                    },
                    "supported_subprotocols": {
                        "default": "mqtt, mqtt-v3, mqtt-v3.1.1, mqtt-v5",
                        "description": "Comma-separated list of supported subprotocols.",
                        "label": "supported_subprotocols",
                        "type": "comma_separated_string"
                    },
                    "check_origin_enable": {
                        "default": false,
                        "description": "If <code>true</code>, <code>origin</code> HTTP header will be\n validated against the list of allowed origins configured in <code>check_origins</code>\n parameter.",
                        "label": "check_origin_enable",
                        "type": "boolean"
                    },
                    "allow_origin_absence": {
                        "default": true,
                        "description": "If <code>false</code> and <code>check_origin_enable</code> is\n <code>true</code>, the server will reject requests that don't have <code>origin</code>\n HTTP header.",
                        "label": "allow_origin_absence",
                        "type": "boolean"
                    },
                    "check_origins": {
                        "default": "",
                        "description": "List of allowed origins.<br/>See <code>check_origin_enable</code>.",
                        "items": {
                            "type": "string"
                        },
                        "label": "check_origins",
                        "type": "array"
                    },
                    "proxy_address_header": {
                        "default": "x-forwarded-for",
                        "description": "HTTP header used to pass information about the client IP address.\n Relevant when the EMQX cluster is deployed behind a load-balancer.",
                        "label": "proxy_address_header",
                        "type": "string"
                    },
                    "proxy_port_header": {
                        "default": "x-forwarded-port",
                        "description": "HTTP header used to pass information about the client port.\n Relevant when the EMQX cluster is deployed behind a load-balancer.",
                        "label": "proxy_port_header",
                        "type": "string"
                    },
                    "deflate_opts": {
                        "description": "deflate_opts Description",
                        "label": "deflate_opts",
                        "$ref": "#/components/schemas/emqx_schema.deflate_opts"
                    }
                },
                "type": "object"
            },
            "emqx_conf_schema.log_file_handler": {
                "properties": {
                    "file": {
                        "description": "日志文件名字。",
                        "label": "日志文件名字",
                        "type": "string"
                    },
                    "rotation": {
                        "description": "rotation Description",
                        "label": "rotation",
                        "$ref": "#/components/schemas/emqx_conf_schema.log_rotation"
                    },
                    "max_size": {
                        "default": "10MB",
                        "description": "此参数控制日志文件轮换。 `infinity` 意味着日志文件将无限增长，否则日志文件将在达到 `max_size`（以字节为单位）时进行轮换。",
                        "label": "日志文件轮换大小",
                        "oneOf": [
                            {
                                "type": "byteSize"
                            },
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "enable": {
                        "default": false,
                        "description": "启用此日志处理进程。",
                        "label": "启用此日志处理进程",
                        "type": "boolean"
                    },
                    "level": {
                        "default": "warning",
                        "description": "全局日志级别。 这包括主日志级别和所有日志处理进程。",
                        "label": "全局日志级别",
                        "symbols": [
                            "debug",
                            "info",
                            "notice",
                            "warning",
                            "error",
                            "critical",
                            "alert",
                            "emergency",
                            "all"
                        ],
                        "type": "enum"
                    },
                    "time_offset": {
                        "default": "system",
                        "description": "格式化时间戳时要使用的时间偏移量。",
                        "label": "时间偏移",
                        "type": "string"
                    },
                    "chars_limit": {
                        "default": "unlimited",
                        "description": "设置单个日志消息的最大长度。 如果超过此长度，则日志消息将被截断。",
                        "label": "单个日志消息最大长度",
                        "oneOf": [
                            {
                                "minimum": 1,
                                "type": "number"
                            },
                            {
                                "symbols": [
                                    "unlimited"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "formatter": {
                        "default": "text",
                        "description": "选择日志格式。 <code>text</code> 用于自由文本，<code>json</code> 用于结构化日志记录。",
                        "label": "日志格式",
                        "symbols": [
                            "text",
                            "json"
                        ],
                        "type": "enum"
                    },
                    "single_line": {
                        "default": true,
                        "description": "如果设置为 true，则在一行中打印日志。 否则，日志消息可能跨越多行。",
                        "label": "单行模式",
                        "type": "boolean"
                    },
                    "sync_mode_qlen": {
                        "default": 100,
                        "description": "只要缓冲的日志事件的数量低于这个值，所有的日志事件都会被异步处理。",
                        "label": "异步模式最大事件数",
                        "type": "number"
                    },
                    "drop_mode_qlen": {
                        "default": 3000,
                        "description": "当缓冲的日志事件数大于此值时，新的日志事件将被丢弃。<br/>启用或停用丢弃模式时，会在日志中打印一条消息。",
                        "label": "缓存最大日志事件数",
                        "type": "number"
                    },
                    "flush_qlen": {
                        "default": 8000,
                        "description": "如果缓冲日志事件的数量增长大于此阈值，则会发生刷新（删除）操作。 为了完成刷新事件，处理进程丢弃缓冲的日志消息。",
                        "label": "刷新阈值",
                        "type": "number"
                    },
                    "overload_kill": {
                        "description": "overload_kill Description",
                        "label": "overload_kill",
                        "$ref": "#/components/schemas/emqx_conf_schema.log_overload_kill"
                    },
                    "burst_limit": {
                        "description": "burst_limit Description",
                        "label": "burst_limit",
                        "$ref": "#/components/schemas/emqx_conf_schema.log_burst_limit"
                    },
                    "supervisor_reports": {
                        "default": "error",
                        "description": " supervisor 报告的类型。\n  - `error`：仅记录 Erlang 进程中的错误。\n  - `progress`：记录进程启动。",
                        "label": "报告类型",
                        "symbols": [
                            "error",
                            "progress"
                        ],
                        "type": "enum"
                    },
                    "max_depth": {
                        "default": 100,
                        "description": "Erlang 内部格式日志格式化和 Erlang 进程消息队列检查的最大深度。",
                        "label": "最大深度",
                        "oneOf": [
                            {
                                "minimum": 1,
                                "type": "number"
                            },
                            {
                                "symbols": [
                                    "unlimited"
                                ],
                                "type": "enum"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "authn-jwt.hmac-based": {
                "required": [
                    "mechanism",
                    "secret",
                    "algorithm",
                    "use_jwks"
                ],
                "properties": {
                    "use_jwks": {
                        "description": "",
                        "label": "use_jwks",
                        "symbols": [
                            false
                        ],
                        "type": "enum"
                    },
                    "algorithm": {
                        "description": "Signing algorithm.",
                        "label": "algorithm",
                        "symbols": [
                            "hmac-based"
                        ],
                        "type": "enum"
                    },
                    "secret": {
                        "description": "The key to verify the JWT Token using HMAC algorithm.",
                        "label": "secret",
                        "type": "string"
                    },
                    "secret_base64_encoded": {
                        "default": false,
                        "description": "Enable/disable base64 encoding of the secret.",
                        "label": "secret_base64_encoded",
                        "type": "boolean"
                    },
                    "mechanism": {
                        "description": "Authentication mechanism.",
                        "label": "mechanism",
                        "symbols": [
                            "jwt"
                        ],
                        "type": "enum"
                    },
                    "verify_claims": {
                        "default": {},
                        "description": "The list of claims to verify.",
                        "items": {
                            "type": "string"
                        },
                        "label": "verify_claims",
                        "type": "array"
                    },
                    "enable": {
                        "default": true,
                        "description": "Set to <code>false</code> to disable this auth provider",
                        "label": "enable",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "zone.flapping_detect": {
                "properties": {
                    "enable": {
                        "description": "启用抖动检测功能",
                        "label": "启用抖动检测",
                        "type": "boolean"
                    },
                    "max_count": {
                        "description": "MQTT 客户端在\"窗口\"时间内允许的最大断开次数",
                        "label": "最大断开次数",
                        "type": "number"
                    },
                    "window_time": {
                        "description": "抖动检测的时间窗口。",
                        "label": "时间窗口",
                        "type": "duration"
                    },
                    "ban_time": {
                        "description": "抖动的客户端将会被禁止登陆多长时间",
                        "label": "禁止登陆时长",
                        "type": "duration"
                    }
                },
                "type": "object"
            },
            "zone.stats": {
                "properties": {
                    "enable": {
                        "description": "启用/禁用统计数据收集功能",
                        "label": "启用/禁用统计数据收集功能",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "authn-mongodb.replica-set": {
                "required": [
                    "database",
                    "replica_set_name",
                    "servers",
                    "mongo_type",
                    "collection",
                    "backend",
                    "mechanism"
                ],
                "properties": {
                    "mechanism": {
                        "description": "Authentication mechanism.",
                        "label": "mechanism",
                        "symbols": [
                            "password_based"
                        ],
                        "type": "enum"
                    },
                    "backend": {
                        "description": "Backend type.",
                        "label": "backend",
                        "symbols": [
                            "mongodb"
                        ],
                        "type": "enum"
                    },
                    "collection": {
                        "description": "Collection used to store authentication data.",
                        "label": "collection",
                        "type": "string"
                    },
                    "selector": {
                        "description": "Statement that is executed during the authentication process. Commands can support following wildcards:\n - `${username}`: substituted with client's username\n - `${clientid}`: substituted with the clientid",
                        "label": "selector",
                        "type": "string"
                    },
                    "password_hash_field": {
                        "description": "Document field that contains password hash.",
                        "label": "password_hash_field",
                        "type": "string"
                    },
                    "salt_field": {
                        "description": "Document field that contains the password salt.",
                        "label": "salt_field",
                        "type": "string"
                    },
                    "is_superuser_field": {
                        "description": "Document field that defines if the user has superuser privileges.",
                        "label": "is_superuser_field",
                        "type": "string"
                    },
                    "password_hash_algorithm": {
                        "default": {
                            "name": "sha256",
                            "salt_position": "prefix"
                        },
                        "description": "Options for password hash verification.",
                        "label": "password_hash_algorithm",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/authn-hash.other_algorithms"
                            },
                            {
                                "$ref": "#/components/schemas/authn-hash.pbkdf2"
                            },
                            {
                                "$ref": "#/components/schemas/authn-hash.bcrypt"
                            }
                        ]
                    },
                    "enable": {
                        "default": true,
                        "description": "Set to <code>false</code> to disable this auth provider",
                        "label": "enable",
                        "type": "boolean"
                    },
                    "mongo_type": {
                        "default": "rs",
                        "description": "Replica set模式。",
                        "label": "Replica set模式",
                        "symbols": [
                            "rs"
                        ],
                        "type": "enum"
                    },
                    "servers": {
                        "description": "\n集群将要连接的节点列表。 节点之间用逗号分隔，如：`Node[,Node].<br/>`\n每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。<br/>\n主机名具有以下形式：`Host[:Port]`。<br/>\n如果未指定 `[:Port]`，则使用 MongoDB 默认端口 27017。\n",
                        "items": {
                            "type": "string"
                        },
                        "label": "服务器列表",
                        "type": "array"
                    },
                    "w_mode": {
                        "default": "unsafe",
                        "description": "写模式。",
                        "label": "写模式",
                        "symbols": [
                            "unsafe",
                            "safe"
                        ],
                        "type": "enum"
                    },
                    "r_mode": {
                        "default": "master",
                        "description": "读模式。",
                        "label": "读模式",
                        "symbols": [
                            "master",
                            "slave_ok"
                        ],
                        "type": "enum"
                    },
                    "replica_set_name": {
                        "description": "副本集的名称。",
                        "label": "副本集名称",
                        "type": "string"
                    },
                    "srv_record": {
                        "default": false,
                        "description": "使用 DNS SRV 记录。",
                        "label": "SRV 记录",
                        "type": "boolean"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "连接池大小。",
                        "label": "连接池大小",
                        "type": "string"
                    },
                    "username": {
                        "description": "内部数据库的用户名。",
                        "label": "用户名",
                        "type": "string"
                    },
                    "password": {
                        "description": "内部数据库密码。",
                        "label": "密码",
                        "type": "string"
                    },
                    "auth_source": {
                        "description": "与用户证书关联的数据库名称。",
                        "label": "认证源",
                        "type": "string"
                    },
                    "database": {
                        "description": "数据库名字。",
                        "label": "数据库名字",
                        "type": "string"
                    },
                    "topology": {
                        "description": "topology Description",
                        "label": "topology",
                        "$ref": "#/components/schemas/emqx_connector_mongo.topology"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "启用 SSL 连接。",
                        "label": "启用SSL",
                        "$ref": "#/components/schemas/emqx_schema.ssl_client_opts"
                    }
                },
                "type": "object"
            },
            "emqx_conf_schema.log_overload_kill": {
                "properties": {
                    "enable": {
                        "default": true,
                        "description": "启用日志处理进程过载终止功能。",
                        "label": "日志处理进程过载终止",
                        "type": "boolean"
                    },
                    "mem_size": {
                        "default": "30MB",
                        "description": "处理进程进程允许使用的最大内存。",
                        "label": "理进程进程允许使用的最大内存",
                        "type": "byteSize"
                    },
                    "qlen": {
                        "default": 20000,
                        "description": "允许的最大队列长度。",
                        "label": "最大队列长度",
                        "type": "number"
                    },
                    "restart_after": {
                        "default": "5s",
                        "description": "如果处理进程终止，它会在以毫秒为单位指定的延迟后自动重新启动。 `infinity` 防止重新启动。",
                        "label": "处理进程重启延迟",
                        "oneOf": [
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            },
                            {
                                "type": "duration"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "emqx_schema.rate_limit": {
                "properties": {
                    "max_conn_rate": {
                        "default": 1000,
                        "description": "Maximum connections per second.",
                        "label": "max_conn_rate",
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "conn_messages_in": {
                        "default": "infinity",
                        "description": "Message limit for the external MQTT connections.",
                        "label": "conn_messages_in",
                        "oneOf": [
                            {
                                "type": "comma_separated_string"
                            },
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "conn_bytes_in": {
                        "default": "infinity",
                        "description": "Limit the rate of receiving packets for a MQTT connection.\nThe rate is counted by bytes of packets per second.",
                        "label": "conn_bytes_in",
                        "oneOf": [
                            {
                                "type": "comma_separated_string"
                            },
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            }
                        ]
                    }
                },
                "type": "object"
            },
            "emqx_schema.sysmon_top": {
                "properties": {
                    "num_items": {
                        "default": 10,
                        "description": "每个监视组的顶级进程数",
                        "label": "顶级进程数",
                        "minimum": 1,
                        "type": "number"
                    },
                    "sample_interval": {
                        "default": "2s",
                        "description": "指定应收集进程顶部的频率",
                        "label": "取样时间",
                        "type": "duration"
                    },
                    "max_procs": {
                        "default": 1000000,
                        "description": "当VM中的进程数超过此值时，停止收集数据",
                        "label": "最大进程数",
                        "minimum": 1,
                        "type": "number"
                    },
                    "db_hostname": {
                        "default": "",
                        "description": "收集数据点的 PostgreSQL 数据库的主机名",
                        "label": "数据库主机名",
                        "type": "string"
                    },
                    "db_port": {
                        "default": 5432,
                        "description": "收集数据点的 PostgreSQL 数据库的端口",
                        "label": "数据库端口",
                        "type": "number"
                    },
                    "db_username": {
                        "default": "system_monitor",
                        "description": "PostgreSQL 数据库的用户名",
                        "label": "数据库用户名",
                        "type": "string"
                    },
                    "db_password": {
                        "default": "system_monitor_password",
                        "description": "PostgreSQL 数据库的密码",
                        "label": "数据库密码",
                        "type": "string"
                    },
                    "db_name": {
                        "default": "postgres",
                        "description": "PostgreSQL 数据库的数据库名",
                        "label": "数据库名",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "authn-redis.standalone": {
                "required": [
                    "database",
                    "redis_type",
                    "server",
                    "cmd",
                    "backend",
                    "mechanism"
                ],
                "properties": {
                    "mechanism": {
                        "description": "Authentication mechanism.",
                        "label": "mechanism",
                        "symbols": [
                            "password_based"
                        ],
                        "type": "enum"
                    },
                    "backend": {
                        "description": "Backend type.",
                        "label": "backend",
                        "symbols": [
                            "redis"
                        ],
                        "type": "enum"
                    },
                    "cmd": {
                        "description": "Redis query.",
                        "label": "cmd",
                        "type": "string"
                    },
                    "password_hash_algorithm": {
                        "default": {
                            "name": "sha256",
                            "salt_position": "prefix"
                        },
                        "description": "Options for password hash verification.",
                        "label": "password_hash_algorithm",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/authn-hash.other_algorithms"
                            },
                            {
                                "$ref": "#/components/schemas/authn-hash.pbkdf2"
                            },
                            {
                                "$ref": "#/components/schemas/authn-hash.bcrypt"
                            }
                        ]
                    },
                    "enable": {
                        "default": true,
                        "description": "Set to <code>false</code> to disable this auth provider",
                        "label": "enable",
                        "type": "boolean"
                    },
                    "server": {
                        "description": "\n将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/>\n主机名具有以下形式：`Host[:Port]`。<br/>\n如果未指定 `[:Port]`，则使用 MongoDB 默认端口 27017。\n",
                        "label": "服务器地址",
                        "type": "ip_port"
                    },
                    "redis_type": {
                        "default": "single",
                        "description": "单机模式。",
                        "label": "单机模式",
                        "symbols": [
                            "single"
                        ],
                        "type": "enum"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "连接池大小。",
                        "label": "连接池大小",
                        "type": "string"
                    },
                    "password": {
                        "description": "内部数据库密码。",
                        "label": "密码",
                        "type": "string"
                    },
                    "database": {
                        "default": 0,
                        "description": "Redis 数据库 ID。",
                        "label": "数据库 ID",
                        "type": "number"
                    },
                    "auto_reconnect": {
                        "default": true,
                        "description": "自动重连数据库。",
                        "label": "自动重连数据库",
                        "type": "boolean"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "启用 SSL 连接。",
                        "label": "启用SSL",
                        "$ref": "#/components/schemas/emqx_schema.ssl_client_opts"
                    }
                },
                "type": "object"
            },
            "authn-jwt.public-key": {
                "required": [
                    "mechanism",
                    "algorithm",
                    "use_jwks"
                ],
                "properties": {
                    "use_jwks": {
                        "description": "",
                        "label": "use_jwks",
                        "symbols": [
                            false
                        ],
                        "type": "enum"
                    },
                    "algorithm": {
                        "description": "Signing algorithm.",
                        "label": "algorithm",
                        "symbols": [
                            "public-key"
                        ],
                        "type": "enum"
                    },
                    "certificate": {
                        "description": "The certificate used for signing the token.",
                        "label": "certificate",
                        "type": "string"
                    },
                    "mechanism": {
                        "description": "Authentication mechanism.",
                        "label": "mechanism",
                        "symbols": [
                            "jwt"
                        ],
                        "type": "enum"
                    },
                    "verify_claims": {
                        "default": {},
                        "description": "The list of claims to verify.",
                        "items": {
                            "type": "string"
                        },
                        "label": "verify_claims",
                        "type": "array"
                    },
                    "enable": {
                        "default": true,
                        "description": "Set to <code>false</code> to disable this auth provider",
                        "label": "enable",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "emqx_conf_schema.cluster_static": {
                "properties": {
                    "seeds": {
                        "default": "",
                        "description": "集群中的EMQX节点名称列表，\n指定固定的节点列表，多个节点间使用逗号 , 分隔。\n当 cluster.discovery_strategy 为 static 时，此配置项才有效。\n适合于节点数量较少且固定的集群。\n          ",
                        "items": {
                            "type": "string"
                        },
                        "label": "集群静态节点",
                        "readOnly": true,
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "authn-redis.sentinel": {
                "required": [
                    "database",
                    "redis_type",
                    "servers",
                    "cmd",
                    "backend",
                    "mechanism"
                ],
                "properties": {
                    "mechanism": {
                        "description": "Authentication mechanism.",
                        "label": "mechanism",
                        "symbols": [
                            "password_based"
                        ],
                        "type": "enum"
                    },
                    "backend": {
                        "description": "Backend type.",
                        "label": "backend",
                        "symbols": [
                            "redis"
                        ],
                        "type": "enum"
                    },
                    "cmd": {
                        "description": "Redis query.",
                        "label": "cmd",
                        "type": "string"
                    },
                    "password_hash_algorithm": {
                        "default": {
                            "name": "sha256",
                            "salt_position": "prefix"
                        },
                        "description": "Options for password hash verification.",
                        "label": "password_hash_algorithm",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/authn-hash.other_algorithms"
                            },
                            {
                                "$ref": "#/components/schemas/authn-hash.pbkdf2"
                            },
                            {
                                "$ref": "#/components/schemas/authn-hash.bcrypt"
                            }
                        ]
                    },
                    "enable": {
                        "default": true,
                        "description": "Set to <code>false</code> to disable this auth provider",
                        "label": "enable",
                        "type": "boolean"
                    },
                    "servers": {
                        "description": "\n\n集群将要连接的节点列表。 节点之间用逗号分隔，如：`Node[,Node].<br/>`\n每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。<br/>\n主机名具有以下形式：`Host[:Port]`。<br/>\n如果未指定 `[:Port]`，则使用 Redis 默认端口 6379。\n",
                        "items": {
                            "type": "string"
                        },
                        "label": "服务器列表",
                        "type": "array"
                    },
                    "redis_type": {
                        "default": "sentinel",
                        "description": "哨兵模式。",
                        "label": "哨兵模式",
                        "symbols": [
                            "sentinel"
                        ],
                        "type": "enum"
                    },
                    "sentinel": {
                        "description": "Redis 哨兵模式下的集群名称。",
                        "label": "集群名称",
                        "type": "string"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "连接池大小。",
                        "label": "连接池大小",
                        "type": "string"
                    },
                    "password": {
                        "description": "内部数据库密码。",
                        "label": "密码",
                        "type": "string"
                    },
                    "database": {
                        "default": 0,
                        "description": "Redis 数据库 ID。",
                        "label": "数据库 ID",
                        "type": "number"
                    },
                    "auto_reconnect": {
                        "default": true,
                        "description": "自动重连数据库。",
                        "label": "自动重连数据库",
                        "type": "boolean"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "启用 SSL 连接。",
                        "label": "启用SSL",
                        "$ref": "#/components/schemas/emqx_schema.ssl_client_opts"
                    }
                },
                "type": "object"
            },
            "emqx_conf_schema.cluster_call": {
                "properties": {
                    "retry_interval": {
                        "default": "1s",
                        "description": "当集群间调用出错时，多长时间重试一次。",
                        "label": "重试时间间隔",
                        "type": "duration"
                    },
                    "max_history": {
                        "default": 100,
                        "description": "集群间调用最多保留的历史记录数。只用于排错时查看。",
                        "label": "最大历史记录",
                        "maximum": 500,
                        "minimum": 1,
                        "type": "number"
                    },
                    "cleanup_interval": {
                        "default": "5m",
                        "description": "清理过期事务的时间间隔",
                        "label": "清理间隔",
                        "type": "duration"
                    }
                },
                "type": "object"
            },
            "zone.overload_protection": {
                "properties": {
                    "enable": {
                        "description": "是否对系统过载做出反应",
                        "label": "是否对系统过载做出反应",
                        "type": "boolean"
                    },
                    "backoff_delay": {
                        "description": "一些不重要的任务可能会延迟执行，以毫秒为单位设置延迟",
                        "label": "延迟时间",
                        "minimum": 0,
                        "type": "number"
                    },
                    "backoff_gc": {
                        "description": "如有必要，跳过强制GC",
                        "label": "跳过GC",
                        "type": "boolean"
                    },
                    "backoff_hibernation": {
                        "description": "如有必要，跳过进程休眠",
                        "label": "跳过休眠",
                        "type": "boolean"
                    },
                    "backoff_new_conn": {
                        "description": "如有必要，关闭新进来的连接",
                        "label": "关闭新连接",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "authn-hash.other_algorithms": {
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "Simple password hashing algorithm.",
                        "label": "name",
                        "symbols": [
                            "plain",
                            "md5",
                            "sha",
                            "sha256",
                            "sha512"
                        ],
                        "type": "enum"
                    },
                    "salt_position": {
                        "default": "prefix",
                        "description": "Salt position for PLAIN, MD5, SHA, SHA256 and SHA512 algorithms.",
                        "label": "salt_position",
                        "symbols": [
                            "disable",
                            "prefix",
                            "suffix"
                        ],
                        "type": "enum"
                    }
                },
                "type": "object"
            },
            "dashboard.listeners": {
                "properties": {
                    "http": {
                        "description": "TCP listeners",
                        "label": "http",
                        "$ref": "#/components/schemas/dashboard.http"
                    },
                    "https": {
                        "description": "SSL listeners",
                        "label": "https",
                        "$ref": "#/components/schemas/dashboard.https"
                    }
                },
                "type": "object"
            },
            "authn-http.get": {
                "required": [
                    "url",
                    "backend",
                    "mechanism",
                    "method"
                ],
                "properties": {
                    "method": {
                        "default": "post",
                        "description": "HTTP method.",
                        "label": "method",
                        "symbols": [
                            "get"
                        ],
                        "type": "enum"
                    },
                    "headers": {
                        "default": {
                            "accept": "application/json",
                            "cache-control": "no-cache",
                            "connection": "keep-alive",
                            "keep-alive": "timeout=30, max=1000"
                        },
                        "description": "List of HTTP headers.",
                        "label": "headers",
                        "type": "string"
                    },
                    "mechanism": {
                        "description": "Authentication mechanism.",
                        "label": "mechanism",
                        "symbols": [
                            "password_based"
                        ],
                        "type": "enum"
                    },
                    "backend": {
                        "description": "Backend type.",
                        "label": "backend",
                        "symbols": [
                            "http"
                        ],
                        "type": "enum"
                    },
                    "url": {
                        "description": "URL of the auth server.",
                        "label": "url",
                        "type": "string"
                    },
                    "body": {
                        "description": "Body of the HTTP request.",
                        "label": "body",
                        "type": "string"
                    },
                    "request_timeout": {
                        "default": "5s",
                        "description": "HTTP request timeout",
                        "label": "request_timeout",
                        "type": "duration"
                    },
                    "enable": {
                        "default": true,
                        "description": "Set to <code>false</code> to disable this auth provider",
                        "label": "enable",
                        "type": "boolean"
                    },
                    "connect_timeout": {
                        "default": "15s",
                        "description": "连接HTTP服务器的超时时间。",
                        "label": "连接超时",
                        "type": "duration"
                    },
                    "enable_pipelining": {
                        "default": true,
                        "description": "允许HTTP管道。",
                        "label": "HTTP管道",
                        "type": "boolean"
                    },
                    "max_retries": {
                        "default": 5,
                        "description": "请求出错时的最大重试次数。",
                        "label": "最大重试次数",
                        "minimum": 1,
                        "type": "number"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "连接池大小。",
                        "label": "连接池大小",
                        "type": "string"
                    },
                    "request": {
                        "description": "\n如果提供了请求，调用者可以通过以下方式发送 HTTP 请求\n<code>emqx_resource:query(ResourceId, {send_message, BridgeId, Message})</code>\n",
                        "label": "HTTP 请求",
                        "$ref": "#/components/schemas/connector-http.request"
                    },
                    "retry_interval": {
                        "default": "1s",
                        "description": "重试之间的间隔时间。",
                        "label": "重试间隔",
                        "type": "duration"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "启用 SSL 连接。",
                        "label": "启用SSL",
                        "$ref": "#/components/schemas/emqx_schema.ssl_client_opts"
                    }
                },
                "type": "object"
            },
            "limiter.client_bucket": {
                "properties": {
                    "rate": {
                        "default": "infinity",
                        "description": "Rate for this bucket.",
                        "label": "rate",
                        "type": "string"
                    },
                    "initial": {
                        "default": "0",
                        "description": "The initial number of tokens for this bucket.",
                        "label": "initial",
                        "type": "string"
                    },
                    "low_water_mark": {
                        "default": "0",
                        "description": "If the remaining tokens are lower than this value,\nthe check/consume will succeed, but it will be forced to wait for a short period of time.",
                        "label": "low_water_mark",
                        "type": "string"
                    },
                    "capacity": {
                        "default": "infinity",
                        "description": "The capacity of the token bucket.",
                        "label": "capacity",
                        "type": "string"
                    },
                    "divisible": {
                        "default": false,
                        "description": "Is it possible to split the number of requested tokens?",
                        "label": "divisible",
                        "type": "boolean"
                    },
                    "max_retry_time": {
                        "default": "10s",
                        "description": "The maximum retry time when acquire failed.",
                        "label": "max_retry_time",
                        "type": "duration"
                    },
                    "failure_strategy": {
                        "default": "force",
                        "description": "The strategy when all the retries failed.",
                        "label": "failure_strategy",
                        "symbols": [
                            "force",
                            "drop",
                            "throw"
                        ],
                        "type": "enum"
                    }
                },
                "type": "object"
            },
            "authn-postgresql.authentication": {
                "required": [
                    "database",
                    "server",
                    "query",
                    "backend",
                    "mechanism"
                ],
                "properties": {
                    "mechanism": {
                        "description": "Authentication mechanism.",
                        "label": "mechanism",
                        "symbols": [
                            "password_based"
                        ],
                        "type": "enum"
                    },
                    "backend": {
                        "description": "Backend type.",
                        "label": "backend",
                        "symbols": [
                            "postgresql"
                        ],
                        "type": "enum"
                    },
                    "password_hash_algorithm": {
                        "default": {
                            "name": "sha256",
                            "salt_position": "prefix"
                        },
                        "description": "Options for password hash verification.",
                        "label": "password_hash_algorithm",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/authn-hash.other_algorithms"
                            },
                            {
                                "$ref": "#/components/schemas/authn-hash.pbkdf2"
                            },
                            {
                                "$ref": "#/components/schemas/authn-hash.bcrypt"
                            }
                        ]
                    },
                    "query": {
                        "description": "`SQL` query for looking up authentication data.",
                        "label": "query",
                        "type": "string"
                    },
                    "enable": {
                        "default": true,
                        "description": "Set to <code>false</code> to disable this auth provider",
                        "label": "enable",
                        "type": "boolean"
                    },
                    "server": {
                        "description": "\n将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/>\n主机名具有以下形式：`Host[:Port]`。<br/>\n如果未指定 `[:Port]`，则使用 PostgreSQL 默认端口 5432。\n",
                        "label": "服务器地址",
                        "type": "ip_port"
                    },
                    "database": {
                        "description": "数据库名字。",
                        "label": "数据库名字",
                        "type": "string"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "连接池大小。",
                        "label": "连接池大小",
                        "type": "string"
                    },
                    "username": {
                        "description": "内部数据库的用户名。",
                        "label": "用户名",
                        "type": "string"
                    },
                    "password": {
                        "description": "内部数据库密码。",
                        "label": "密码",
                        "type": "string"
                    },
                    "auto_reconnect": {
                        "default": true,
                        "description": "自动重连数据库。",
                        "label": "自动重连数据库",
                        "type": "boolean"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "启用 SSL 连接。",
                        "label": "启用SSL",
                        "$ref": "#/components/schemas/emqx_schema.ssl_client_opts"
                    }
                },
                "type": "object"
            },
            "emqx_schema.alarm": {
                "properties": {
                    "actions": {
                        "default": [
                            "log",
                            "publish"
                        ],
                        "description": "警报激活时触发的动作。<br/>\\n目前，支持以下操作：<code>log</code> 和 <code>publish</code>.\\n<code>log</code> 将告警写入日志 (控制台或者文件).\\n<code>publish</code> 将告警作为 MQTT 消息发布到系统主题:\\n<code>$SYS/brokers/emqx@xx.xx.xx.x/alarms/activate</code> and\\n<code>$SYS/brokers/emqx@xx.xx.xx.x/alarms/deactivate</code>",
                        "example": [
                            "log",
                            "publish"
                        ],
                        "items": {
                            "type": "string"
                        },
                        "label": "告警动作",
                        "type": "array"
                    },
                    "size_limit": {
                        "default": 1000,
                        "description": "要保留为历史记录的已停用报警的最大总数。当超过此限制时，将删除最旧的停用报警，以限制总数。",
                        "example": 1000,
                        "label": "告警总数限制",
                        "maximum": 3000,
                        "minimum": 1,
                        "type": "number"
                    },
                    "validity_period": {
                        "default": "24h",
                        "description": "停用报警的保留时间。报警在停用时不会立即删除，而是在保留时间之后删除。",
                        "example": "24h",
                        "label": "告警保留时间",
                        "type": "duration"
                    }
                },
                "type": "object"
            },
            "authn-jwt.jwks": {
                "required": [
                    "mechanism",
                    "endpoint",
                    "use_jwks"
                ],
                "properties": {
                    "use_jwks": {
                        "description": "",
                        "label": "use_jwks",
                        "symbols": [
                            true
                        ],
                        "type": "enum"
                    },
                    "endpoint": {
                        "description": "JWKs endpoint.",
                        "label": "endpoint",
                        "type": "string"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "JWKS connection count",
                        "label": "pool_size",
                        "type": "number"
                    },
                    "refresh_interval": {
                        "default": 300,
                        "description": "JWKs refresh interval",
                        "label": "refresh_interval",
                        "type": "number"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "Enable/disable SSL.",
                        "label": "ssl",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/authn-jwt.ssl_disable"
                            },
                            {
                                "$ref": "#/components/schemas/authn-jwt.ssl_enable"
                            }
                        ]
                    },
                    "mechanism": {
                        "description": "Authentication mechanism.",
                        "label": "mechanism",
                        "symbols": [
                            "jwt"
                        ],
                        "type": "enum"
                    },
                    "verify_claims": {
                        "default": {},
                        "description": "The list of claims to verify.",
                        "items": {
                            "type": "string"
                        },
                        "label": "verify_claims",
                        "type": "array"
                    },
                    "enable": {
                        "default": true,
                        "description": "Set to <code>false</code> to disable this auth provider",
                        "label": "enable",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "emqx_schema.sysmon": {
                "properties": {
                    "vm": {
                        "description": "vm Description",
                        "label": "vm",
                        "$ref": "#/components/schemas/emqx_schema.sysmon_vm"
                    },
                    "os": {
                        "description": "os Description",
                        "label": "os",
                        "$ref": "#/components/schemas/emqx_schema.sysmon_os"
                    },
                    "top": {
                        "description": "top Description",
                        "label": "top",
                        "$ref": "#/components/schemas/emqx_schema.sysmon_top"
                    }
                },
                "type": "object"
            },
            "authn-mongodb.standalone": {
                "required": [
                    "database",
                    "server",
                    "mongo_type",
                    "collection",
                    "backend",
                    "mechanism"
                ],
                "properties": {
                    "mechanism": {
                        "description": "Authentication mechanism.",
                        "label": "mechanism",
                        "symbols": [
                            "password_based"
                        ],
                        "type": "enum"
                    },
                    "backend": {
                        "description": "Backend type.",
                        "label": "backend",
                        "symbols": [
                            "mongodb"
                        ],
                        "type": "enum"
                    },
                    "collection": {
                        "description": "Collection used to store authentication data.",
                        "label": "collection",
                        "type": "string"
                    },
                    "selector": {
                        "description": "Statement that is executed during the authentication process. Commands can support following wildcards:\n - `${username}`: substituted with client's username\n - `${clientid}`: substituted with the clientid",
                        "label": "selector",
                        "type": "string"
                    },
                    "password_hash_field": {
                        "description": "Document field that contains password hash.",
                        "label": "password_hash_field",
                        "type": "string"
                    },
                    "salt_field": {
                        "description": "Document field that contains the password salt.",
                        "label": "salt_field",
                        "type": "string"
                    },
                    "is_superuser_field": {
                        "description": "Document field that defines if the user has superuser privileges.",
                        "label": "is_superuser_field",
                        "type": "string"
                    },
                    "password_hash_algorithm": {
                        "default": {
                            "name": "sha256",
                            "salt_position": "prefix"
                        },
                        "description": "Options for password hash verification.",
                        "label": "password_hash_algorithm",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/authn-hash.other_algorithms"
                            },
                            {
                                "$ref": "#/components/schemas/authn-hash.pbkdf2"
                            },
                            {
                                "$ref": "#/components/schemas/authn-hash.bcrypt"
                            }
                        ]
                    },
                    "enable": {
                        "default": true,
                        "description": "Set to <code>false</code> to disable this auth provider",
                        "label": "enable",
                        "type": "boolean"
                    },
                    "mongo_type": {
                        "default": "single",
                        "description": "Standalone模式。",
                        "label": "Standalone模式",
                        "symbols": [
                            "single"
                        ],
                        "type": "enum"
                    },
                    "server": {
                        "description": "\n将要连接的 IPv4 或 IPv6 地址，或者主机名。<br/>\n主机名具有以下形式：`Host[:Port]`。<br/>\n如果未指定 `[:Port]`，则使用 MongoDB 默认端口 27017。\n",
                        "label": "服务器地址",
                        "type": "ip_port"
                    },
                    "w_mode": {
                        "default": "unsafe",
                        "description": "写模式。",
                        "label": "写模式",
                        "symbols": [
                            "unsafe",
                            "safe"
                        ],
                        "type": "enum"
                    },
                    "srv_record": {
                        "default": false,
                        "description": "使用 DNS SRV 记录。",
                        "label": "SRV 记录",
                        "type": "boolean"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "连接池大小。",
                        "label": "连接池大小",
                        "type": "string"
                    },
                    "username": {
                        "description": "内部数据库的用户名。",
                        "label": "用户名",
                        "type": "string"
                    },
                    "password": {
                        "description": "内部数据库密码。",
                        "label": "密码",
                        "type": "string"
                    },
                    "auth_source": {
                        "description": "与用户证书关联的数据库名称。",
                        "label": "认证源",
                        "type": "string"
                    },
                    "database": {
                        "description": "数据库名字。",
                        "label": "数据库名字",
                        "type": "string"
                    },
                    "topology": {
                        "description": "topology Description",
                        "label": "topology",
                        "$ref": "#/components/schemas/emqx_connector_mongo.topology"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "启用 SSL 连接。",
                        "label": "启用SSL",
                        "$ref": "#/components/schemas/emqx_schema.ssl_client_opts"
                    }
                },
                "type": "object"
            },
            "authn-hash.bcrypt": {
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "BCRYPT password hashing.",
                        "label": "name",
                        "symbols": [
                            "bcrypt"
                        ],
                        "type": "enum"
                    }
                },
                "type": "object"
            },
            "authn-jwt.ssl_disable": {
                "properties": {
                    "enable": {
                        "description": "",
                        "label": "enable",
                        "symbols": [
                            false
                        ],
                        "type": "enum"
                    }
                },
                "type": "object"
            },
            "emqx_schema.listener_wss_opts": {
                "properties": {
                    "enable": {
                        "default": false,
                        "description": "Enable TLS.",
                        "label": "enable",
                        "type": "boolean"
                    },
                    "cacertfile": {
                        "default": "etc/certs/cacert.pem",
                        "description": "Trusted PEM format CA certificates bundle file.<br>\nThe certificates in this file are used to verify the TLS peer's certificates.\nAppend new certificates to the file if new CAs are to be trusted.\nThere is no need to restart EMQX to have the updated file loaded, because\nthe system regularly checks if file has been updated (and reload).<br>\nNOTE: invalidating (deleting) a certificate from the file will not affect\nalready established connections.\n",
                        "label": "cacertfile",
                        "type": "string"
                    },
                    "certfile": {
                        "default": "etc/certs/cert.pem",
                        "description": "PEM format certificates chain file.<br>\nThe certificates in this file should be in reversed order of the certificate\nissue chain. That is, the host's certificate should be placed in the beginning\nof the file, followed by the immediate issuer certificate and so on.\nAlthough the root CA certificate is optional, it should be placed at the end of\nthe file if it is to be added.",
                        "label": "certfile",
                        "type": "string"
                    },
                    "keyfile": {
                        "default": "etc/certs/key.pem",
                        "description": "PEM format private key file.",
                        "label": "keyfile",
                        "type": "string"
                    },
                    "verify": {
                        "default": "verify_none",
                        "description": "Enable or disable peer verification.",
                        "label": "verify",
                        "symbols": [
                            "verify_peer",
                            "verify_none"
                        ],
                        "type": "enum"
                    },
                    "reuse_sessions": {
                        "default": true,
                        "description": "Enable TLS session reuse.",
                        "label": "reuse_sessions",
                        "type": "boolean"
                    },
                    "depth": {
                        "default": 10,
                        "description": "Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path. So, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly; if 1 the path can be PEER, CA, ROOT-CA; if 2 the path can be PEER, CA, CA, ROOT-CA, and so on. The default value is 10.",
                        "label": "depth",
                        "type": "number"
                    },
                    "password": {
                        "description": "String containing the user's password. Only used if the private\nkey file is password-protected.",
                        "label": "password",
                        "type": "string"
                    },
                    "versions": {
                        "default": [
                            "tlsv1.3",
                            "tlsv1.2",
                            "tlsv1.1",
                            "tlsv1"
                        ],
                        "description": "All TLS/DTLS versions to be supported.<br>\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br>\nIn case PSK cipher suites are intended, make sure to configured\n<code>['tlsv1.2', 'tlsv1.1']</code> here.",
                        "items": {
                            "type": "string"
                        },
                        "label": "versions",
                        "type": "array"
                    },
                    "ciphers": {
                        "default": [
                            "TLS_AES_256_GCM_SHA384",
                            "TLS_AES_128_GCM_SHA256",
                            "TLS_CHACHA20_POLY1305_SHA256",
                            "TLS_AES_128_CCM_SHA256",
                            "TLS_AES_128_CCM_8_SHA256",
                            "ECDHE-ECDSA-AES256-GCM-SHA384",
                            "ECDHE-RSA-AES256-GCM-SHA384",
                            "ECDHE-ECDSA-AES256-SHA384",
                            "ECDHE-RSA-AES256-SHA384",
                            "ECDH-ECDSA-AES256-GCM-SHA384",
                            "ECDH-RSA-AES256-GCM-SHA384",
                            "ECDH-ECDSA-AES256-SHA384",
                            "ECDH-RSA-AES256-SHA384",
                            "DHE-DSS-AES256-GCM-SHA384",
                            "DHE-DSS-AES256-SHA256",
                            "AES256-GCM-SHA384",
                            "AES256-SHA256",
                            "ECDHE-ECDSA-AES128-GCM-SHA256",
                            "ECDHE-RSA-AES128-GCM-SHA256",
                            "ECDHE-ECDSA-AES128-SHA256",
                            "ECDHE-RSA-AES128-SHA256",
                            "ECDH-ECDSA-AES128-GCM-SHA256",
                            "ECDH-RSA-AES128-GCM-SHA256",
                            "ECDH-ECDSA-AES128-SHA256",
                            "ECDH-RSA-AES128-SHA256",
                            "DHE-DSS-AES128-GCM-SHA256",
                            "DHE-DSS-AES128-SHA256",
                            "AES128-GCM-SHA256",
                            "AES128-SHA256",
                            "ECDHE-ECDSA-AES256-SHA",
                            "ECDHE-RSA-AES256-SHA",
                            "DHE-DSS-AES256-SHA",
                            "ECDH-ECDSA-AES256-SHA",
                            "ECDH-RSA-AES256-SHA",
                            "ECDHE-ECDSA-AES128-SHA",
                            "ECDHE-RSA-AES128-SHA",
                            "DHE-DSS-AES128-SHA",
                            "ECDH-ECDSA-AES128-SHA",
                            "ECDH-RSA-AES128-SHA",
                            "RSA-PSK-AES256-GCM-SHA384",
                            "RSA-PSK-AES256-CBC-SHA384",
                            "RSA-PSK-AES128-GCM-SHA256",
                            "RSA-PSK-AES128-CBC-SHA256",
                            "RSA-PSK-AES256-CBC-SHA",
                            "RSA-PSK-AES128-CBC-SHA"
                        ],
                        "description": "This config holds TLS cipher suite names separated by comma,\nor as an array of strings. e.g.\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.\n<br>\nCiphers (and their ordering) define the way in which the\nclient and server encrypts information over the network connection.\nSelecting a good cipher suite is critical for the\napplication's data security, confidentiality and performance.\n\nThe names should be in OpenSSL string format (not RFC format).\nAll default values and examples provided by EMQX config\ndocumentation are all in OpenSSL format.<br>\n\nNOTE: Certain cipher suites are only compatible with\nspecific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')\nincompatible cipher suites will be silently dropped.\nFor instance, if only 'tlsv1.3' is given in the <code>versions</code>,\nconfiguring cipher suites for other versions will have no effect.\n<br>\n\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br>\nIf PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br>\nPSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code><br>\n",
                        "items": {
                            "type": "string"
                        },
                        "label": "ciphers",
                        "type": "array"
                    },
                    "user_lookup_fun": {
                        "default": "emqx_tls_psk:lookup",
                        "description": "EMQX-internal callback that is used to lookup pre-shared key (PSK) identity.",
                        "label": "user_lookup_fun",
                        "type": "string"
                    },
                    "secure_renegotiate": {
                        "default": true,
                        "description": "SSL parameter renegotiation is a feature that allows a client and a server\nto renegotiate the parameters of the SSL connection on the fly.\nRFC 5746 defines a more secure way of doing this. By enabling secure renegotiation,\nyou drop support for the insecure renegotiation, prone to MitM attacks.",
                        "label": "secure_renegotiate",
                        "type": "boolean"
                    },
                    "dhfile": {
                        "description": "Path to a file containing PEM-encoded Diffie-Hellman parameters\nto be used by the server if a cipher suite using Diffie-Hellman\nkey exchange is negotiated. If not specified, default parameters\nare used.<br>\nNOTE: The <code>dhfile</code> option is not supported by TLS 1.3.",
                        "label": "dhfile",
                        "type": "string"
                    },
                    "fail_if_no_peer_cert": {
                        "default": false,
                        "description": "Used together with {verify, verify_peer} by an TLS/DTLS server.\nIf set to true, the server fails if the client does not have a\ncertificate to send, that is, sends an empty certificate.\nIf set to false, it fails only if the client sends an invalid\ncertificate (an empty certificate is considered valid).",
                        "label": "fail_if_no_peer_cert",
                        "type": "boolean"
                    },
                    "honor_cipher_order": {
                        "default": true,
                        "description": "An important security setting, it forces the cipher to be set based\n on the server-specified order instead of the client-specified order,\n hence enforcing the (usually more properly configured) security\n ordering of the server administrator.",
                        "label": "honor_cipher_order",
                        "type": "boolean"
                    },
                    "client_renegotiation": {
                        "default": true,
                        "description": "In protocols that support client-initiated renegotiation,\nthe cost of resources of such an operation is higher for the server than the client.\nThis can act as a vector for denial of service attacks.\nThe SSL application already takes measures to counter-act such attempts,\nbut client-initiated renegotiation can be strictly disabled by setting this option to false.\nThe default value is true. Note that disabling renegotiation can result in\nlong-lived connections becoming unusable due to limits on\nthe number of messages the underlying cipher suite can encipher.",
                        "label": "client_renegotiation",
                        "type": "boolean"
                    },
                    "handshake_timeout": {
                        "default": "15s",
                        "description": "Maximum time duration allowed for the handshake to complete",
                        "label": "handshake_timeout",
                        "type": "duration"
                    }
                },
                "type": "object"
            },
            "emqx_schema.mqtt_tcp_listener": {
                "required": [
                    "bind"
                ],
                "properties": {
                    "tcp": {
                        "description": "tcp Description",
                        "label": "tcp",
                        "$ref": "#/components/schemas/emqx_schema.tcp_opts"
                    },
                    "bind": {
                        "description": "IP address and port for the listening socket.",
                        "label": "bind",
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "ip_port"
                            }
                        ]
                    },
                    "acceptors": {
                        "default": 16,
                        "description": "The size of the listener's receiving pool.",
                        "label": "acceptors",
                        "type": "number"
                    },
                    "max_connections": {
                        "default": "infinity",
                        "description": "The maximum number of concurrent connections allowed by the listener.",
                        "label": "max_connections",
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "mountpoint": {
                        "default": "",
                        "description": "When publishing or subscribing, prefix all topics with a mountpoint string.\n The prefixed string will be removed from the topic name when the message\n is delivered to the subscriber. The mountpoint is a way that users can use\n to implement isolation of message routing between different listeners.\n For example if a client A subscribes to `t` with `listeners.tcp.<name>.mountpoint`\n set to `some_tenant`, then the client actually subscribes to the topic\n `some_tenant/t`. Similarly, if another client B (connected to the same listener\n as the client A) sends a message to topic `t`, the message is routed\n to all the clients subscribed `some_tenant/t`, so client A will receive the\n message, with topic name `t`.<br/>\n Set to `\"\"` to disable the feature.<br/>\n\n Variables in mountpoint string:\n - <code>${clientid}</code>: clientid\n - <code>${username}</code>: username",
                        "label": "mountpoint",
                        "type": "string"
                    },
                    "zone": {
                        "default": "default",
                        "description": "The configuration zone to which the listener belongs.",
                        "label": "zone",
                        "type": "string"
                    },
                    "limiter": {
                        "default": {},
                        "description": "Type of the rate limit.",
                        "label": "limiter",
                        "properties": {
                            "$ratelimit's type": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "access_rules": {
                        "default": [
                            "allow all"
                        ],
                        "description": "The access control rules for this listener.<br/>See: https://github.com/emqtt/esockd#allowdeny",
                        "items": {
                            "type": "string"
                        },
                        "label": "access_rules",
                        "type": "array"
                    },
                    "proxy_protocol": {
                        "default": false,
                        "description": "Enable the Proxy Protocol V1/2 if the EMQX cluster is deployed\n behind HAProxy or Nginx.<br/>See: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
                        "label": "proxy_protocol",
                        "type": "boolean"
                    },
                    "proxy_protocol_timeout": {
                        "default": "3s",
                        "description": "Timeout for proxy protocol. EMQX will close the TCP connection if proxy protocol packet is not received within the timeout.",
                        "label": "proxy_protocol_timeout",
                        "type": "duration"
                    },
                    "authentication": {
                        "description": "Per-listener authentication override\nAuthentication can be one single authenticator instance or a chain of authenticators as an array.\nWhen authenticating a login (username, client ID, etc.) the authenticators are checked in the configured order.<br>\n",
                        "items": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/authn-scram-builtin_db.authentication"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-jwt.jwks"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-jwt.public-key"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-jwt.hmac-based"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-http.post"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-http.get"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-redis.sentinel"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-redis.cluster"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-redis.standalone"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-mongodb.sharded-cluster"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-mongodb.replica-set"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-mongodb.standalone"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-postgresql.authentication"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-mysql.authentication"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-builtin_db.authentication"
                                }
                            ]
                        },
                        "label": "authentication",
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "emqx_schema.broker": {
                "properties": {
                    "enable_session_registry": {
                        "default": true,
                        "description": "是否启用 Session Registry",
                        "label": "enable_session_registry",
                        "type": "boolean"
                    },
                    "session_locking_strategy": {
                        "default": "quorum",
                        "description": "Session 在集群中的锁策略。\n  - `loca`: 仅锁本节点的 Session\n  - `one`: 任选一个其它节点加锁\n  - `quorum`: 选择集群中半数以上的节点加锁\n  - `all`: 选择所有节点加锁\n",
                        "label": "session_locking_strategy",
                        "symbols": [
                            "local",
                            "leader",
                            "quorum",
                            "all"
                        ],
                        "type": "enum"
                    },
                    "shared_subscription_strategy": {
                        "default": "round_robin",
                        "description": "共享订阅消息派发策略。\n  - `random`: 随机挑选一个共享订阅者派发\n  - `round_robin`: 使用 round-robin 策略派发\n  - `sticky`: 总是使用上次选中的订阅者派发，直到它断开连接\n  - `hash`: 使用发送者的 Client ID 进行 Hash 来选择订阅者\n",
                        "label": "shared_subscription_strategy",
                        "symbols": [
                            "random",
                            "round_robin",
                            "sticky",
                            "hash_topic",
                            "hash_clientid"
                        ],
                        "type": "enum"
                    },
                    "shared_dispatch_ack_enabled": {
                        "default": false,
                        "description": "启用/禁用 QoS1 和 QoS2 消息的共享派发确认。\n开启后，允许将消息从未及时回复 ACK 的订阅者 （例如，客户端离线）重新派发给另外一个订阅者。\n",
                        "label": "shared_dispatch_ack_enabled",
                        "type": "boolean"
                    },
                    "route_batch_clean": {
                        "default": true,
                        "description": "是否开启批量清除路由。",
                        "label": "route_batch_clean",
                        "type": "boolean"
                    },
                    "perf": {
                        "description": "perf Description",
                        "label": "perf",
                        "$ref": "#/components/schemas/emqx_schema.broker_perf"
                    }
                },
                "type": "object"
            },
            "emqx_conf_schema.cluster_mcast": {
                "properties": {
                    "addr": {
                        "default": "239.192.0.1",
                        "description": "指定多播 IPv4 地址。\n当 cluster.discovery_strategy 为 mcast 时，此配置项才有效。\n          ",
                        "label": "多播地址",
                        "readOnly": true,
                        "type": "string"
                    },
                    "ports": {
                        "default": [
                            4369,
                            4370
                        ],
                        "description": "指定多播端口。如有多个端口使用逗号 , 分隔。\n当 cluster.discovery_strategy 为 mcast 时，此配置项才有效。\n          ",
                        "items": {
                            "type": "number"
                        },
                        "label": "多播端口",
                        "readOnly": true,
                        "type": "array"
                    },
                    "iface": {
                        "default": "0.0.0.0",
                        "description": "指定节点发现服务需要绑定到本地 IP 地址。\n当 cluster.discovery_strategy 为 mcast 时，此配置项才有效。\n          ",
                        "label": "多播绑定地址",
                        "readOnly": true,
                        "type": "string"
                    },
                    "ttl": {
                        "default": 255,
                        "description": "指定多播的 Time-To-Live 值。\n当 cluster.discovery_strategy 为 mcast 时，此配置项才有效。\n          ",
                        "label": "多播TTL",
                        "maximum": 255,
                        "minimum": 0,
                        "readOnly": true,
                        "type": "number"
                    },
                    "loop": {
                        "default": true,
                        "description": "设置多播的报文是否投递到本地回环地址。\n当 cluster.discovery_strategy 为 mcast 时，此配置项才有效。\n          ",
                        "label": "多播回环开关",
                        "readOnly": true,
                        "type": "boolean"
                    },
                    "sndbuf": {
                        "default": "16KB",
                        "description": "外发数据报的内核级缓冲区的大小。\n当 cluster.discovery_strategy 为 mcast 时，此配置项才有效。\n          ",
                        "label": "多播发送缓存区",
                        "readOnly": true,
                        "type": "byteSize"
                    },
                    "recbuf": {
                        "default": "16KB",
                        "description": "接收数据报的内核级缓冲区的大小。\n当 cluster.discovery_strategy 为 mcast 时，此配置项才有效。\n          ",
                        "label": "多播接收数据缓冲区",
                        "readOnly": true,
                        "type": "byteSize"
                    },
                    "buffer": {
                        "default": "32KB",
                        "description": "用户级缓冲区的大小。\n当 cluster.discovery_strategy 为 mcast 时，此配置项才有效。\n          ",
                        "label": "多播用户级缓冲区",
                        "readOnly": true,
                        "type": "byteSize"
                    }
                },
                "type": "object"
            },
            "zone.mqtt": {
                "properties": {
                    "idle_timeout": {
                        "description": "关闭在此时间间隔内未发送 MQTT CONNECT 消息的客户端的 TCP 连接。",
                        "label": "idle_timeout",
                        "oneOf": [
                            {
                                "type": "duration"
                            },
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "max_packet_size": {
                        "description": "允许的最大 MQTT 报文大小。",
                        "label": "max_packet_size",
                        "type": "byteSize"
                    },
                    "max_clientid_len": {
                        "description": "允许的最大 MQTT Client ID 长度",
                        "label": "max_clientid_len",
                        "maximum": 65535,
                        "minimum": 23,
                        "type": "number"
                    },
                    "max_topic_levels": {
                        "description": "允许的 Topic 最大层级数",
                        "label": "max_topic_levels",
                        "maximum": 65535,
                        "minimum": 1,
                        "type": "number"
                    },
                    "max_qos_allowed": {
                        "description": "允许的最大 QoS 等级。",
                        "label": "max_qos_allowed",
                        "symbols": [
                            0,
                            1,
                            2
                        ],
                        "type": "enum"
                    },
                    "max_topic_alias": {
                        "description": "允许的最大主题别名数，0 表示不支持主题别名。",
                        "label": "max_topic_alias",
                        "maximum": 65535,
                        "minimum": 0,
                        "type": "number"
                    },
                    "retain_available": {
                        "description": "是否支持 retained 消息。",
                        "label": "retain_available",
                        "type": "boolean"
                    },
                    "wildcard_subscription": {
                        "description": "是否支持主题的通配符订阅。",
                        "label": "wildcard_subscription",
                        "type": "boolean"
                    },
                    "shared_subscription": {
                        "description": "是否支持 MQTT 共享订阅",
                        "label": "shared_subscription",
                        "type": "boolean"
                    },
                    "ignore_loop_deliver": {
                        "description": "是否为 MQTT v3.1.1/v3.1.0 客户端忽略接收自己发布出消息",
                        "label": "ignore_loop_deliver",
                        "type": "boolean"
                    },
                    "strict_mode": {
                        "description": "是否以严格模式解析 MQTT 消息。\n当设置为 true 时，例如客户端 ID、主题名称等中的无效 utf8 字符串将导致客户端断开连接。",
                        "label": "strict_mode",
                        "type": "boolean"
                    },
                    "response_information": {
                        "description": "指定返回给客户端的响应信息。如果设置为 \"\"，则禁用此功能。",
                        "label": "response_information",
                        "type": "string"
                    },
                    "server_keepalive": {
                        "description": "MQTT 5.0 的 'Server Keep Alive' 属性。\n如果服务器在 CONNACK 数据包中返回'Server Keep Alive'，则客户端必须使用该值作为实际的 'Keep Alive' 值。",
                        "label": "server_keepalive",
                        "oneOf": [
                            {
                                "symbols": [
                                    "disabled"
                                ],
                                "type": "enum"
                            },
                            {
                                "type": "number"
                            }
                        ]
                    },
                    "keepalive_backoff": {
                        "description": "Broker 判定客户端 Keep Alive 超时的退避乘数。EMQX 将在'Keepalive * backoff * 2' 空闲后关闭连接。",
                        "label": "keepalive_backoff",
                        "type": "number"
                    },
                    "max_subscriptions": {
                        "description": "允许的每个客户端最大订阅数",
                        "label": "max_subscriptions",
                        "oneOf": [
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            },
                            {
                                "minimum": 1,
                                "type": "number"
                            }
                        ]
                    },
                    "upgrade_qos": {
                        "description": "投递消息时，是否根据订阅主题时的 QoS 等级来强制提升派发的消息的 QoS 等级。",
                        "label": "upgrade_qos",
                        "type": "boolean"
                    },
                    "max_inflight": {
                        "description": "飞行窗口的最大值。",
                        "label": "max_inflight",
                        "maximum": 65535,
                        "minimum": 1,
                        "type": "number"
                    },
                    "retry_interval": {
                        "description": "QoS1/2 消息的重新投递间隔。",
                        "label": "retry_interval",
                        "type": "duration"
                    },
                    "max_awaiting_rel": {
                        "description": "PUBREL (Client -> Broker) 最大等待队列长度。",
                        "label": "max_awaiting_rel",
                        "oneOf": [
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            },
                            {
                                "type": "number"
                            }
                        ]
                    },
                    "await_rel_timeout": {
                        "description": "PUBREL (Client -> Broker) 最大等待时间，超时则会被丢弃。",
                        "label": "await_rel_timeout",
                        "type": "duration"
                    },
                    "session_expiry_interval": {
                        "description": "Session 默认超时时间。",
                        "label": "session_expiry_interval",
                        "type": "duration"
                    },
                    "max_mqueue_len": {
                        "description": "消息队列最大长度。持久客户端断开连接或飞行窗口已满时排队的消息长度。",
                        "label": "max_mqueue_len",
                        "oneOf": [
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            },
                            {
                                "minimum": 1,
                                "type": "number"
                            }
                        ]
                    },
                    "mqueue_priorities": {
                        "description": "主题优先级。取值范围 [1-255]\n默认优先级表为空，即所有的主题优先级相同。\n\n注：优先主题名称中不支持使用逗号和等号。\n注：不在此列表中的主题，被视为最高/最低优先级，这取决于<code>mqtt.mqueue_default_priority</code> 的配置\n\n示例：\n配置 <code>\"topic/1\" > \"topic/2\"</code>:\n<code>mqueue_priorities: {\"topic/1\": 10, \"topic/2\": 8}</code>\n",
                        "label": "mqueue_priorities",
                        "oneOf": [
                            {
                                "symbols": [
                                    "disabled"
                                ],
                                "type": "enum"
                            },
                            {
                                "type": "string"
                            }
                        ]
                    },
                    "mqueue_default_priority": {
                        "description": "主题默认的优先级，不在 <code>mqtt.mqueue_priorities</code> 中的主题将会使用该优先级。",
                        "label": "mqueue_default_priority",
                        "symbols": [
                            "highest",
                            "lowest"
                        ],
                        "type": "enum"
                    },
                    "mqueue_store_qos0": {
                        "description": "消息队列是否存储 QoS0 消息。",
                        "label": "mqueue_store_qos0",
                        "type": "boolean"
                    },
                    "use_username_as_clientid": {
                        "description": "是否使用 Client ID 替换 Username。",
                        "label": "use_username_as_clientid",
                        "type": "boolean"
                    },
                    "peer_cert_as_username": {
                        "description": "使用客户端证书中的 CN, DN 字段或整个证书来作为客户端用户名。",
                        "label": "peer_cert_as_username",
                        "symbols": [
                            "disabled",
                            "cn",
                            "dn",
                            "crt",
                            "pem",
                            "md5"
                        ],
                        "type": "enum"
                    },
                    "peer_cert_as_clientid": {
                        "description": "使用客户端证书中的 CN, DN 字段或整个证书来作为客户端 ID。",
                        "label": "peer_cert_as_clientid",
                        "symbols": [
                            "disabled",
                            "cn",
                            "dn",
                            "crt",
                            "pem",
                            "md5"
                        ],
                        "type": "enum"
                    }
                },
                "type": "object"
            },
            "authn-scram-builtin_db.authentication": {
                "required": [
                    "backend",
                    "mechanism"
                ],
                "properties": {
                    "mechanism": {
                        "description": "Authentication mechanism.",
                        "label": "mechanism",
                        "symbols": [
                            "scram"
                        ],
                        "type": "enum"
                    },
                    "backend": {
                        "description": "Backend type.",
                        "label": "backend",
                        "symbols": [
                            "built_in_database"
                        ],
                        "type": "enum"
                    },
                    "algorithm": {
                        "default": "sha256",
                        "description": "Hashing algorithm.",
                        "label": "algorithm",
                        "symbols": [
                            "sha256",
                            "sha512"
                        ],
                        "type": "enum"
                    },
                    "iteration_count": {
                        "default": 4096,
                        "description": "Iteration count.",
                        "label": "iteration_count",
                        "minimum": 1,
                        "type": "number"
                    },
                    "enable": {
                        "default": true,
                        "description": "Set to <code>false</code> to disable this auth provider",
                        "label": "enable",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "zone.conn_congestion": {
                "properties": {
                    "enable_alarm": {
                        "description": "启用或者禁用连接阻塞告警功能",
                        "label": "启用/禁用阻塞告警",
                        "type": "boolean"
                    },
                    "min_alarm_sustain_duration": {
                        "description": "清除警报前的最短时间。\\n\\n只有当队列中没有挂起的数据，并且连接至少被堵塞了 \"min_alarm_sustain_duration\" 毫秒时，\\n报警才会被清除。这是为了避免太频繁地清除和再次发出警报.",
                        "label": "告警维持时间",
                        "type": "duration"
                    }
                },
                "type": "object"
            },
            "limiter.limiter": {
                "properties": {
                    "bytes_in": {
                        "description": "The bytes_in limiter.<br>It is used to limit the inbound bytes rate for this EMQX node.If the this limiter limit is reached,the restricted client will be slow down even be hung for a while.",
                        "label": "bytes_in",
                        "$ref": "#/components/schemas/limiter.limiter_opts"
                    },
                    "message_in": {
                        "description": "The message_in limiter.<br>This is used to limit the inbound message numbers for this EMQX nodeIf the this limiter limit is reached,the restricted client will be slow down even be hung for a while.",
                        "label": "message_in",
                        "$ref": "#/components/schemas/limiter.limiter_opts"
                    },
                    "connection": {
                        "description": "The connection limiter.<br>This is used to limit the connection rate for this EMQX nodeIf the this limiter limit is reached,New connections will be refused",
                        "label": "connection",
                        "$ref": "#/components/schemas/limiter.limiter_opts"
                    },
                    "message_routing": {
                        "description": "The message_routing limiter.<br>This is used to limite the deliver rate for this EMQX nodeIf the this limiter limit is reached,New publish will be refused",
                        "label": "message_routing",
                        "$ref": "#/components/schemas/limiter.limiter_opts"
                    },
                    "batch": {
                        "description": "The batch limiter.<br>This is used for EMQX internal batch operatione.g. limite the retainer's deliver rate",
                        "label": "batch",
                        "$ref": "#/components/schemas/limiter.limiter_opts"
                    }
                },
                "type": "object"
            },
            "dashboard.https": {
                "required": [
                    "bind"
                ],
                "properties": {
                    "bind": {
                        "default": 18083,
                        "description": "监听的地址与端口",
                        "label": "绑定端口",
                        "oneOf": [
                            {
                                "type": "ip_port"
                            },
                            {
                                "minimum": 1,
                                "type": "number"
                            }
                        ]
                    },
                    "num_acceptors": {
                        "default": 4,
                        "description": "TCP协议的Socket acceptor池大小",
                        "label": "Acceptor 数量",
                        "type": "number"
                    },
                    "max_connections": {
                        "default": 512,
                        "description": "同时处理的最大连接数",
                        "label": "最大连接数",
                        "type": "number"
                    },
                    "backlog": {
                        "default": 1024,
                        "description": "排队等待连接的队列的最大长度",
                        "label": "排队长度",
                        "type": "number"
                    },
                    "send_timeout": {
                        "default": "5s",
                        "description": "Socket发送超时时间",
                        "label": "发送超时时间",
                        "type": "duration"
                    },
                    "inet6": {
                        "default": false,
                        "description": "启用IPv6",
                        "label": "IPv6",
                        "type": "boolean"
                    },
                    "ipv6_v6only": {
                        "default": false,
                        "description": "禁用IPv4-to-IPv6映射",
                        "label": "IPv6 only",
                        "type": "boolean"
                    },
                    "enable": {
                        "default": false,
                        "description": "Enable TLS.",
                        "label": "enable",
                        "type": "boolean"
                    },
                    "cacertfile": {
                        "default": "etc/certs/cacert.pem",
                        "description": "Trusted PEM format CA certificates bundle file.<br>\nThe certificates in this file are used to verify the TLS peer's certificates.\nAppend new certificates to the file if new CAs are to be trusted.\nThere is no need to restart EMQX to have the updated file loaded, because\nthe system regularly checks if file has been updated (and reload).<br>\nNOTE: invalidating (deleting) a certificate from the file will not affect\nalready established connections.\n",
                        "label": "cacertfile",
                        "type": "string"
                    },
                    "certfile": {
                        "default": "etc/certs/cert.pem",
                        "description": "PEM format certificates chain file.<br>\nThe certificates in this file should be in reversed order of the certificate\nissue chain. That is, the host's certificate should be placed in the beginning\nof the file, followed by the immediate issuer certificate and so on.\nAlthough the root CA certificate is optional, it should be placed at the end of\nthe file if it is to be added.",
                        "label": "certfile",
                        "type": "string"
                    },
                    "keyfile": {
                        "default": "etc/certs/key.pem",
                        "description": "PEM format private key file.",
                        "label": "keyfile",
                        "type": "string"
                    },
                    "verify": {
                        "default": "verify_none",
                        "description": "Enable or disable peer verification.",
                        "label": "verify",
                        "symbols": [
                            "verify_peer",
                            "verify_none"
                        ],
                        "type": "enum"
                    },
                    "reuse_sessions": {
                        "default": true,
                        "description": "Enable TLS session reuse.",
                        "label": "reuse_sessions",
                        "type": "boolean"
                    },
                    "depth": {
                        "default": 10,
                        "description": "Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path. So, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly; if 1 the path can be PEER, CA, ROOT-CA; if 2 the path can be PEER, CA, CA, ROOT-CA, and so on. The default value is 10.",
                        "label": "depth",
                        "type": "number"
                    },
                    "password": {
                        "description": "String containing the user's password. Only used if the private\nkey file is password-protected.",
                        "label": "password",
                        "type": "string"
                    },
                    "versions": {
                        "default": [
                            "tlsv1.3",
                            "tlsv1.2",
                            "tlsv1.1",
                            "tlsv1"
                        ],
                        "description": "All TLS/DTLS versions to be supported.<br>\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br>\nIn case PSK cipher suites are intended, make sure to configured\n<code>['tlsv1.2', 'tlsv1.1']</code> here.",
                        "items": {
                            "type": "string"
                        },
                        "label": "versions",
                        "type": "array"
                    },
                    "ciphers": {
                        "default": [
                            "TLS_AES_256_GCM_SHA384",
                            "TLS_AES_128_GCM_SHA256",
                            "TLS_CHACHA20_POLY1305_SHA256",
                            "TLS_AES_128_CCM_SHA256",
                            "TLS_AES_128_CCM_8_SHA256",
                            "ECDHE-ECDSA-AES256-GCM-SHA384",
                            "ECDHE-RSA-AES256-GCM-SHA384",
                            "ECDHE-ECDSA-AES256-SHA384",
                            "ECDHE-RSA-AES256-SHA384",
                            "ECDH-ECDSA-AES256-GCM-SHA384",
                            "ECDH-RSA-AES256-GCM-SHA384",
                            "ECDH-ECDSA-AES256-SHA384",
                            "ECDH-RSA-AES256-SHA384",
                            "DHE-DSS-AES256-GCM-SHA384",
                            "DHE-DSS-AES256-SHA256",
                            "AES256-GCM-SHA384",
                            "AES256-SHA256",
                            "ECDHE-ECDSA-AES128-GCM-SHA256",
                            "ECDHE-RSA-AES128-GCM-SHA256",
                            "ECDHE-ECDSA-AES128-SHA256",
                            "ECDHE-RSA-AES128-SHA256",
                            "ECDH-ECDSA-AES128-GCM-SHA256",
                            "ECDH-RSA-AES128-GCM-SHA256",
                            "ECDH-ECDSA-AES128-SHA256",
                            "ECDH-RSA-AES128-SHA256",
                            "DHE-DSS-AES128-GCM-SHA256",
                            "DHE-DSS-AES128-SHA256",
                            "AES128-GCM-SHA256",
                            "AES128-SHA256",
                            "ECDHE-ECDSA-AES256-SHA",
                            "ECDHE-RSA-AES256-SHA",
                            "DHE-DSS-AES256-SHA",
                            "ECDH-ECDSA-AES256-SHA",
                            "ECDH-RSA-AES256-SHA",
                            "ECDHE-ECDSA-AES128-SHA",
                            "ECDHE-RSA-AES128-SHA",
                            "DHE-DSS-AES128-SHA",
                            "ECDH-ECDSA-AES128-SHA",
                            "ECDH-RSA-AES128-SHA",
                            "RSA-PSK-AES256-GCM-SHA384",
                            "RSA-PSK-AES256-CBC-SHA384",
                            "RSA-PSK-AES128-GCM-SHA256",
                            "RSA-PSK-AES128-CBC-SHA256",
                            "RSA-PSK-AES256-CBC-SHA",
                            "RSA-PSK-AES128-CBC-SHA"
                        ],
                        "description": "This config holds TLS cipher suite names separated by comma,\nor as an array of strings. e.g.\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.\n<br>\nCiphers (and their ordering) define the way in which the\nclient and server encrypts information over the network connection.\nSelecting a good cipher suite is critical for the\napplication's data security, confidentiality and performance.\n\nThe names should be in OpenSSL string format (not RFC format).\nAll default values and examples provided by EMQX config\ndocumentation are all in OpenSSL format.<br>\n\nNOTE: Certain cipher suites are only compatible with\nspecific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')\nincompatible cipher suites will be silently dropped.\nFor instance, if only 'tlsv1.3' is given in the <code>versions</code>,\nconfiguring cipher suites for other versions will have no effect.\n<br>\n\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br>\nIf PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br>\nPSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code><br>\n",
                        "items": {
                            "type": "string"
                        },
                        "label": "ciphers",
                        "type": "array"
                    },
                    "user_lookup_fun": {
                        "default": "emqx_tls_psk:lookup",
                        "description": "EMQX-internal callback that is used to lookup pre-shared key (PSK) identity.",
                        "label": "user_lookup_fun",
                        "type": "string"
                    },
                    "secure_renegotiate": {
                        "default": true,
                        "description": "SSL parameter renegotiation is a feature that allows a client and a server\nto renegotiate the parameters of the SSL connection on the fly.\nRFC 5746 defines a more secure way of doing this. By enabling secure renegotiation,\nyou drop support for the insecure renegotiation, prone to MitM attacks.",
                        "label": "secure_renegotiate",
                        "type": "boolean"
                    },
                    "dhfile": {
                        "description": "Path to a file containing PEM-encoded Diffie-Hellman parameters\nto be used by the server if a cipher suite using Diffie-Hellman\nkey exchange is negotiated. If not specified, default parameters\nare used.<br>\nNOTE: The <code>dhfile</code> option is not supported by TLS 1.3.",
                        "label": "dhfile",
                        "type": "string"
                    },
                    "honor_cipher_order": {
                        "default": true,
                        "description": "An important security setting, it forces the cipher to be set based\n on the server-specified order instead of the client-specified order,\n hence enforcing the (usually more properly configured) security\n ordering of the server administrator.",
                        "label": "honor_cipher_order",
                        "type": "boolean"
                    },
                    "client_renegotiation": {
                        "default": true,
                        "description": "In protocols that support client-initiated renegotiation,\nthe cost of resources of such an operation is higher for the server than the client.\nThis can act as a vector for denial of service attacks.\nThe SSL application already takes measures to counter-act such attempts,\nbut client-initiated renegotiation can be strictly disabled by setting this option to false.\nThe default value is true. Note that disabling renegotiation can result in\nlong-lived connections becoming unusable due to limits on\nthe number of messages the underlying cipher suite can encipher.",
                        "label": "client_renegotiation",
                        "type": "boolean"
                    },
                    "handshake_timeout": {
                        "default": "15s",
                        "description": "Maximum time duration allowed for the handshake to complete",
                        "label": "handshake_timeout",
                        "type": "duration"
                    }
                },
                "type": "object"
            },
            "limiter.limiter_opts": {
                "properties": {
                    "rate": {
                        "default": "infinity",
                        "description": "The rate",
                        "label": "rate",
                        "type": "string"
                    },
                    "burst": {
                        "default": "0/0s",
                        "description": "The burst, This value is based on rate.<br/>\n This value + rate = the maximum limit that can be achieved when limiter burst.",
                        "label": "burst",
                        "type": "string"
                    },
                    "bucket": {
                        "description": "Buckets config",
                        "label": "bucket",
                        "properties": {
                            "$bucket_name": {
                                "$ref": "#/components/schemas/limiter.bucket_opts"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "emqx_conf_schema.log_rotation": {
                "properties": {
                    "enable": {
                        "default": true,
                        "description": "启用日志轮换功能。",
                        "label": "日志轮换",
                        "type": "boolean"
                    },
                    "count": {
                        "default": 10,
                        "description": "最大日志文件数。",
                        "label": "最大日志文件数",
                        "maximum": 2048,
                        "minimum": 1,
                        "type": "number"
                    }
                },
                "type": "object"
            },
            "authn-builtin_db.authentication": {
                "required": [
                    "user_id_type",
                    "backend",
                    "mechanism"
                ],
                "properties": {
                    "mechanism": {
                        "description": "Authentication mechanism.",
                        "label": "mechanism",
                        "symbols": [
                            "password_based"
                        ],
                        "type": "enum"
                    },
                    "backend": {
                        "description": "Backend type.",
                        "label": "backend",
                        "symbols": [
                            "built_in_database"
                        ],
                        "type": "enum"
                    },
                    "user_id_type": {
                        "default": "username",
                        "description": "Authenticate by client ID or username.",
                        "label": "user_id_type",
                        "symbols": [
                            "clientid",
                            "username"
                        ],
                        "type": "enum"
                    },
                    "password_hash_algorithm": {
                        "default": {
                            "name": "sha256",
                            "salt_position": "prefix"
                        },
                        "description": "Options for password hash creation and verification.",
                        "label": "password_hash_algorithm",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/authn-hash.other_algorithms"
                            },
                            {
                                "$ref": "#/components/schemas/authn-hash.pbkdf2"
                            },
                            {
                                "$ref": "#/components/schemas/authn-hash.bcrypt_rw"
                            }
                        ]
                    },
                    "enable": {
                        "default": true,
                        "description": "Set to <code>false</code> to disable this auth provider",
                        "label": "enable",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "authn-jwt.ssl_enable": {
                "properties": {
                    "enable": {
                        "description": "",
                        "label": "enable",
                        "symbols": [
                            true
                        ],
                        "type": "enum"
                    },
                    "cacertfile": {
                        "description": "Path to the SSL CA certificate file.",
                        "label": "cacertfile",
                        "type": "string"
                    },
                    "certfile": {
                        "description": "Path to the SSL certificate file.",
                        "label": "certfile",
                        "type": "string"
                    },
                    "keyfile": {
                        "description": "Path to the SSL secret key file.",
                        "label": "keyfile",
                        "type": "string"
                    },
                    "verify": {
                        "default": "verify_none",
                        "description": "Enable or disable SSL peer verification.",
                        "label": "verify",
                        "symbols": [
                            "verify_peer",
                            "verify_none"
                        ],
                        "type": "enum"
                    },
                    "server_name_indication": {
                        "description": "SSL SNI (Server Name Indication)",
                        "label": "server_name_indication",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "emqx_schema.broker_perf": {
                "properties": {
                    "route_lock_type": {
                        "default": "key",
                        "description": "通配主题订阅/取消订阅性能调优。\n建议仅当通配符主题较多时才更改此参数。\n\n注：当从/更改为 `global` 锁时，它要求集群中的所有节点在更改之前停止。\n  - `key`: 为 Mnesia 事务涉及到的每个 key 上锁，建议单节点时使用。\n  - `tab`: 为 Mnesia 事务涉及到的表上锁，建议在集群中使用。\n  - `global`: 所以更新操作都被全局的锁保护，仅建议在超大规模集群中使用。\n",
                        "label": "route_lock_type",
                        "symbols": [
                            "key",
                            "tab",
                            "global"
                        ],
                        "type": "enum"
                    },
                    "trie_compaction": {
                        "default": true,
                        "description": "是否开启主题表压缩存储。\n启用它会显着提高通配符主题订阅率，如果通配符主题具有唯一前缀，例如：'sensor/{{id}}/+/'，其中每个订阅者的 ID 是唯一的。\n如果消息主要发布到具有大量级别的主题，则主题匹配性能（发布时）可能会降低。\n\n注意：这是一个集群范围的配置。 它要求在更改之前停止所有节点。\n",
                        "label": "trie_compaction",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "limiter.bucket_opts": {
                "properties": {
                    "rate": {
                        "description": "Rate for this bucket.",
                        "label": "rate",
                        "type": "string"
                    },
                    "capacity": {
                        "description": "The maximum number of tokens for this bucket.",
                        "label": "capacity",
                        "type": "string"
                    },
                    "initial": {
                        "default": "0",
                        "description": "The initial number of tokens for this bucket.",
                        "label": "initial",
                        "type": "string"
                    },
                    "per_client": {
                        "default": {},
                        "description": "The rate limit for each user of the bucket, this field is not required",
                        "label": "per_client",
                        "$ref": "#/components/schemas/limiter.client_bucket"
                    }
                },
                "type": "object"
            },
            "emqx_conf_schema.node": {
                "required": [
                    "data_dir"
                ],
                "properties": {
                    "name": {
                        "default": "emqx@127.0.0.1",
                        "description": "节点名。格式为 <name>@<host>。其中 <host> 可以是 IP 地址，也可以是 FQDN。\n详见 http://erlang.org/doc/reference_manual/distributed.html。\n          ",
                        "label": "节点名",
                        "readOnly": true,
                        "type": "string"
                    },
                    "cookie": {
                        "default": "emqxsecretcookie",
                        "description": "分布式 Erlang 集群使用的 cookie 值。集群间保持一致",
                        "label": "节点 Cookie",
                        "readOnly": true,
                        "type": "string"
                    },
                    "data_dir": {
                        "description": "\n节点数据存放目录，可能会自动创建的子目录如下：<\\br>\n- `mnesia/<node_name>`。EMQX的内置数据库目录。例如，`mnesia/emqx@127.0.0.1`。<\\br>\n如果节点要被重新命名（例如，`emqx@10.0.1.1`）。旧目录应该首先被删除。<\\br>\n- `configs`。在启动时生成的配置，以及集群/本地覆盖的配置。<\\br>\n- `patches`: 热补丁文件将被放在这里。<\\br>\n- `trace`: 日志跟踪文件。<\\br>\n\n**注意**: 一个数据dir不能被两个或更多的EMQX节点同时使用。\n         ",
                        "label": "节点数据目录",
                        "readOnly": true,
                        "type": "string"
                    },
                    "config_files": {
                        "description": "启动时读取的配置文件列表。后面的配置文件项覆盖前面的文件。",
                        "items": {
                            "type": "string"
                        },
                        "label": "配置文件",
                        "readOnly": true,
                        "type": "array"
                    },
                    "global_gc_interval": {
                        "default": "15m",
                        "description": "系统调优参数，设置节点运行多久强制进行一次全局垃圾回收。",
                        "label": "全局垃圾回收",
                        "readOnly": true,
                        "type": "duration"
                    },
                    "crash_dump_file": {
                        "description": "设置 Erlang crash_dump 文件的存储路径和文件名。",
                        "label": "节点崩溃时的Dump文件",
                        "readOnly": true,
                        "type": "string"
                    },
                    "crash_dump_seconds": {
                        "default": "30s",
                        "description": "保存崩溃文件最大允许时间，如果文件太大，在规则时间内没有保存完成，则会直接结束。",
                        "label": "保存崩溃文件最长时间",
                        "readOnly": true,
                        "type": "duration"
                    },
                    "crash_dump_bytes": {
                        "default": "100MB",
                        "description": "限制崩溃文件的大小，当崩溃时节点内存太大，\n如果为了保存现场，需要全部存到崩溃文件中，此处限制最多能保存多大的文件。\n          ",
                        "label": "崩溃文件最大容量",
                        "readOnly": true,
                        "type": "byteSize"
                    },
                    "dist_net_ticktime": {
                        "default": "2m",
                        "description": "系统调优参数，此配置将覆盖 vm.args 文件里的 -kernel net_ticktime 参数。当一个节点持续无响应多久之后，认为其已经宕机并断开连接。\n      ",
                        "label": "节点间心跳间隔",
                        "readOnly": true,
                        "type": "duration"
                    },
                    "backtrace_depth": {
                        "default": 23,
                        "description": "错误信息中打印的最大堆栈层数",
                        "label": "最大堆栈导数",
                        "readOnly": true,
                        "type": "number"
                    },
                    "applications": {
                        "default": "",
                        "description": "当新EMQX 加入集群时，应重启的Erlang应用程序的列表。",
                        "label": "应用",
                        "readOnly": true,
                        "type": "comma_separated_string"
                    },
                    "etc_dir": {
                        "description": "<code>etc</code> 存放目录",
                        "label": "Etc 目录",
                        "readOnly": true,
                        "type": "string"
                    },
                    "cluster_call": {
                        "description": "cluster_call Description",
                        "label": "cluster_call",
                        "readOnly": true,
                        "$ref": "#/components/schemas/emqx_conf_schema.cluster_call"
                    }
                },
                "type": "object"
            },
            "emqx_schema.mqtt_quic_listener": {
                "required": [
                    "bind"
                ],
                "properties": {
                    "enabled": {
                        "default": true,
                        "description": "Enable QUIC listener.",
                        "label": "enabled",
                        "type": "boolean"
                    },
                    "certfile": {
                        "description": "Path to the certificate file.",
                        "label": "certfile",
                        "type": "string"
                    },
                    "keyfile": {
                        "description": "Path to the secret key file.",
                        "label": "keyfile",
                        "type": "string"
                    },
                    "ciphers": {
                        "default": [
                            "TLS_AES_256_GCM_SHA384",
                            "TLS_AES_128_GCM_SHA256",
                            "TLS_CHACHA20_POLY1305_SHA256"
                        ],
                        "description": "This config holds TLS cipher suite names separated by comma,\nor as an array of strings. e.g.\n<code>\"TLS_AES_256_GCM_SHA384,TLS_AES_128_GCM_SHA256\"</code> or\n<code>[\"TLS_AES_256_GCM_SHA384\",\"TLS_AES_128_GCM_SHA256\"]</code>.\n<br>\nCiphers (and their ordering) define the way in which the\nclient and server encrypts information over the network connection.\nSelecting a good cipher suite is critical for the\napplication's data security, confidentiality and performance.\n\nThe names should be in OpenSSL string format (not RFC format).\nAll default values and examples provided by EMQX config\ndocumentation are all in OpenSSL format.<br>\n\nNOTE: Certain cipher suites are only compatible with\nspecific TLS <code>versions</code> ('tlsv1.1', 'tlsv1.2' or 'tlsv1.3')\nincompatible cipher suites will be silently dropped.\nFor instance, if only 'tlsv1.3' is given in the <code>versions</code>,\nconfiguring cipher suites for other versions will have no effect.\n<br>\n\nNOTE: PSK ciphers are suppressed by 'tlsv1.3' version config<br>\nIf PSK cipher suites are intended, 'tlsv1.3' should be disabled from <code>versions</code>.<br>\nPSK cipher suites: <code>\"RSA-PSK-AES256-GCM-SHA384,RSA-PSK-AES256-CBC-SHA384,\nRSA-PSK-AES128-GCM-SHA256,RSA-PSK-AES128-CBC-SHA256,\nRSA-PSK-AES256-CBC-SHA,RSA-PSK-AES128-CBC-SHA,\nRSA-PSK-DES-CBC3-SHA,RSA-PSK-RC4-SHA\"</code><br>\nNOTE: QUIC listener supports only 'tlsv1.3' ciphers<br>",
                        "items": {
                            "type": "string"
                        },
                        "label": "ciphers",
                        "type": "array"
                    },
                    "idle_timeout": {
                        "default": "15s",
                        "description": "Close transport-layer connections from the clients that have not sent MQTT CONNECT\nmessage within this interval.",
                        "label": "idle_timeout",
                        "type": "duration"
                    },
                    "bind": {
                        "description": "IP address and port for the listening socket.",
                        "label": "bind",
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "ip_port"
                            }
                        ]
                    },
                    "acceptors": {
                        "default": 16,
                        "description": "The size of the listener's receiving pool.",
                        "label": "acceptors",
                        "type": "number"
                    },
                    "max_connections": {
                        "default": "infinity",
                        "description": "The maximum number of concurrent connections allowed by the listener.",
                        "label": "max_connections",
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "mountpoint": {
                        "default": "",
                        "description": "When publishing or subscribing, prefix all topics with a mountpoint string.\n The prefixed string will be removed from the topic name when the message\n is delivered to the subscriber. The mountpoint is a way that users can use\n to implement isolation of message routing between different listeners.\n For example if a client A subscribes to `t` with `listeners.tcp.<name>.mountpoint`\n set to `some_tenant`, then the client actually subscribes to the topic\n `some_tenant/t`. Similarly, if another client B (connected to the same listener\n as the client A) sends a message to topic `t`, the message is routed\n to all the clients subscribed `some_tenant/t`, so client A will receive the\n message, with topic name `t`.<br/>\n Set to `\"\"` to disable the feature.<br/>\n\n Variables in mountpoint string:\n - <code>${clientid}</code>: clientid\n - <code>${username}</code>: username",
                        "label": "mountpoint",
                        "type": "string"
                    },
                    "zone": {
                        "default": "default",
                        "description": "The configuration zone to which the listener belongs.",
                        "label": "zone",
                        "type": "string"
                    },
                    "limiter": {
                        "default": {},
                        "description": "Type of the rate limit.",
                        "label": "limiter",
                        "properties": {
                            "$ratelimit's type": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "emqx_schema.listeners": {
                "properties": {
                    "tcp": {
                        "description": "TCP listeners",
                        "label": "tcp",
                        "properties": {
                            "$name": {
                                "$ref": "#/components/schemas/emqx_schema.mqtt_tcp_listener"
                            }
                        },
                        "type": "object"
                    },
                    "ssl": {
                        "description": "SSL listeners",
                        "label": "ssl",
                        "properties": {
                            "$name": {
                                "$ref": "#/components/schemas/emqx_schema.mqtt_ssl_listener"
                            }
                        },
                        "type": "object"
                    },
                    "ws": {
                        "description": "HTTP websocket listeners",
                        "label": "ws",
                        "properties": {
                            "$name": {
                                "$ref": "#/components/schemas/emqx_schema.mqtt_ws_listener"
                            }
                        },
                        "type": "object"
                    },
                    "wss": {
                        "description": "HTTPS websocket listeners",
                        "label": "wss",
                        "properties": {
                            "$name": {
                                "$ref": "#/components/schemas/emqx_schema.mqtt_wss_listener"
                            }
                        },
                        "type": "object"
                    },
                    "quic": {
                        "description": "QUIC listeners",
                        "label": "quic",
                        "properties": {
                            "$name": {
                                "$ref": "#/components/schemas/emqx_schema.mqtt_quic_listener"
                            }
                        },
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "authn-hash.pbkdf2": {
                "required": [
                    "iterations",
                    "mac_fun",
                    "name"
                ],
                "properties": {
                    "name": {
                        "description": "PBKDF2 password hashing.",
                        "label": "name",
                        "symbols": [
                            "pbkdf2"
                        ],
                        "type": "enum"
                    },
                    "mac_fun": {
                        "description": "Specifies mac_fun for PBKDF2 hashing algorithm.",
                        "label": "mac_fun",
                        "symbols": [
                            "md4",
                            "md5",
                            "ripemd160",
                            "sha",
                            "sha224",
                            "sha256",
                            "sha384",
                            "sha512"
                        ],
                        "type": "enum"
                    },
                    "iterations": {
                        "description": "Iteration count for PBKDF2 hashing algorithm.",
                        "label": "iterations",
                        "type": "number"
                    },
                    "dk_length": {
                        "description": "Derived length for PBKDF2 hashing algorithm. If not specified, calculated automatically based on `mac_fun`.",
                        "label": "dk_length",
                        "type": "number"
                    }
                },
                "type": "object"
            },
            "authn-mongodb.sharded-cluster": {
                "required": [
                    "database",
                    "servers",
                    "mongo_type",
                    "collection",
                    "backend",
                    "mechanism"
                ],
                "properties": {
                    "mechanism": {
                        "description": "Authentication mechanism.",
                        "label": "mechanism",
                        "symbols": [
                            "password_based"
                        ],
                        "type": "enum"
                    },
                    "backend": {
                        "description": "Backend type.",
                        "label": "backend",
                        "symbols": [
                            "mongodb"
                        ],
                        "type": "enum"
                    },
                    "collection": {
                        "description": "Collection used to store authentication data.",
                        "label": "collection",
                        "type": "string"
                    },
                    "selector": {
                        "description": "Statement that is executed during the authentication process. Commands can support following wildcards:\n - `${username}`: substituted with client's username\n - `${clientid}`: substituted with the clientid",
                        "label": "selector",
                        "type": "string"
                    },
                    "password_hash_field": {
                        "description": "Document field that contains password hash.",
                        "label": "password_hash_field",
                        "type": "string"
                    },
                    "salt_field": {
                        "description": "Document field that contains the password salt.",
                        "label": "salt_field",
                        "type": "string"
                    },
                    "is_superuser_field": {
                        "description": "Document field that defines if the user has superuser privileges.",
                        "label": "is_superuser_field",
                        "type": "string"
                    },
                    "password_hash_algorithm": {
                        "default": {
                            "name": "sha256",
                            "salt_position": "prefix"
                        },
                        "description": "Options for password hash verification.",
                        "label": "password_hash_algorithm",
                        "oneOf": [
                            {
                                "$ref": "#/components/schemas/authn-hash.other_algorithms"
                            },
                            {
                                "$ref": "#/components/schemas/authn-hash.pbkdf2"
                            },
                            {
                                "$ref": "#/components/schemas/authn-hash.bcrypt"
                            }
                        ]
                    },
                    "enable": {
                        "default": true,
                        "description": "Set to <code>false</code> to disable this auth provider",
                        "label": "enable",
                        "type": "boolean"
                    },
                    "mongo_type": {
                        "default": "sharded",
                        "description": "Sharded cluster模式。",
                        "label": "Sharded cluster模式",
                        "symbols": [
                            "sharded"
                        ],
                        "type": "enum"
                    },
                    "servers": {
                        "description": "\n集群将要连接的节点列表。 节点之间用逗号分隔，如：`Node[,Node].<br/>`\n每个节点的配置为：将要连接的 IPv4 或 IPv6 地址或主机名。<br/>\n主机名具有以下形式：`Host[:Port]`。<br/>\n如果未指定 `[:Port]`，则使用 MongoDB 默认端口 27017。\n",
                        "items": {
                            "type": "string"
                        },
                        "label": "服务器列表",
                        "type": "array"
                    },
                    "w_mode": {
                        "default": "unsafe",
                        "description": "写模式。",
                        "label": "写模式",
                        "symbols": [
                            "unsafe",
                            "safe"
                        ],
                        "type": "enum"
                    },
                    "srv_record": {
                        "default": false,
                        "description": "使用 DNS SRV 记录。",
                        "label": "SRV 记录",
                        "type": "boolean"
                    },
                    "pool_size": {
                        "default": 8,
                        "description": "连接池大小。",
                        "label": "连接池大小",
                        "type": "string"
                    },
                    "username": {
                        "description": "内部数据库的用户名。",
                        "label": "用户名",
                        "type": "string"
                    },
                    "password": {
                        "description": "内部数据库密码。",
                        "label": "密码",
                        "type": "string"
                    },
                    "auth_source": {
                        "description": "与用户证书关联的数据库名称。",
                        "label": "认证源",
                        "type": "string"
                    },
                    "database": {
                        "description": "数据库名字。",
                        "label": "数据库名字",
                        "type": "string"
                    },
                    "topology": {
                        "description": "topology Description",
                        "label": "topology",
                        "$ref": "#/components/schemas/emqx_connector_mongo.topology"
                    },
                    "ssl": {
                        "default": {
                            "enable": false
                        },
                        "description": "启用 SSL 连接。",
                        "label": "启用SSL",
                        "$ref": "#/components/schemas/emqx_schema.ssl_client_opts"
                    }
                },
                "type": "object"
            },
            "dashboard.dashboard": {
                "required": [
                    "default_password",
                    "default_username"
                ],
                "properties": {
                    "listeners": {
                        "description": "仪表盘监听器设置。",
                        "label": "监听器",
                        "$ref": "#/components/schemas/dashboard.listeners"
                    },
                    "default_username": {
                        "default": "admin",
                        "description": "默认的仪表板用户名",
                        "label": "默认用户名",
                        "readOnly": true,
                        "type": "string"
                    },
                    "default_password": {
                        "default": "public",
                        "description": "默认的仪表板用户密码<br>\n为了安全，应该尽快修改密码。",
                        "label": "默认密码",
                        "readOnly": true,
                        "type": "string"
                    },
                    "sample_interval": {
                        "default": "10s",
                        "description": "更新仪表板中显示的指标的时间间隔。",
                        "label": "sample_interval",
                        "type": "duration"
                    },
                    "token_expired_time": {
                        "default": "30m",
                        "description": "JWT token 过期时间",
                        "label": "JWT 过期时间",
                        "type": "duration"
                    },
                    "cors": {
                        "default": false,
                        "description": "支持跨域资源共享(CORS)<br>\n允许服务器指示任何来源(域名、协议或端口)，除了本服务器之外的任何浏览器应允许加载资源。",
                        "label": "跨域资源共享",
                        "type": "boolean"
                    },
                    "i18n_lang": {
                        "default": "en",
                        "description": "多语言支持",
                        "label": "多语言支持",
                        "readOnly": true,
                        "symbols": [
                            "en",
                            "zh"
                        ],
                        "type": "enum"
                    }
                },
                "type": "object"
            },
            "emqx_schema.mqtt_ws_listener": {
                "required": [
                    "bind"
                ],
                "properties": {
                    "tcp": {
                        "description": "tcp Description",
                        "label": "tcp",
                        "$ref": "#/components/schemas/emqx_schema.tcp_opts"
                    },
                    "websocket": {
                        "description": "websocket Description",
                        "label": "websocket",
                        "$ref": "#/components/schemas/emqx_schema.ws_opts"
                    },
                    "bind": {
                        "description": "IP address and port for the listening socket.",
                        "label": "bind",
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "type": "ip_port"
                            }
                        ]
                    },
                    "acceptors": {
                        "default": 16,
                        "description": "The size of the listener's receiving pool.",
                        "label": "acceptors",
                        "type": "number"
                    },
                    "max_connections": {
                        "default": "infinity",
                        "description": "The maximum number of concurrent connections allowed by the listener.",
                        "label": "max_connections",
                        "oneOf": [
                            {
                                "type": "number"
                            },
                            {
                                "symbols": [
                                    "infinity"
                                ],
                                "type": "enum"
                            }
                        ]
                    },
                    "mountpoint": {
                        "default": "",
                        "description": "When publishing or subscribing, prefix all topics with a mountpoint string.\n The prefixed string will be removed from the topic name when the message\n is delivered to the subscriber. The mountpoint is a way that users can use\n to implement isolation of message routing between different listeners.\n For example if a client A subscribes to `t` with `listeners.tcp.<name>.mountpoint`\n set to `some_tenant`, then the client actually subscribes to the topic\n `some_tenant/t`. Similarly, if another client B (connected to the same listener\n as the client A) sends a message to topic `t`, the message is routed\n to all the clients subscribed `some_tenant/t`, so client A will receive the\n message, with topic name `t`.<br/>\n Set to `\"\"` to disable the feature.<br/>\n\n Variables in mountpoint string:\n - <code>${clientid}</code>: clientid\n - <code>${username}</code>: username",
                        "label": "mountpoint",
                        "type": "string"
                    },
                    "zone": {
                        "default": "default",
                        "description": "The configuration zone to which the listener belongs.",
                        "label": "zone",
                        "type": "string"
                    },
                    "limiter": {
                        "default": {},
                        "description": "Type of the rate limit.",
                        "label": "limiter",
                        "properties": {
                            "$ratelimit's type": {
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "access_rules": {
                        "default": [
                            "allow all"
                        ],
                        "description": "The access control rules for this listener.<br/>See: https://github.com/emqtt/esockd#allowdeny",
                        "items": {
                            "type": "string"
                        },
                        "label": "access_rules",
                        "type": "array"
                    },
                    "proxy_protocol": {
                        "default": false,
                        "description": "Enable the Proxy Protocol V1/2 if the EMQX cluster is deployed\n behind HAProxy or Nginx.<br/>See: https://www.haproxy.com/blog/haproxy/proxy-protocol/",
                        "label": "proxy_protocol",
                        "type": "boolean"
                    },
                    "proxy_protocol_timeout": {
                        "default": "3s",
                        "description": "Timeout for proxy protocol. EMQX will close the TCP connection if proxy protocol packet is not received within the timeout.",
                        "label": "proxy_protocol_timeout",
                        "type": "duration"
                    },
                    "authentication": {
                        "description": "Per-listener authentication override\nAuthentication can be one single authenticator instance or a chain of authenticators as an array.\nWhen authenticating a login (username, client ID, etc.) the authenticators are checked in the configured order.<br>\n",
                        "items": {
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/authn-scram-builtin_db.authentication"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-jwt.jwks"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-jwt.public-key"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-jwt.hmac-based"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-http.post"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-http.get"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-redis.sentinel"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-redis.cluster"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-redis.standalone"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-mongodb.sharded-cluster"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-mongodb.replica-set"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-mongodb.standalone"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-postgresql.authentication"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-mysql.authentication"
                                },
                                {
                                    "$ref": "#/components/schemas/authn-builtin_db.authentication"
                                }
                            ]
                        },
                        "label": "authentication",
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "zone.force_shutdown": {
                "properties": {
                    "enable": {
                        "description": "启用 `force_shutdown` 功能",
                        "label": "启用 `force_shutdown` 功能",
                        "type": "boolean"
                    },
                    "max_message_queue_len": {
                        "description": "消息队列的最大长度",
                        "label": "消息队列的最大长度",
                        "minimum": 0,
                        "type": "number"
                    },
                    "max_heap_size": {
                        "description": "Heap 的总大小",
                        "label": "Heap 的总大小",
                        "type": "byteSize"
                    }
                },
                "type": "object"
            }
        }
    },
    "info": {
        "title": "EMQX Hot Conf Schema",
        "version": "0.1.0"
    },
    "paths": {
        "/configs": {
            "get": {
                "properties": {
                    "listeners": {
                        "description": "listeners Description",
                        "label": "listeners",
                        "$ref": "#/components/schemas/emqx_schema.listeners"
                    },
                    "zones": {
                        "description": "<code>zone</code> 是按<code>name</code> 分组的一组配置。\n对于灵活的配置映射，可以将 <code>name</code> 设置为侦听器的 <code>zone</code> 配置。\n注：名为 <code>default</code> 的内置区域是自动创建的，无法删除。",
                        "label": "zones",
                        "properties": {
                            "$name": {
                                "$ref": "#/components/schemas/emqx_schema.zone"
                            }
                        },
                        "type": "object"
                    },
                    "node": {
                        "description": "node Description",
                        "label": "node",
                        "$ref": "#/components/schemas/emqx_conf_schema.node"
                    },
                    "cluster": {
                        "description": "cluster Description",
                        "label": "cluster",
                        "$ref": "#/components/schemas/emqx_conf_schema.cluster"
                    },
                    "log": {
                        "description": "log Description",
                        "label": "log",
                        "$ref": "#/components/schemas/emqx_conf_schema.log"
                    },
                    "broker": {
                        "description": "Broker 相关配置项。",
                        "label": "broker",
                        "$ref": "#/components/schemas/emqx_schema.broker"
                    },
                    "rate_limit": {
                        "description": "rate_limit Description",
                        "label": "rate_limit",
                        "$ref": "#/components/schemas/emqx_schema.rate_limit"
                    },
                    "sysmon": {
                        "description": "sysmon Description",
                        "label": "sysmon",
                        "$ref": "#/components/schemas/emqx_schema.sysmon"
                    },
                    "alarm": {
                        "description": "alarm Description",
                        "label": "alarm",
                        "$ref": "#/components/schemas/emqx_schema.alarm"
                    },
                    "persistent_session_store": {
                        "description": "persistent_session_store Description",
                        "label": "persistent_session_store",
                        "$ref": "#/components/schemas/emqx_schema.persistent_session_store"
                    },
                    "trace": {
                        "description": "trace Description",
                        "label": "trace",
                        "$ref": "#/components/schemas/emqx_schema.trace"
                    },
                    "dashboard": {
                        "description": "dashboard Description",
                        "label": "dashboard",
                        "$ref": "#/components/schemas/dashboard.dashboard"
                    },
                    "limiter": {
                        "description": "limiter Description",
                        "label": "limiter",
                        "$ref": "#/components/schemas/limiter.limiter"
                    }
                },
                "type": "object"
            }
        },
        "/configs/alarm": {
            "get": {
                "$ref": "#/components/schemas/emqx_schema.alarm"
            },
            "put": {
                "$ref": "#/components/schemas/emqx_schema.alarm"
            }
        },
        "/configs/broker": {
            "get": {
                "$ref": "#/components/schemas/emqx_schema.broker"
            },
            "put": {
                "$ref": "#/components/schemas/emqx_schema.broker"
            }
        },
        "/configs/cluster": {
            "get": {
                "$ref": "#/components/schemas/emqx_conf_schema.cluster"
            },
            "put": {
                "$ref": "#/components/schemas/emqx_conf_schema.cluster"
            }
        },
        "/configs/dashboard": {
            "get": {
                "$ref": "#/components/schemas/dashboard.dashboard"
            },
            "put": {
                "$ref": "#/components/schemas/dashboard.dashboard"
            }
        },
        "/configs/global_zone": {
            "get": {
                "properties": {
                    "mqtt": {
                        "description": "mqtt Description",
                        "label": "mqtt",
                        "$ref": "#/components/schemas/zone.mqtt"
                    },
                    "stats": {
                        "description": "stats Description",
                        "label": "stats",
                        "$ref": "#/components/schemas/zone.stats"
                    },
                    "flapping_detect": {
                        "description": "flapping_detect Description",
                        "label": "flapping_detect",
                        "$ref": "#/components/schemas/zone.flapping_detect"
                    },
                    "force_shutdown": {
                        "description": "force_shutdown Description",
                        "label": "force_shutdown",
                        "$ref": "#/components/schemas/zone.force_shutdown"
                    },
                    "conn_congestion": {
                        "description": "conn_congestion Description",
                        "label": "conn_congestion",
                        "$ref": "#/components/schemas/zone.conn_congestion"
                    },
                    "force_gc": {
                        "description": "force_gc Description",
                        "label": "force_gc",
                        "$ref": "#/components/schemas/zone.force_gc"
                    },
                    "overload_protection": {
                        "description": "overload_protection Description",
                        "label": "overload_protection",
                        "$ref": "#/components/schemas/zone.overload_protection"
                    }
                },
                "type": "object"
            },
            "put": {
                "properties": {
                    "mqtt": {
                        "description": "mqtt Description",
                        "label": "mqtt",
                        "$ref": "#/components/schemas/zone.mqtt"
                    },
                    "stats": {
                        "description": "stats Description",
                        "label": "stats",
                        "$ref": "#/components/schemas/zone.stats"
                    },
                    "flapping_detect": {
                        "description": "flapping_detect Description",
                        "label": "flapping_detect",
                        "$ref": "#/components/schemas/zone.flapping_detect"
                    },
                    "force_shutdown": {
                        "description": "force_shutdown Description",
                        "label": "force_shutdown",
                        "$ref": "#/components/schemas/zone.force_shutdown"
                    },
                    "conn_congestion": {
                        "description": "conn_congestion Description",
                        "label": "conn_congestion",
                        "$ref": "#/components/schemas/zone.conn_congestion"
                    },
                    "force_gc": {
                        "description": "force_gc Description",
                        "label": "force_gc",
                        "$ref": "#/components/schemas/zone.force_gc"
                    },
                    "overload_protection": {
                        "description": "overload_protection Description",
                        "label": "overload_protection",
                        "$ref": "#/components/schemas/zone.overload_protection"
                    }
                },
                "type": "object"
            }
        },
        "/configs/limiter": {
            "get": {
                "$ref": "#/components/schemas/limiter.limiter"
            },
            "put": {
                "$ref": "#/components/schemas/limiter.limiter"
            }
        },
        "/configs/listeners": {
            "get": {
                "$ref": "#/components/schemas/emqx_schema.listeners"
            },
            "put": {
                "$ref": "#/components/schemas/emqx_schema.listeners"
            }
        },
        "/configs/log": {
            "get": {
                "$ref": "#/components/schemas/emqx_conf_schema.log"
            },
            "put": {
                "$ref": "#/components/schemas/emqx_conf_schema.log"
            }
        },
        "/configs/node": {
            "get": {
                "$ref": "#/components/schemas/emqx_conf_schema.node"
            },
            "put": {
                "$ref": "#/components/schemas/emqx_conf_schema.node"
            }
        },
        "/configs/persistent_session_store": {
            "get": {
                "$ref": "#/components/schemas/emqx_schema.persistent_session_store"
            },
            "put": {
                "$ref": "#/components/schemas/emqx_schema.persistent_session_store"
            }
        },
        "/configs/rate_limit": {
            "get": {
                "$ref": "#/components/schemas/emqx_schema.rate_limit"
            },
            "put": {
                "$ref": "#/components/schemas/emqx_schema.rate_limit"
            }
        },
        "/configs/sysmon": {
            "get": {
                "$ref": "#/components/schemas/emqx_schema.sysmon"
            },
            "put": {
                "$ref": "#/components/schemas/emqx_schema.sysmon"
            }
        },
        "/configs/trace": {
            "get": {
                "$ref": "#/components/schemas/emqx_schema.trace"
            },
            "put": {
                "$ref": "#/components/schemas/emqx_schema.trace"
            }
        },
        "/configs/zones": {
            "get": {
                "properties": {
                    "$name": {
                        "$ref": "#/components/schemas/emqx_schema.zone"
                    }
                },
                "type": "object"
            },
            "put": {
                "properties": {
                    "$name": {
                        "$ref": "#/components/schemas/emqx_schema.zone"
                    }
                },
                "type": "object"
            }
        },
        "/configs_reset/:rootname": {}
    }
}